thomas@thomas-ubuntu:~/Schreibtisch/Forschung zum parallelen Programmierparadigma/03 - Parallele Berechnung mit Threads$ gcc prime_number_calculation_parallel_threads.c -o prime_number_calculation_parallel_threads -pthread
thomas@thomas-ubuntu:~/Schreibtisch/Forschung zum parallelen Programmierparadigma/03 - Parallele Berechnung mit Threads$ ./prime_number_calculation_parallel_threads
Parallele Berechnung der Primzahlen von 1 bis 100.000 mit Hilfe von Threads und 50 Wiederholung(en):
	Berechnung mittels 1 Thread(s):
		1. Berechnung: 15.662021 s. Die 1. Berechnung der Primzahlen mit 1 Thread(s) ist korrekt.
		2. Berechnung: 15.506648 s. Die 2. Berechnung der Primzahlen mit 1 Thread(s) ist korrekt.
		3. Berechnung: 15.708221 s. Die 3. Berechnung der Primzahlen mit 1 Thread(s) ist korrekt.
		4. Berechnung: 15.260942 s. Die 4. Berechnung der Primzahlen mit 1 Thread(s) ist korrekt.
		5. Berechnung: 15.721828 s. Die 5. Berechnung der Primzahlen mit 1 Thread(s) ist korrekt.
		6. Berechnung: 15.751932 s. Die 6. Berechnung der Primzahlen mit 1 Thread(s) ist korrekt.
		7. Berechnung: 15.362073 s. Die 7. Berechnung der Primzahlen mit 1 Thread(s) ist korrekt.
		8. Berechnung: 15.828979 s. Die 8. Berechnung der Primzahlen mit 1 Thread(s) ist korrekt.
		9. Berechnung: 15.836384 s. Die 9. Berechnung der Primzahlen mit 1 Thread(s) ist korrekt.
		10. Berechnung: 15.366044 s. Die 10. Berechnung der Primzahlen mit 1 Thread(s) ist korrekt.
		11. Berechnung: 15.848114 s. Die 11. Berechnung der Primzahlen mit 1 Thread(s) ist korrekt.
		12. Berechnung: 15.656639 s. Die 12. Berechnung der Primzahlen mit 1 Thread(s) ist korrekt.
		13. Berechnung: 15.488680 s. Die 13. Berechnung der Primzahlen mit 1 Thread(s) ist korrekt.
		14. Berechnung: 15.457476 s. Die 14. Berechnung der Primzahlen mit 1 Thread(s) ist korrekt.
		15. Berechnung: 15.348788 s. Die 15. Berechnung der Primzahlen mit 1 Thread(s) ist korrekt.
		16. Berechnung: 16.090467 s. Die 16. Berechnung der Primzahlen mit 1 Thread(s) ist korrekt.
		17. Berechnung: 15.599014 s. Die 17. Berechnung der Primzahlen mit 1 Thread(s) ist korrekt.
		18. Berechnung: 15.569822 s. Die 18. Berechnung der Primzahlen mit 1 Thread(s) ist korrekt.
		19. Berechnung: 15.503053 s. Die 19. Berechnung der Primzahlen mit 1 Thread(s) ist korrekt.
		20. Berechnung: 15.486893 s. Die 20. Berechnung der Primzahlen mit 1 Thread(s) ist korrekt.
		21. Berechnung: 15.290525 s. Die 21. Berechnung der Primzahlen mit 1 Thread(s) ist korrekt.
		22. Berechnung: 15.434946 s. Die 22. Berechnung der Primzahlen mit 1 Thread(s) ist korrekt.
		23. Berechnung: 15.383989 s. Die 23. Berechnung der Primzahlen mit 1 Thread(s) ist korrekt.
		24. Berechnung: 15.762063 s. Die 24. Berechnung der Primzahlen mit 1 Thread(s) ist korrekt.
		25. Berechnung: 15.734149 s. Die 25. Berechnung der Primzahlen mit 1 Thread(s) ist korrekt.
		26. Berechnung: 15.152335 s. Die 26. Berechnung der Primzahlen mit 1 Thread(s) ist korrekt.
		27. Berechnung: 15.823999 s. Die 27. Berechnung der Primzahlen mit 1 Thread(s) ist korrekt.
		28. Berechnung: 15.448015 s. Die 28. Berechnung der Primzahlen mit 1 Thread(s) ist korrekt.
		29. Berechnung: 15.812461 s. Die 29. Berechnung der Primzahlen mit 1 Thread(s) ist korrekt.
		30. Berechnung: 15.797495 s. Die 30. Berechnung der Primzahlen mit 1 Thread(s) ist korrekt.
		31. Berechnung: 15.433437 s. Die 31. Berechnung der Primzahlen mit 1 Thread(s) ist korrekt.
		32. Berechnung: 14.914831 s. Die 32. Berechnung der Primzahlen mit 1 Thread(s) ist korrekt.
		33. Berechnung: 15.483272 s. Die 33. Berechnung der Primzahlen mit 1 Thread(s) ist korrekt.
		34. Berechnung: 15.722922 s. Die 34. Berechnung der Primzahlen mit 1 Thread(s) ist korrekt.
		35. Berechnung: 15.495448 s. Die 35. Berechnung der Primzahlen mit 1 Thread(s) ist korrekt.
		36. Berechnung: 15.453009 s. Die 36. Berechnung der Primzahlen mit 1 Thread(s) ist korrekt.
		37. Berechnung: 15.355932 s. Die 37. Berechnung der Primzahlen mit 1 Thread(s) ist korrekt.
		38. Berechnung: 15.764896 s. Die 38. Berechnung der Primzahlen mit 1 Thread(s) ist korrekt.
		39. Berechnung: 15.672974 s. Die 39. Berechnung der Primzahlen mit 1 Thread(s) ist korrekt.
		40. Berechnung: 15.635233 s. Die 40. Berechnung der Primzahlen mit 1 Thread(s) ist korrekt.
		41. Berechnung: 15.732460 s. Die 41. Berechnung der Primzahlen mit 1 Thread(s) ist korrekt.
		42. Berechnung: 15.768998 s. Die 42. Berechnung der Primzahlen mit 1 Thread(s) ist korrekt.
		43. Berechnung: 15.574328 s. Die 43. Berechnung der Primzahlen mit 1 Thread(s) ist korrekt.
		44. Berechnung: 15.667674 s. Die 44. Berechnung der Primzahlen mit 1 Thread(s) ist korrekt.
		45. Berechnung: 15.463653 s. Die 45. Berechnung der Primzahlen mit 1 Thread(s) ist korrekt.
		46. Berechnung: 15.754947 s. Die 46. Berechnung der Primzahlen mit 1 Thread(s) ist korrekt.
		47. Berechnung: 15.724810 s. Die 47. Berechnung der Primzahlen mit 1 Thread(s) ist korrekt.
		48. Berechnung: 15.601904 s. Die 48. Berechnung der Primzahlen mit 1 Thread(s) ist korrekt.
		49. Berechnung: 15.803553 s. Die 49. Berechnung der Primzahlen mit 1 Thread(s) ist korrekt.
		50. Berechnung: 16.591266 s. Die 50. Berechnung der Primzahlen mit 1 Thread(s) ist korrekt.
		Durchschnittliche Ausfuehrungszeit des Programmes bei 50 Durchlaeufen mit 1 Thread(s): 15.606191 s. Alle berechneten Primzahlen mit 1 Thread(s) sind korrekt.
	Berechnung mittels 2 Thread(s):
		1. Berechnung: 13.521904 s. Die 1. Berechnung der Primzahlen mit 2 Thread(s) ist korrekt.
		2. Berechnung: 13.013846 s. Die 2. Berechnung der Primzahlen mit 2 Thread(s) ist korrekt.
		3. Berechnung: 12.985514 s. Die 3. Berechnung der Primzahlen mit 2 Thread(s) ist korrekt.
		4. Berechnung: 11.788401 s. Die 4. Berechnung der Primzahlen mit 2 Thread(s) ist korrekt.
		5. Berechnung: 11.875631 s. Die 5. Berechnung der Primzahlen mit 2 Thread(s) ist korrekt.
		6. Berechnung: 11.890128 s. Die 6. Berechnung der Primzahlen mit 2 Thread(s) ist korrekt.
		7. Berechnung: 11.815025 s. Die 7. Berechnung der Primzahlen mit 2 Thread(s) ist korrekt.
		8. Berechnung: 11.520183 s. Die 8. Berechnung der Primzahlen mit 2 Thread(s) ist korrekt.
		9. Berechnung: 11.896011 s. Die 9. Berechnung der Primzahlen mit 2 Thread(s) ist korrekt.
		10. Berechnung: 11.737105 s. Die 10. Berechnung der Primzahlen mit 2 Thread(s) ist korrekt.
		11. Berechnung: 11.630904 s. Die 11. Berechnung der Primzahlen mit 2 Thread(s) ist korrekt.
		12. Berechnung: 11.672514 s. Die 12. Berechnung der Primzahlen mit 2 Thread(s) ist korrekt.
		13. Berechnung: 12.053517 s. Die 13. Berechnung der Primzahlen mit 2 Thread(s) ist korrekt.
		14. Berechnung: 12.132428 s. Die 14. Berechnung der Primzahlen mit 2 Thread(s) ist korrekt.
		15. Berechnung: 11.815857 s. Die 15. Berechnung der Primzahlen mit 2 Thread(s) ist korrekt.
		16. Berechnung: 11.665487 s. Die 16. Berechnung der Primzahlen mit 2 Thread(s) ist korrekt.
		17. Berechnung: 11.758871 s. Die 17. Berechnung der Primzahlen mit 2 Thread(s) ist korrekt.
		18. Berechnung: 11.616235 s. Die 18. Berechnung der Primzahlen mit 2 Thread(s) ist korrekt.
		19. Berechnung: 11.802204 s. Die 19. Berechnung der Primzahlen mit 2 Thread(s) ist korrekt.
		20. Berechnung: 11.697257 s. Die 20. Berechnung der Primzahlen mit 2 Thread(s) ist korrekt.
		21. Berechnung: 11.855217 s. Die 21. Berechnung der Primzahlen mit 2 Thread(s) ist korrekt.
		22. Berechnung: 12.016997 s. Die 22. Berechnung der Primzahlen mit 2 Thread(s) ist korrekt.
		23. Berechnung: 11.846190 s. Die 23. Berechnung der Primzahlen mit 2 Thread(s) ist korrekt.
		24. Berechnung: 11.975546 s. Die 24. Berechnung der Primzahlen mit 2 Thread(s) ist korrekt.
		25. Berechnung: 11.771978 s. Die 25. Berechnung der Primzahlen mit 2 Thread(s) ist korrekt.
		26. Berechnung: 11.569956 s. Die 26. Berechnung der Primzahlen mit 2 Thread(s) ist korrekt.
		27. Berechnung: 11.578811 s. Die 27. Berechnung der Primzahlen mit 2 Thread(s) ist korrekt.
		28. Berechnung: 11.615467 s. Die 28. Berechnung der Primzahlen mit 2 Thread(s) ist korrekt.
		29. Berechnung: 11.938330 s. Die 29. Berechnung der Primzahlen mit 2 Thread(s) ist korrekt.
		30. Berechnung: 11.978998 s. Die 30. Berechnung der Primzahlen mit 2 Thread(s) ist korrekt.
		31. Berechnung: 12.032742 s. Die 31. Berechnung der Primzahlen mit 2 Thread(s) ist korrekt.
		32. Berechnung: 11.777602 s. Die 32. Berechnung der Primzahlen mit 2 Thread(s) ist korrekt.
		33. Berechnung: 11.751643 s. Die 33. Berechnung der Primzahlen mit 2 Thread(s) ist korrekt.
		34. Berechnung: 12.041288 s. Die 34. Berechnung der Primzahlen mit 2 Thread(s) ist korrekt.
		35. Berechnung: 11.561657 s. Die 35. Berechnung der Primzahlen mit 2 Thread(s) ist korrekt.
		36. Berechnung: 11.966957 s. Die 36. Berechnung der Primzahlen mit 2 Thread(s) ist korrekt.
		37. Berechnung: 11.633293 s. Die 37. Berechnung der Primzahlen mit 2 Thread(s) ist korrekt.
		38. Berechnung: 11.744217 s. Die 38. Berechnung der Primzahlen mit 2 Thread(s) ist korrekt.
		39. Berechnung: 11.771190 s. Die 39. Berechnung der Primzahlen mit 2 Thread(s) ist korrekt.
		40. Berechnung: 11.989381 s. Die 40. Berechnung der Primzahlen mit 2 Thread(s) ist korrekt.
		41. Berechnung: 11.468573 s. Die 41. Berechnung der Primzahlen mit 2 Thread(s) ist korrekt.
		42. Berechnung: 11.436393 s. Die 42. Berechnung der Primzahlen mit 2 Thread(s) ist korrekt.
		43. Berechnung: 12.009710 s. Die 43. Berechnung der Primzahlen mit 2 Thread(s) ist korrekt.
		44. Berechnung: 11.999372 s. Die 44. Berechnung der Primzahlen mit 2 Thread(s) ist korrekt.
		45. Berechnung: 11.574982 s. Die 45. Berechnung der Primzahlen mit 2 Thread(s) ist korrekt.
		46. Berechnung: 11.791774 s. Die 46. Berechnung der Primzahlen mit 2 Thread(s) ist korrekt.
		47. Berechnung: 11.894142 s. Die 47. Berechnung der Primzahlen mit 2 Thread(s) ist korrekt.
		48. Berechnung: 11.993184 s. Die 48. Berechnung der Primzahlen mit 2 Thread(s) ist korrekt.
		49. Berechnung: 11.757465 s. Die 49. Berechnung der Primzahlen mit 2 Thread(s) ist korrekt.
		50. Berechnung: 11.743509 s. Die 50. Berechnung der Primzahlen mit 2 Thread(s) ist korrekt.
		Durchschnittliche Ausfuehrungszeit des Programmes bei 50 Durchlaeufen mit 2 Thread(s): 11.879512 s. Alle berechneten Primzahlen mit 2 Thread(s) sind korrekt.
	Berechnung mittels 3 Thread(s):
		1. Berechnung: 8.857337 s. Die 1. Berechnung der Primzahlen mit 3 Thread(s) ist korrekt.
		2. Berechnung: 8.666890 s. Die 2. Berechnung der Primzahlen mit 3 Thread(s) ist korrekt.
		3. Berechnung: 8.866758 s. Die 3. Berechnung der Primzahlen mit 3 Thread(s) ist korrekt.
		4. Berechnung: 8.738725 s. Die 4. Berechnung der Primzahlen mit 3 Thread(s) ist korrekt.
		5. Berechnung: 8.634818 s. Die 5. Berechnung der Primzahlen mit 3 Thread(s) ist korrekt.
		6. Berechnung: 8.945605 s. Die 6. Berechnung der Primzahlen mit 3 Thread(s) ist korrekt.
		7. Berechnung: 8.698962 s. Die 7. Berechnung der Primzahlen mit 3 Thread(s) ist korrekt.
		8. Berechnung: 8.911710 s. Die 8. Berechnung der Primzahlen mit 3 Thread(s) ist korrekt.
		9. Berechnung: 8.950590 s. Die 9. Berechnung der Primzahlen mit 3 Thread(s) ist korrekt.
		10. Berechnung: 8.648361 s. Die 10. Berechnung der Primzahlen mit 3 Thread(s) ist korrekt.
		11. Berechnung: 8.934736 s. Die 11. Berechnung der Primzahlen mit 3 Thread(s) ist korrekt.
		12. Berechnung: 8.946450 s. Die 12. Berechnung der Primzahlen mit 3 Thread(s) ist korrekt.
		13. Berechnung: 9.038554 s. Die 13. Berechnung der Primzahlen mit 3 Thread(s) ist korrekt.
		14. Berechnung: 8.944148 s. Die 14. Berechnung der Primzahlen mit 3 Thread(s) ist korrekt.
		15. Berechnung: 8.744383 s. Die 15. Berechnung der Primzahlen mit 3 Thread(s) ist korrekt.
		16. Berechnung: 8.928414 s. Die 16. Berechnung der Primzahlen mit 3 Thread(s) ist korrekt.
		17. Berechnung: 8.693452 s. Die 17. Berechnung der Primzahlen mit 3 Thread(s) ist korrekt.
		18. Berechnung: 8.726659 s. Die 18. Berechnung der Primzahlen mit 3 Thread(s) ist korrekt.
		19. Berechnung: 8.875664 s. Die 19. Berechnung der Primzahlen mit 3 Thread(s) ist korrekt.
		20. Berechnung: 8.865156 s. Die 20. Berechnung der Primzahlen mit 3 Thread(s) ist korrekt.
		21. Berechnung: 8.537832 s. Die 21. Berechnung der Primzahlen mit 3 Thread(s) ist korrekt.
		22. Berechnung: 8.723616 s. Die 22. Berechnung der Primzahlen mit 3 Thread(s) ist korrekt.
		23. Berechnung: 8.916747 s. Die 23. Berechnung der Primzahlen mit 3 Thread(s) ist korrekt.
		24. Berechnung: 8.947283 s. Die 24. Berechnung der Primzahlen mit 3 Thread(s) ist korrekt.
		25. Berechnung: 9.012994 s. Die 25. Berechnung der Primzahlen mit 3 Thread(s) ist korrekt.
		26. Berechnung: 8.690337 s. Die 26. Berechnung der Primzahlen mit 3 Thread(s) ist korrekt.
		27. Berechnung: 8.918829 s. Die 27. Berechnung der Primzahlen mit 3 Thread(s) ist korrekt.
		28. Berechnung: 8.758214 s. Die 28. Berechnung der Primzahlen mit 3 Thread(s) ist korrekt.
		29. Berechnung: 8.803904 s. Die 29. Berechnung der Primzahlen mit 3 Thread(s) ist korrekt.
		30. Berechnung: 8.725004 s. Die 30. Berechnung der Primzahlen mit 3 Thread(s) ist korrekt.
		31. Berechnung: 8.830648 s. Die 31. Berechnung der Primzahlen mit 3 Thread(s) ist korrekt.
		32. Berechnung: 9.075632 s. Die 32. Berechnung der Primzahlen mit 3 Thread(s) ist korrekt.
		33. Berechnung: 8.699182 s. Die 33. Berechnung der Primzahlen mit 3 Thread(s) ist korrekt.
		34. Berechnung: 8.743101 s. Die 34. Berechnung der Primzahlen mit 3 Thread(s) ist korrekt.
		35. Berechnung: 8.741345 s. Die 35. Berechnung der Primzahlen mit 3 Thread(s) ist korrekt.
		36. Berechnung: 8.875824 s. Die 36. Berechnung der Primzahlen mit 3 Thread(s) ist korrekt.
		37. Berechnung: 8.723516 s. Die 37. Berechnung der Primzahlen mit 3 Thread(s) ist korrekt.
		38. Berechnung: 8.754650 s. Die 38. Berechnung der Primzahlen mit 3 Thread(s) ist korrekt.
		39. Berechnung: 8.890862 s. Die 39. Berechnung der Primzahlen mit 3 Thread(s) ist korrekt.
		40. Berechnung: 8.903526 s. Die 40. Berechnung der Primzahlen mit 3 Thread(s) ist korrekt.
		41. Berechnung: 8.972298 s. Die 41. Berechnung der Primzahlen mit 3 Thread(s) ist korrekt.
		42. Berechnung: 8.804289 s. Die 42. Berechnung der Primzahlen mit 3 Thread(s) ist korrekt.
		43. Berechnung: 8.835332 s. Die 43. Berechnung der Primzahlen mit 3 Thread(s) ist korrekt.
		44. Berechnung: 8.750701 s. Die 44. Berechnung der Primzahlen mit 3 Thread(s) ist korrekt.
		45. Berechnung: 8.982582 s. Die 45. Berechnung der Primzahlen mit 3 Thread(s) ist korrekt.
		46. Berechnung: 8.747399 s. Die 46. Berechnung der Primzahlen mit 3 Thread(s) ist korrekt.
		47. Berechnung: 8.599084 s. Die 47. Berechnung der Primzahlen mit 3 Thread(s) ist korrekt.
		48. Berechnung: 8.748364 s. Die 48. Berechnung der Primzahlen mit 3 Thread(s) ist korrekt.
		49. Berechnung: 8.799518 s. Die 49. Berechnung der Primzahlen mit 3 Thread(s) ist korrekt.
		50. Berechnung: 8.617117 s. Die 50. Berechnung der Primzahlen mit 3 Thread(s) ist korrekt.
		Durchschnittliche Ausfuehrungszeit des Programmes bei 50 Durchlaeufen mit 3 Thread(s): 8.814942 s. Alle berechneten Primzahlen mit 3 Thread(s) sind korrekt.
	Berechnung mittels 4 Thread(s):
		1. Berechnung: 7.129097 s. Die 1. Berechnung der Primzahlen mit 4 Thread(s) ist korrekt.
		2. Berechnung: 7.045386 s. Die 2. Berechnung der Primzahlen mit 4 Thread(s) ist korrekt.
		3. Berechnung: 6.940647 s. Die 3. Berechnung der Primzahlen mit 4 Thread(s) ist korrekt.
		4. Berechnung: 7.102711 s. Die 4. Berechnung der Primzahlen mit 4 Thread(s) ist korrekt.
		5. Berechnung: 7.265735 s. Die 5. Berechnung der Primzahlen mit 4 Thread(s) ist korrekt.
		6. Berechnung: 6.940701 s. Die 6. Berechnung der Primzahlen mit 4 Thread(s) ist korrekt.
		7. Berechnung: 7.159423 s. Die 7. Berechnung der Primzahlen mit 4 Thread(s) ist korrekt.
		8. Berechnung: 6.912427 s. Die 8. Berechnung der Primzahlen mit 4 Thread(s) ist korrekt.
		9. Berechnung: 6.853033 s. Die 9. Berechnung der Primzahlen mit 4 Thread(s) ist korrekt.
		10. Berechnung: 6.962640 s. Die 10. Berechnung der Primzahlen mit 4 Thread(s) ist korrekt.
		11. Berechnung: 7.059943 s. Die 11. Berechnung der Primzahlen mit 4 Thread(s) ist korrekt.
		12. Berechnung: 6.983608 s. Die 12. Berechnung der Primzahlen mit 4 Thread(s) ist korrekt.
		13. Berechnung: 6.972031 s. Die 13. Berechnung der Primzahlen mit 4 Thread(s) ist korrekt.
		14. Berechnung: 7.108022 s. Die 14. Berechnung der Primzahlen mit 4 Thread(s) ist korrekt.
		15. Berechnung: 7.107583 s. Die 15. Berechnung der Primzahlen mit 4 Thread(s) ist korrekt.
		16. Berechnung: 7.229906 s. Die 16. Berechnung der Primzahlen mit 4 Thread(s) ist korrekt.
		17. Berechnung: 6.956641 s. Die 17. Berechnung der Primzahlen mit 4 Thread(s) ist korrekt.
		18. Berechnung: 6.993084 s. Die 18. Berechnung der Primzahlen mit 4 Thread(s) ist korrekt.
		19. Berechnung: 7.058779 s. Die 19. Berechnung der Primzahlen mit 4 Thread(s) ist korrekt.
		20. Berechnung: 7.046136 s. Die 20. Berechnung der Primzahlen mit 4 Thread(s) ist korrekt.
		21. Berechnung: 7.104184 s. Die 21. Berechnung der Primzahlen mit 4 Thread(s) ist korrekt.
		22. Berechnung: 7.164502 s. Die 22. Berechnung der Primzahlen mit 4 Thread(s) ist korrekt.
		23. Berechnung: 7.739410 s. Die 23. Berechnung der Primzahlen mit 4 Thread(s) ist korrekt.
		24. Berechnung: 7.594654 s. Die 24. Berechnung der Primzahlen mit 4 Thread(s) ist korrekt.
		25. Berechnung: 7.620414 s. Die 25. Berechnung der Primzahlen mit 4 Thread(s) ist korrekt.
		26. Berechnung: 7.515721 s. Die 26. Berechnung der Primzahlen mit 4 Thread(s) ist korrekt.
		27. Berechnung: 7.681507 s. Die 27. Berechnung der Primzahlen mit 4 Thread(s) ist korrekt.
		28. Berechnung: 7.639904 s. Die 28. Berechnung der Primzahlen mit 4 Thread(s) ist korrekt.
		29. Berechnung: 7.629055 s. Die 29. Berechnung der Primzahlen mit 4 Thread(s) ist korrekt.
		30. Berechnung: 7.082400 s. Die 30. Berechnung der Primzahlen mit 4 Thread(s) ist korrekt.
		31. Berechnung: 6.988943 s. Die 31. Berechnung der Primzahlen mit 4 Thread(s) ist korrekt.
		32. Berechnung: 6.997620 s. Die 32. Berechnung der Primzahlen mit 4 Thread(s) ist korrekt.
		33. Berechnung: 7.109307 s. Die 33. Berechnung der Primzahlen mit 4 Thread(s) ist korrekt.
		34. Berechnung: 7.168234 s. Die 34. Berechnung der Primzahlen mit 4 Thread(s) ist korrekt.
		35. Berechnung: 6.994278 s. Die 35. Berechnung der Primzahlen mit 4 Thread(s) ist korrekt.
		36. Berechnung: 7.053877 s. Die 36. Berechnung der Primzahlen mit 4 Thread(s) ist korrekt.
		37. Berechnung: 7.061691 s. Die 37. Berechnung der Primzahlen mit 4 Thread(s) ist korrekt.
		38. Berechnung: 6.933188 s. Die 38. Berechnung der Primzahlen mit 4 Thread(s) ist korrekt.
		39. Berechnung: 7.121157 s. Die 39. Berechnung der Primzahlen mit 4 Thread(s) ist korrekt.
		40. Berechnung: 7.046614 s. Die 40. Berechnung der Primzahlen mit 4 Thread(s) ist korrekt.
		41. Berechnung: 7.152032 s. Die 41. Berechnung der Primzahlen mit 4 Thread(s) ist korrekt.
		42. Berechnung: 6.902005 s. Die 42. Berechnung der Primzahlen mit 4 Thread(s) ist korrekt.
		43. Berechnung: 7.156737 s. Die 43. Berechnung der Primzahlen mit 4 Thread(s) ist korrekt.
		44. Berechnung: 6.915090 s. Die 44. Berechnung der Primzahlen mit 4 Thread(s) ist korrekt.
		45. Berechnung: 7.178188 s. Die 45. Berechnung der Primzahlen mit 4 Thread(s) ist korrekt.
		46. Berechnung: 7.088939 s. Die 46. Berechnung der Primzahlen mit 4 Thread(s) ist korrekt.
		47. Berechnung: 7.085007 s. Die 47. Berechnung der Primzahlen mit 4 Thread(s) ist korrekt.
		48. Berechnung: 6.939255 s. Die 48. Berechnung der Primzahlen mit 4 Thread(s) ist korrekt.
		49. Berechnung: 6.861563 s. Die 49. Berechnung der Primzahlen mit 4 Thread(s) ist korrekt.
		50. Berechnung: 7.093441 s. Die 50. Berechnung der Primzahlen mit 4 Thread(s) ist korrekt.
		Durchschnittliche Ausfuehrungszeit des Programmes bei 50 Durchlaeufen mit 4 Thread(s): 7.128929 s. Alle berechneten Primzahlen mit 4 Thread(s) sind korrekt.
	Berechnung mittels 5 Thread(s):
		1. Berechnung: 6.071885 s. Die 1. Berechnung der Primzahlen mit 5 Thread(s) ist korrekt.
		2. Berechnung: 6.236595 s. Die 2. Berechnung der Primzahlen mit 5 Thread(s) ist korrekt.
		3. Berechnung: 6.142500 s. Die 3. Berechnung der Primzahlen mit 5 Thread(s) ist korrekt.
		4. Berechnung: 5.848465 s. Die 4. Berechnung der Primzahlen mit 5 Thread(s) ist korrekt.
		5. Berechnung: 5.951459 s. Die 5. Berechnung der Primzahlen mit 5 Thread(s) ist korrekt.
		6. Berechnung: 6.000926 s. Die 6. Berechnung der Primzahlen mit 5 Thread(s) ist korrekt.
		7. Berechnung: 5.848635 s. Die 7. Berechnung der Primzahlen mit 5 Thread(s) ist korrekt.
		8. Berechnung: 6.173812 s. Die 8. Berechnung der Primzahlen mit 5 Thread(s) ist korrekt.
		9. Berechnung: 6.279705 s. Die 9. Berechnung der Primzahlen mit 5 Thread(s) ist korrekt.
		10. Berechnung: 6.031383 s. Die 10. Berechnung der Primzahlen mit 5 Thread(s) ist korrekt.
		11. Berechnung: 5.946875 s. Die 11. Berechnung der Primzahlen mit 5 Thread(s) ist korrekt.
		12. Berechnung: 6.028948 s. Die 12. Berechnung der Primzahlen mit 5 Thread(s) ist korrekt.
		13. Berechnung: 5.948209 s. Die 13. Berechnung der Primzahlen mit 5 Thread(s) ist korrekt.
		14. Berechnung: 6.072766 s. Die 14. Berechnung der Primzahlen mit 5 Thread(s) ist korrekt.
		15. Berechnung: 6.149348 s. Die 15. Berechnung der Primzahlen mit 5 Thread(s) ist korrekt.
		16. Berechnung: 6.025193 s. Die 16. Berechnung der Primzahlen mit 5 Thread(s) ist korrekt.
		17. Berechnung: 6.046196 s. Die 17. Berechnung der Primzahlen mit 5 Thread(s) ist korrekt.
		18. Berechnung: 5.939553 s. Die 18. Berechnung der Primzahlen mit 5 Thread(s) ist korrekt.
		19. Berechnung: 6.082848 s. Die 19. Berechnung der Primzahlen mit 5 Thread(s) ist korrekt.
		20. Berechnung: 6.079610 s. Die 20. Berechnung der Primzahlen mit 5 Thread(s) ist korrekt.
		21. Berechnung: 5.983984 s. Die 21. Berechnung der Primzahlen mit 5 Thread(s) ist korrekt.
		22. Berechnung: 6.097911 s. Die 22. Berechnung der Primzahlen mit 5 Thread(s) ist korrekt.
		23. Berechnung: 6.205873 s. Die 23. Berechnung der Primzahlen mit 5 Thread(s) ist korrekt.
		24. Berechnung: 5.817066 s. Die 24. Berechnung der Primzahlen mit 5 Thread(s) ist korrekt.
		25. Berechnung: 6.074158 s. Die 25. Berechnung der Primzahlen mit 5 Thread(s) ist korrekt.
		26. Berechnung: 5.920950 s. Die 26. Berechnung der Primzahlen mit 5 Thread(s) ist korrekt.
		27. Berechnung: 5.991099 s. Die 27. Berechnung der Primzahlen mit 5 Thread(s) ist korrekt.
		28. Berechnung: 6.097121 s. Die 28. Berechnung der Primzahlen mit 5 Thread(s) ist korrekt.
		29. Berechnung: 6.075049 s. Die 29. Berechnung der Primzahlen mit 5 Thread(s) ist korrekt.
		30. Berechnung: 6.063712 s. Die 30. Berechnung der Primzahlen mit 5 Thread(s) ist korrekt.
		31. Berechnung: 5.976724 s. Die 31. Berechnung der Primzahlen mit 5 Thread(s) ist korrekt.
		32. Berechnung: 5.924859 s. Die 32. Berechnung der Primzahlen mit 5 Thread(s) ist korrekt.
		33. Berechnung: 6.011528 s. Die 33. Berechnung der Primzahlen mit 5 Thread(s) ist korrekt.
		34. Berechnung: 6.126318 s. Die 34. Berechnung der Primzahlen mit 5 Thread(s) ist korrekt.
		35. Berechnung: 6.066243 s. Die 35. Berechnung der Primzahlen mit 5 Thread(s) ist korrekt.
		36. Berechnung: 5.968306 s. Die 36. Berechnung der Primzahlen mit 5 Thread(s) ist korrekt.
		37. Berechnung: 5.875382 s. Die 37. Berechnung der Primzahlen mit 5 Thread(s) ist korrekt.
		38. Berechnung: 6.038490 s. Die 38. Berechnung der Primzahlen mit 5 Thread(s) ist korrekt.
		39. Berechnung: 5.867012 s. Die 39. Berechnung der Primzahlen mit 5 Thread(s) ist korrekt.
		40. Berechnung: 5.860931 s. Die 40. Berechnung der Primzahlen mit 5 Thread(s) ist korrekt.
		41. Berechnung: 6.058414 s. Die 41. Berechnung der Primzahlen mit 5 Thread(s) ist korrekt.
		42. Berechnung: 6.107519 s. Die 42. Berechnung der Primzahlen mit 5 Thread(s) ist korrekt.
		43. Berechnung: 6.001506 s. Die 43. Berechnung der Primzahlen mit 5 Thread(s) ist korrekt.
		44. Berechnung: 6.012900 s. Die 44. Berechnung der Primzahlen mit 5 Thread(s) ist korrekt.
		45. Berechnung: 6.054223 s. Die 45. Berechnung der Primzahlen mit 5 Thread(s) ist korrekt.
		46. Berechnung: 5.906019 s. Die 46. Berechnung der Primzahlen mit 5 Thread(s) ist korrekt.
		47. Berechnung: 5.894280 s. Die 47. Berechnung der Primzahlen mit 5 Thread(s) ist korrekt.
		48. Berechnung: 6.185193 s. Die 48. Berechnung der Primzahlen mit 5 Thread(s) ist korrekt.
		49. Berechnung: 5.882118 s. Die 49. Berechnung der Primzahlen mit 5 Thread(s) ist korrekt.
		50. Berechnung: 5.935145 s. Die 50. Berechnung der Primzahlen mit 5 Thread(s) ist korrekt.
		Durchschnittliche Ausfuehrungszeit des Programmes bei 50 Durchlaeufen mit 5 Thread(s): 6.019699 s. Alle berechneten Primzahlen mit 5 Thread(s) sind korrekt.
	Berechnung mittels 6 Thread(s):
		1. Berechnung: 5.364137 s. Die 1. Berechnung der Primzahlen mit 6 Thread(s) ist korrekt.
		2. Berechnung: 5.569934 s. Die 2. Berechnung der Primzahlen mit 6 Thread(s) ist korrekt.
		3. Berechnung: 5.423963 s. Die 3. Berechnung der Primzahlen mit 6 Thread(s) ist korrekt.
		4. Berechnung: 5.451286 s. Die 4. Berechnung der Primzahlen mit 6 Thread(s) ist korrekt.
		5. Berechnung: 5.512960 s. Die 5. Berechnung der Primzahlen mit 6 Thread(s) ist korrekt.
		6. Berechnung: 5.523861 s. Die 6. Berechnung der Primzahlen mit 6 Thread(s) ist korrekt.
		7. Berechnung: 5.341426 s. Die 7. Berechnung der Primzahlen mit 6 Thread(s) ist korrekt.
		8. Berechnung: 5.394027 s. Die 8. Berechnung der Primzahlen mit 6 Thread(s) ist korrekt.
		9. Berechnung: 5.246041 s. Die 9. Berechnung der Primzahlen mit 6 Thread(s) ist korrekt.
		10. Berechnung: 5.431842 s. Die 10. Berechnung der Primzahlen mit 6 Thread(s) ist korrekt.
		11. Berechnung: 5.309317 s. Die 11. Berechnung der Primzahlen mit 6 Thread(s) ist korrekt.
		12. Berechnung: 5.536818 s. Die 12. Berechnung der Primzahlen mit 6 Thread(s) ist korrekt.
		13. Berechnung: 5.618701 s. Die 13. Berechnung der Primzahlen mit 6 Thread(s) ist korrekt.
		14. Berechnung: 5.197212 s. Die 14. Berechnung der Primzahlen mit 6 Thread(s) ist korrekt.
		15. Berechnung: 5.329506 s. Die 15. Berechnung der Primzahlen mit 6 Thread(s) ist korrekt.
		16. Berechnung: 5.420835 s. Die 16. Berechnung der Primzahlen mit 6 Thread(s) ist korrekt.
		17. Berechnung: 5.427441 s. Die 17. Berechnung der Primzahlen mit 6 Thread(s) ist korrekt.
		18. Berechnung: 5.599880 s. Die 18. Berechnung der Primzahlen mit 6 Thread(s) ist korrekt.
		19. Berechnung: 5.192299 s. Die 19. Berechnung der Primzahlen mit 6 Thread(s) ist korrekt.
		20. Berechnung: 5.268803 s. Die 20. Berechnung der Primzahlen mit 6 Thread(s) ist korrekt.
		21. Berechnung: 5.267192 s. Die 21. Berechnung der Primzahlen mit 6 Thread(s) ist korrekt.
		22. Berechnung: 5.269262 s. Die 22. Berechnung der Primzahlen mit 6 Thread(s) ist korrekt.
		23. Berechnung: 5.376351 s. Die 23. Berechnung der Primzahlen mit 6 Thread(s) ist korrekt.
		24. Berechnung: 5.330258 s. Die 24. Berechnung der Primzahlen mit 6 Thread(s) ist korrekt.
		25. Berechnung: 5.669790 s. Die 25. Berechnung der Primzahlen mit 6 Thread(s) ist korrekt.
		26. Berechnung: 5.173677 s. Die 26. Berechnung der Primzahlen mit 6 Thread(s) ist korrekt.
		27. Berechnung: 5.148491 s. Die 27. Berechnung der Primzahlen mit 6 Thread(s) ist korrekt.
		28. Berechnung: 5.393162 s. Die 28. Berechnung der Primzahlen mit 6 Thread(s) ist korrekt.
		29. Berechnung: 5.244512 s. Die 29. Berechnung der Primzahlen mit 6 Thread(s) ist korrekt.
		30. Berechnung: 5.180747 s. Die 30. Berechnung der Primzahlen mit 6 Thread(s) ist korrekt.
		31. Berechnung: 5.196896 s. Die 31. Berechnung der Primzahlen mit 6 Thread(s) ist korrekt.
		32. Berechnung: 5.563299 s. Die 32. Berechnung der Primzahlen mit 6 Thread(s) ist korrekt.
		33. Berechnung: 5.101785 s. Die 33. Berechnung der Primzahlen mit 6 Thread(s) ist korrekt.
		34. Berechnung: 5.270369 s. Die 34. Berechnung der Primzahlen mit 6 Thread(s) ist korrekt.
		35. Berechnung: 5.259513 s. Die 35. Berechnung der Primzahlen mit 6 Thread(s) ist korrekt.
		36. Berechnung: 5.303068 s. Die 36. Berechnung der Primzahlen mit 6 Thread(s) ist korrekt.
		37. Berechnung: 5.300224 s. Die 37. Berechnung der Primzahlen mit 6 Thread(s) ist korrekt.
		38. Berechnung: 5.331395 s. Die 38. Berechnung der Primzahlen mit 6 Thread(s) ist korrekt.
		39. Berechnung: 5.267056 s. Die 39. Berechnung der Primzahlen mit 6 Thread(s) ist korrekt.
		40. Berechnung: 5.335081 s. Die 40. Berechnung der Primzahlen mit 6 Thread(s) ist korrekt.
		41. Berechnung: 5.233149 s. Die 41. Berechnung der Primzahlen mit 6 Thread(s) ist korrekt.
		42. Berechnung: 5.474168 s. Die 42. Berechnung der Primzahlen mit 6 Thread(s) ist korrekt.
		43. Berechnung: 5.053449 s. Die 43. Berechnung der Primzahlen mit 6 Thread(s) ist korrekt.
		44. Berechnung: 5.347820 s. Die 44. Berechnung der Primzahlen mit 6 Thread(s) ist korrekt.
		45. Berechnung: 5.135767 s. Die 45. Berechnung der Primzahlen mit 6 Thread(s) ist korrekt.
		46. Berechnung: 5.578303 s. Die 46. Berechnung der Primzahlen mit 6 Thread(s) ist korrekt.
		47. Berechnung: 5.282523 s. Die 47. Berechnung der Primzahlen mit 6 Thread(s) ist korrekt.
		48. Berechnung: 5.267430 s. Die 48. Berechnung der Primzahlen mit 6 Thread(s) ist korrekt.
		49. Berechnung: 5.335870 s. Die 49. Berechnung der Primzahlen mit 6 Thread(s) ist korrekt.
		50. Berechnung: 5.195801 s. Die 50. Berechnung der Primzahlen mit 6 Thread(s) ist korrekt.
		Durchschnittliche Ausfuehrungszeit des Programmes bei 50 Durchlaeufen mit 6 Thread(s): 5.340934 s. Alle berechneten Primzahlen mit 6 Thread(s) sind korrekt.
	Berechnung mittels 7 Thread(s):
		1. Berechnung: 5.172752 s. Die 1. Berechnung der Primzahlen mit 7 Thread(s) ist korrekt.
		2. Berechnung: 5.128049 s. Die 2. Berechnung der Primzahlen mit 7 Thread(s) ist korrekt.
		3. Berechnung: 5.149618 s. Die 3. Berechnung der Primzahlen mit 7 Thread(s) ist korrekt.
		4. Berechnung: 5.021727 s. Die 4. Berechnung der Primzahlen mit 7 Thread(s) ist korrekt.
		5. Berechnung: 5.286353 s. Die 5. Berechnung der Primzahlen mit 7 Thread(s) ist korrekt.
		6. Berechnung: 4.895819 s. Die 6. Berechnung der Primzahlen mit 7 Thread(s) ist korrekt.
		7. Berechnung: 4.959097 s. Die 7. Berechnung der Primzahlen mit 7 Thread(s) ist korrekt.
		8. Berechnung: 5.065103 s. Die 8. Berechnung der Primzahlen mit 7 Thread(s) ist korrekt.
		9. Berechnung: 5.107717 s. Die 9. Berechnung der Primzahlen mit 7 Thread(s) ist korrekt.
		10. Berechnung: 5.173350 s. Die 10. Berechnung der Primzahlen mit 7 Thread(s) ist korrekt.
		11. Berechnung: 5.091849 s. Die 11. Berechnung der Primzahlen mit 7 Thread(s) ist korrekt.
		12. Berechnung: 5.165701 s. Die 12. Berechnung der Primzahlen mit 7 Thread(s) ist korrekt.
		13. Berechnung: 4.943558 s. Die 13. Berechnung der Primzahlen mit 7 Thread(s) ist korrekt.
		14. Berechnung: 5.339138 s. Die 14. Berechnung der Primzahlen mit 7 Thread(s) ist korrekt.
		15. Berechnung: 5.243113 s. Die 15. Berechnung der Primzahlen mit 7 Thread(s) ist korrekt.
		16. Berechnung: 5.099810 s. Die 16. Berechnung der Primzahlen mit 7 Thread(s) ist korrekt.
		17. Berechnung: 4.861314 s. Die 17. Berechnung der Primzahlen mit 7 Thread(s) ist korrekt.
		18. Berechnung: 4.984437 s. Die 18. Berechnung der Primzahlen mit 7 Thread(s) ist korrekt.
		19. Berechnung: 5.258361 s. Die 19. Berechnung der Primzahlen mit 7 Thread(s) ist korrekt.
		20. Berechnung: 5.299989 s. Die 20. Berechnung der Primzahlen mit 7 Thread(s) ist korrekt.
		21. Berechnung: 5.130508 s. Die 21. Berechnung der Primzahlen mit 7 Thread(s) ist korrekt.
		22. Berechnung: 5.049635 s. Die 22. Berechnung der Primzahlen mit 7 Thread(s) ist korrekt.
		23. Berechnung: 5.135131 s. Die 23. Berechnung der Primzahlen mit 7 Thread(s) ist korrekt.
		24. Berechnung: 5.051476 s. Die 24. Berechnung der Primzahlen mit 7 Thread(s) ist korrekt.
		25. Berechnung: 5.158468 s. Die 25. Berechnung der Primzahlen mit 7 Thread(s) ist korrekt.
		26. Berechnung: 4.932510 s. Die 26. Berechnung der Primzahlen mit 7 Thread(s) ist korrekt.
		27. Berechnung: 5.090172 s. Die 27. Berechnung der Primzahlen mit 7 Thread(s) ist korrekt.
		28. Berechnung: 4.920343 s. Die 28. Berechnung der Primzahlen mit 7 Thread(s) ist korrekt.
		29. Berechnung: 4.945467 s. Die 29. Berechnung der Primzahlen mit 7 Thread(s) ist korrekt.
		30. Berechnung: 5.086345 s. Die 30. Berechnung der Primzahlen mit 7 Thread(s) ist korrekt.
		31. Berechnung: 5.271415 s. Die 31. Berechnung der Primzahlen mit 7 Thread(s) ist korrekt.
		32. Berechnung: 5.293080 s. Die 32. Berechnung der Primzahlen mit 7 Thread(s) ist korrekt.
		33. Berechnung: 5.174998 s. Die 33. Berechnung der Primzahlen mit 7 Thread(s) ist korrekt.
		34. Berechnung: 5.117502 s. Die 34. Berechnung der Primzahlen mit 7 Thread(s) ist korrekt.
		35. Berechnung: 5.152043 s. Die 35. Berechnung der Primzahlen mit 7 Thread(s) ist korrekt.
		36. Berechnung: 5.015759 s. Die 36. Berechnung der Primzahlen mit 7 Thread(s) ist korrekt.
		37. Berechnung: 5.089201 s. Die 37. Berechnung der Primzahlen mit 7 Thread(s) ist korrekt.
		38. Berechnung: 5.013173 s. Die 38. Berechnung der Primzahlen mit 7 Thread(s) ist korrekt.
		39. Berechnung: 5.269203 s. Die 39. Berechnung der Primzahlen mit 7 Thread(s) ist korrekt.
		40. Berechnung: 5.356500 s. Die 40. Berechnung der Primzahlen mit 7 Thread(s) ist korrekt.
		41. Berechnung: 4.847774 s. Die 41. Berechnung der Primzahlen mit 7 Thread(s) ist korrekt.
		42. Berechnung: 5.102829 s. Die 42. Berechnung der Primzahlen mit 7 Thread(s) ist korrekt.
		43. Berechnung: 4.977168 s. Die 43. Berechnung der Primzahlen mit 7 Thread(s) ist korrekt.
		44. Berechnung: 5.170917 s. Die 44. Berechnung der Primzahlen mit 7 Thread(s) ist korrekt.
		45. Berechnung: 5.101940 s. Die 45. Berechnung der Primzahlen mit 7 Thread(s) ist korrekt.
		46. Berechnung: 5.189262 s. Die 46. Berechnung der Primzahlen mit 7 Thread(s) ist korrekt.
		47. Berechnung: 5.153695 s. Die 47. Berechnung der Primzahlen mit 7 Thread(s) ist korrekt.
		48. Berechnung: 4.924448 s. Die 48. Berechnung der Primzahlen mit 7 Thread(s) ist korrekt.
		49. Berechnung: 5.013786 s. Die 49. Berechnung der Primzahlen mit 7 Thread(s) ist korrekt.
		50. Berechnung: 5.328471 s. Die 50. Berechnung der Primzahlen mit 7 Thread(s) ist korrekt.
		Durchschnittliche Ausfuehrungszeit des Programmes bei 50 Durchlaeufen mit 7 Thread(s): 5.106201 s. Alle berechneten Primzahlen mit 7 Thread(s) sind korrekt.
	Berechnung mittels 8 Thread(s):
		1. Berechnung: 4.729847 s. Die 1. Berechnung der Primzahlen mit 8 Thread(s) ist korrekt.
		2. Berechnung: 4.905749 s. Die 2. Berechnung der Primzahlen mit 8 Thread(s) ist korrekt.
		3. Berechnung: 4.921122 s. Die 3. Berechnung der Primzahlen mit 8 Thread(s) ist korrekt.
		4. Berechnung: 4.662835 s. Die 4. Berechnung der Primzahlen mit 8 Thread(s) ist korrekt.
		5. Berechnung: 4.906092 s. Die 5. Berechnung der Primzahlen mit 8 Thread(s) ist korrekt.
		6. Berechnung: 4.874349 s. Die 6. Berechnung der Primzahlen mit 8 Thread(s) ist korrekt.
		7. Berechnung: 5.040594 s. Die 7. Berechnung der Primzahlen mit 8 Thread(s) ist korrekt.
		8. Berechnung: 4.991259 s. Die 8. Berechnung der Primzahlen mit 8 Thread(s) ist korrekt.
		9. Berechnung: 4.815531 s. Die 9. Berechnung der Primzahlen mit 8 Thread(s) ist korrekt.
		10. Berechnung: 4.998812 s. Die 10. Berechnung der Primzahlen mit 8 Thread(s) ist korrekt.
		11. Berechnung: 4.650913 s. Die 11. Berechnung der Primzahlen mit 8 Thread(s) ist korrekt.
		12. Berechnung: 4.738455 s. Die 12. Berechnung der Primzahlen mit 8 Thread(s) ist korrekt.
		13. Berechnung: 4.698007 s. Die 13. Berechnung der Primzahlen mit 8 Thread(s) ist korrekt.
		14. Berechnung: 4.864869 s. Die 14. Berechnung der Primzahlen mit 8 Thread(s) ist korrekt.
		15. Berechnung: 4.760100 s. Die 15. Berechnung der Primzahlen mit 8 Thread(s) ist korrekt.
		16. Berechnung: 4.787420 s. Die 16. Berechnung der Primzahlen mit 8 Thread(s) ist korrekt.
		17. Berechnung: 4.878634 s. Die 17. Berechnung der Primzahlen mit 8 Thread(s) ist korrekt.
		18. Berechnung: 4.632062 s. Die 18. Berechnung der Primzahlen mit 8 Thread(s) ist korrekt.
		19. Berechnung: 5.051289 s. Die 19. Berechnung der Primzahlen mit 8 Thread(s) ist korrekt.
		20. Berechnung: 5.007069 s. Die 20. Berechnung der Primzahlen mit 8 Thread(s) ist korrekt.
		21. Berechnung: 5.077193 s. Die 21. Berechnung der Primzahlen mit 8 Thread(s) ist korrekt.
		22. Berechnung: 5.048613 s. Die 22. Berechnung der Primzahlen mit 8 Thread(s) ist korrekt.
		23. Berechnung: 4.781963 s. Die 23. Berechnung der Primzahlen mit 8 Thread(s) ist korrekt.
		24. Berechnung: 4.721886 s. Die 24. Berechnung der Primzahlen mit 8 Thread(s) ist korrekt.
		25. Berechnung: 5.005279 s. Die 25. Berechnung der Primzahlen mit 8 Thread(s) ist korrekt.
		26. Berechnung: 4.871206 s. Die 26. Berechnung der Primzahlen mit 8 Thread(s) ist korrekt.
		27. Berechnung: 4.888103 s. Die 27. Berechnung der Primzahlen mit 8 Thread(s) ist korrekt.
		28. Berechnung: 4.814647 s. Die 28. Berechnung der Primzahlen mit 8 Thread(s) ist korrekt.
		29. Berechnung: 5.117752 s. Die 29. Berechnung der Primzahlen mit 8 Thread(s) ist korrekt.
		30. Berechnung: 4.692453 s. Die 30. Berechnung der Primzahlen mit 8 Thread(s) ist korrekt.
		31. Berechnung: 4.671151 s. Die 31. Berechnung der Primzahlen mit 8 Thread(s) ist korrekt.
		32. Berechnung: 4.824921 s. Die 32. Berechnung der Primzahlen mit 8 Thread(s) ist korrekt.
		33. Berechnung: 4.821982 s. Die 33. Berechnung der Primzahlen mit 8 Thread(s) ist korrekt.
		34. Berechnung: 4.677400 s. Die 34. Berechnung der Primzahlen mit 8 Thread(s) ist korrekt.
		35. Berechnung: 4.808237 s. Die 35. Berechnung der Primzahlen mit 8 Thread(s) ist korrekt.
		36. Berechnung: 5.635908 s. Die 36. Berechnung der Primzahlen mit 8 Thread(s) ist korrekt.
		37. Berechnung: 5.923852 s. Die 37. Berechnung der Primzahlen mit 8 Thread(s) ist korrekt.
		38. Berechnung: 5.691885 s. Die 38. Berechnung der Primzahlen mit 8 Thread(s) ist korrekt.
		39. Berechnung: 5.186875 s. Die 39. Berechnung der Primzahlen mit 8 Thread(s) ist korrekt.
		40. Berechnung: 4.973313 s. Die 40. Berechnung der Primzahlen mit 8 Thread(s) ist korrekt.
		41. Berechnung: 5.039516 s. Die 41. Berechnung der Primzahlen mit 8 Thread(s) ist korrekt.
		42. Berechnung: 5.006570 s. Die 42. Berechnung der Primzahlen mit 8 Thread(s) ist korrekt.
		43. Berechnung: 4.905001 s. Die 43. Berechnung der Primzahlen mit 8 Thread(s) ist korrekt.
		44. Berechnung: 4.721103 s. Die 44. Berechnung der Primzahlen mit 8 Thread(s) ist korrekt.
		45. Berechnung: 4.697060 s. Die 45. Berechnung der Primzahlen mit 8 Thread(s) ist korrekt.
		46. Berechnung: 4.620353 s. Die 46. Berechnung der Primzahlen mit 8 Thread(s) ist korrekt.
		47. Berechnung: 4.453923 s. Die 47. Berechnung der Primzahlen mit 8 Thread(s) ist korrekt.
		48. Berechnung: 4.879733 s. Die 48. Berechnung der Primzahlen mit 8 Thread(s) ist korrekt.
		49. Berechnung: 4.705286 s. Die 49. Berechnung der Primzahlen mit 8 Thread(s) ist korrekt.
		50. Berechnung: 4.794543 s. Die 50. Berechnung der Primzahlen mit 8 Thread(s) ist korrekt.
		Durchschnittliche Ausfuehrungszeit des Programmes bei 50 Durchlaeufen mit 8 Thread(s): 4.899454 s. Alle berechneten Primzahlen mit 8 Thread(s) sind korrekt.
	Berechnung mittels 9 Thread(s):
		1. Berechnung: 4.725667 s. Die 1. Berechnung der Primzahlen mit 9 Thread(s) ist korrekt.
		2. Berechnung: 4.810436 s. Die 2. Berechnung der Primzahlen mit 9 Thread(s) ist korrekt.
		3. Berechnung: 4.738002 s. Die 3. Berechnung der Primzahlen mit 9 Thread(s) ist korrekt.
		4. Berechnung: 4.759238 s. Die 4. Berechnung der Primzahlen mit 9 Thread(s) ist korrekt.
		5. Berechnung: 4.685040 s. Die 5. Berechnung der Primzahlen mit 9 Thread(s) ist korrekt.
		6. Berechnung: 4.636411 s. Die 6. Berechnung der Primzahlen mit 9 Thread(s) ist korrekt.
		7. Berechnung: 4.800089 s. Die 7. Berechnung der Primzahlen mit 9 Thread(s) ist korrekt.
		8. Berechnung: 4.731580 s. Die 8. Berechnung der Primzahlen mit 9 Thread(s) ist korrekt.
		9. Berechnung: 4.622401 s. Die 9. Berechnung der Primzahlen mit 9 Thread(s) ist korrekt.
		10. Berechnung: 4.567385 s. Die 10. Berechnung der Primzahlen mit 9 Thread(s) ist korrekt.
		11. Berechnung: 4.639553 s. Die 11. Berechnung der Primzahlen mit 9 Thread(s) ist korrekt.
		12. Berechnung: 4.543186 s. Die 12. Berechnung der Primzahlen mit 9 Thread(s) ist korrekt.
		13. Berechnung: 4.830372 s. Die 13. Berechnung der Primzahlen mit 9 Thread(s) ist korrekt.
		14. Berechnung: 4.697676 s. Die 14. Berechnung der Primzahlen mit 9 Thread(s) ist korrekt.
		15. Berechnung: 4.540830 s. Die 15. Berechnung der Primzahlen mit 9 Thread(s) ist korrekt.
		16. Berechnung: 4.847885 s. Die 16. Berechnung der Primzahlen mit 9 Thread(s) ist korrekt.
		17. Berechnung: 4.489819 s. Die 17. Berechnung der Primzahlen mit 9 Thread(s) ist korrekt.
		18. Berechnung: 4.814845 s. Die 18. Berechnung der Primzahlen mit 9 Thread(s) ist korrekt.
		19. Berechnung: 4.669335 s. Die 19. Berechnung der Primzahlen mit 9 Thread(s) ist korrekt.
		20. Berechnung: 4.792040 s. Die 20. Berechnung der Primzahlen mit 9 Thread(s) ist korrekt.
		21. Berechnung: 4.695460 s. Die 21. Berechnung der Primzahlen mit 9 Thread(s) ist korrekt.
		22. Berechnung: 4.530677 s. Die 22. Berechnung der Primzahlen mit 9 Thread(s) ist korrekt.
		23. Berechnung: 4.701290 s. Die 23. Berechnung der Primzahlen mit 9 Thread(s) ist korrekt.
		24. Berechnung: 4.758914 s. Die 24. Berechnung der Primzahlen mit 9 Thread(s) ist korrekt.
		25. Berechnung: 4.772174 s. Die 25. Berechnung der Primzahlen mit 9 Thread(s) ist korrekt.
		26. Berechnung: 4.687552 s. Die 26. Berechnung der Primzahlen mit 9 Thread(s) ist korrekt.
		27. Berechnung: 4.686054 s. Die 27. Berechnung der Primzahlen mit 9 Thread(s) ist korrekt.
		28. Berechnung: 4.737403 s. Die 28. Berechnung der Primzahlen mit 9 Thread(s) ist korrekt.
		29. Berechnung: 4.818061 s. Die 29. Berechnung der Primzahlen mit 9 Thread(s) ist korrekt.
		30. Berechnung: 4.828712 s. Die 30. Berechnung der Primzahlen mit 9 Thread(s) ist korrekt.
		31. Berechnung: 4.553323 s. Die 31. Berechnung der Primzahlen mit 9 Thread(s) ist korrekt.
		32. Berechnung: 4.724612 s. Die 32. Berechnung der Primzahlen mit 9 Thread(s) ist korrekt.
		33. Berechnung: 4.803541 s. Die 33. Berechnung der Primzahlen mit 9 Thread(s) ist korrekt.
		34. Berechnung: 4.631546 s. Die 34. Berechnung der Primzahlen mit 9 Thread(s) ist korrekt.
		35. Berechnung: 4.773256 s. Die 35. Berechnung der Primzahlen mit 9 Thread(s) ist korrekt.
		36. Berechnung: 4.739159 s. Die 36. Berechnung der Primzahlen mit 9 Thread(s) ist korrekt.
		37. Berechnung: 4.783088 s. Die 37. Berechnung der Primzahlen mit 9 Thread(s) ist korrekt.
		38. Berechnung: 4.605518 s. Die 38. Berechnung der Primzahlen mit 9 Thread(s) ist korrekt.
		39. Berechnung: 4.753035 s. Die 39. Berechnung der Primzahlen mit 9 Thread(s) ist korrekt.
		40. Berechnung: 4.805130 s. Die 40. Berechnung der Primzahlen mit 9 Thread(s) ist korrekt.
		41. Berechnung: 4.647173 s. Die 41. Berechnung der Primzahlen mit 9 Thread(s) ist korrekt.
		42. Berechnung: 4.566018 s. Die 42. Berechnung der Primzahlen mit 9 Thread(s) ist korrekt.
		43. Berechnung: 4.641523 s. Die 43. Berechnung der Primzahlen mit 9 Thread(s) ist korrekt.
		44. Berechnung: 4.727039 s. Die 44. Berechnung der Primzahlen mit 9 Thread(s) ist korrekt.
		45. Berechnung: 4.640015 s. Die 45. Berechnung der Primzahlen mit 9 Thread(s) ist korrekt.
		46. Berechnung: 4.765924 s. Die 46. Berechnung der Primzahlen mit 9 Thread(s) ist korrekt.
		47. Berechnung: 4.617028 s. Die 47. Berechnung der Primzahlen mit 9 Thread(s) ist korrekt.
		48. Berechnung: 4.542666 s. Die 48. Berechnung der Primzahlen mit 9 Thread(s) ist korrekt.
		49. Berechnung: 4.665848 s. Die 49. Berechnung der Primzahlen mit 9 Thread(s) ist korrekt.
		50. Berechnung: 4.821532 s. Die 50. Berechnung der Primzahlen mit 9 Thread(s) ist korrekt.
		Durchschnittliche Ausfuehrungszeit des Programmes bei 50 Durchlaeufen mit 9 Thread(s): 4.699301 s. Alle berechneten Primzahlen mit 9 Thread(s) sind korrekt.
	Berechnung mittels 10 Thread(s):
		1. Berechnung: 4.466991 s. Die 1. Berechnung der Primzahlen mit 10 Thread(s) ist korrekt.
		2. Berechnung: 4.589174 s. Die 2. Berechnung der Primzahlen mit 10 Thread(s) ist korrekt.
		3. Berechnung: 4.734385 s. Die 3. Berechnung der Primzahlen mit 10 Thread(s) ist korrekt.
		4. Berechnung: 4.455678 s. Die 4. Berechnung der Primzahlen mit 10 Thread(s) ist korrekt.
		5. Berechnung: 4.587541 s. Die 5. Berechnung der Primzahlen mit 10 Thread(s) ist korrekt.
		6. Berechnung: 4.389811 s. Die 6. Berechnung der Primzahlen mit 10 Thread(s) ist korrekt.
		7. Berechnung: 4.473751 s. Die 7. Berechnung der Primzahlen mit 10 Thread(s) ist korrekt.
		8. Berechnung: 4.657919 s. Die 8. Berechnung der Primzahlen mit 10 Thread(s) ist korrekt.
		9. Berechnung: 4.679675 s. Die 9. Berechnung der Primzahlen mit 10 Thread(s) ist korrekt.
		10. Berechnung: 4.466454 s. Die 10. Berechnung der Primzahlen mit 10 Thread(s) ist korrekt.
		11. Berechnung: 4.445308 s. Die 11. Berechnung der Primzahlen mit 10 Thread(s) ist korrekt.
		12. Berechnung: 4.593699 s. Die 12. Berechnung der Primzahlen mit 10 Thread(s) ist korrekt.
		13. Berechnung: 4.613015 s. Die 13. Berechnung der Primzahlen mit 10 Thread(s) ist korrekt.
		14. Berechnung: 4.382265 s. Die 14. Berechnung der Primzahlen mit 10 Thread(s) ist korrekt.
		15. Berechnung: 4.586384 s. Die 15. Berechnung der Primzahlen mit 10 Thread(s) ist korrekt.
		16. Berechnung: 4.572394 s. Die 16. Berechnung der Primzahlen mit 10 Thread(s) ist korrekt.
		17. Berechnung: 4.623772 s. Die 17. Berechnung der Primzahlen mit 10 Thread(s) ist korrekt.
		18. Berechnung: 4.520353 s. Die 18. Berechnung der Primzahlen mit 10 Thread(s) ist korrekt.
		19. Berechnung: 4.528908 s. Die 19. Berechnung der Primzahlen mit 10 Thread(s) ist korrekt.
		20. Berechnung: 4.376941 s. Die 20. Berechnung der Primzahlen mit 10 Thread(s) ist korrekt.
		21. Berechnung: 4.464294 s. Die 21. Berechnung der Primzahlen mit 10 Thread(s) ist korrekt.
		22. Berechnung: 4.757240 s. Die 22. Berechnung der Primzahlen mit 10 Thread(s) ist korrekt.
		23. Berechnung: 4.745099 s. Die 23. Berechnung der Primzahlen mit 10 Thread(s) ist korrekt.
		24. Berechnung: 4.768715 s. Die 24. Berechnung der Primzahlen mit 10 Thread(s) ist korrekt.
		25. Berechnung: 4.692130 s. Die 25. Berechnung der Primzahlen mit 10 Thread(s) ist korrekt.
		26. Berechnung: 4.827245 s. Die 26. Berechnung der Primzahlen mit 10 Thread(s) ist korrekt.
		27. Berechnung: 4.665312 s. Die 27. Berechnung der Primzahlen mit 10 Thread(s) ist korrekt.
		28. Berechnung: 4.614429 s. Die 28. Berechnung der Primzahlen mit 10 Thread(s) ist korrekt.
		29. Berechnung: 4.571320 s. Die 29. Berechnung der Primzahlen mit 10 Thread(s) ist korrekt.
		30. Berechnung: 4.375483 s. Die 30. Berechnung der Primzahlen mit 10 Thread(s) ist korrekt.
		31. Berechnung: 4.660754 s. Die 31. Berechnung der Primzahlen mit 10 Thread(s) ist korrekt.
		32. Berechnung: 4.879855 s. Die 32. Berechnung der Primzahlen mit 10 Thread(s) ist korrekt.
		33. Berechnung: 4.739475 s. Die 33. Berechnung der Primzahlen mit 10 Thread(s) ist korrekt.
		34. Berechnung: 4.565931 s. Die 34. Berechnung der Primzahlen mit 10 Thread(s) ist korrekt.
		35. Berechnung: 4.498655 s. Die 35. Berechnung der Primzahlen mit 10 Thread(s) ist korrekt.
		36. Berechnung: 4.457272 s. Die 36. Berechnung der Primzahlen mit 10 Thread(s) ist korrekt.
		37. Berechnung: 4.500378 s. Die 37. Berechnung der Primzahlen mit 10 Thread(s) ist korrekt.
		38. Berechnung: 4.477425 s. Die 38. Berechnung der Primzahlen mit 10 Thread(s) ist korrekt.
		39. Berechnung: 4.519335 s. Die 39. Berechnung der Primzahlen mit 10 Thread(s) ist korrekt.
		40. Berechnung: 4.664382 s. Die 40. Berechnung der Primzahlen mit 10 Thread(s) ist korrekt.
		41. Berechnung: 4.727563 s. Die 41. Berechnung der Primzahlen mit 10 Thread(s) ist korrekt.
		42. Berechnung: 4.514498 s. Die 42. Berechnung der Primzahlen mit 10 Thread(s) ist korrekt.
		43. Berechnung: 4.650219 s. Die 43. Berechnung der Primzahlen mit 10 Thread(s) ist korrekt.
		44. Berechnung: 4.603587 s. Die 44. Berechnung der Primzahlen mit 10 Thread(s) ist korrekt.
		45. Berechnung: 4.581685 s. Die 45. Berechnung der Primzahlen mit 10 Thread(s) ist korrekt.
		46. Berechnung: 4.528286 s. Die 46. Berechnung der Primzahlen mit 10 Thread(s) ist korrekt.
		47. Berechnung: 4.445630 s. Die 47. Berechnung der Primzahlen mit 10 Thread(s) ist korrekt.
		48. Berechnung: 4.517518 s. Die 48. Berechnung der Primzahlen mit 10 Thread(s) ist korrekt.
		49. Berechnung: 4.578859 s. Die 49. Berechnung der Primzahlen mit 10 Thread(s) ist korrekt.
		50. Berechnung: 4.528162 s. Die 50. Berechnung der Primzahlen mit 10 Thread(s) ist korrekt.
		Durchschnittliche Ausfuehrungszeit des Programmes bei 50 Durchlaeufen mit 10 Thread(s): 4.577303 s. Alle berechneten Primzahlen mit 10 Thread(s) sind korrekt.
	Berechnung mittels 12 Thread(s):
		1. Berechnung: 4.568804 s. Die 1. Berechnung der Primzahlen mit 12 Thread(s) ist korrekt.
		2. Berechnung: 4.584201 s. Die 2. Berechnung der Primzahlen mit 12 Thread(s) ist korrekt.
		3. Berechnung: 4.413852 s. Die 3. Berechnung der Primzahlen mit 12 Thread(s) ist korrekt.
		4. Berechnung: 4.302811 s. Die 4. Berechnung der Primzahlen mit 12 Thread(s) ist korrekt.
		5. Berechnung: 4.478716 s. Die 5. Berechnung der Primzahlen mit 12 Thread(s) ist korrekt.
		6. Berechnung: 4.514540 s. Die 6. Berechnung der Primzahlen mit 12 Thread(s) ist korrekt.
		7. Berechnung: 4.501116 s. Die 7. Berechnung der Primzahlen mit 12 Thread(s) ist korrekt.
		8. Berechnung: 4.440248 s. Die 8. Berechnung der Primzahlen mit 12 Thread(s) ist korrekt.
		9. Berechnung: 4.355807 s. Die 9. Berechnung der Primzahlen mit 12 Thread(s) ist korrekt.
		10. Berechnung: 4.530231 s. Die 10. Berechnung der Primzahlen mit 12 Thread(s) ist korrekt.
		11. Berechnung: 4.411172 s. Die 11. Berechnung der Primzahlen mit 12 Thread(s) ist korrekt.
		12. Berechnung: 4.545815 s. Die 12. Berechnung der Primzahlen mit 12 Thread(s) ist korrekt.
		13. Berechnung: 4.401855 s. Die 13. Berechnung der Primzahlen mit 12 Thread(s) ist korrekt.
		14. Berechnung: 4.314666 s. Die 14. Berechnung der Primzahlen mit 12 Thread(s) ist korrekt.
		15. Berechnung: 4.427054 s. Die 15. Berechnung der Primzahlen mit 12 Thread(s) ist korrekt.
		16. Berechnung: 4.532166 s. Die 16. Berechnung der Primzahlen mit 12 Thread(s) ist korrekt.
		17. Berechnung: 4.368634 s. Die 17. Berechnung der Primzahlen mit 12 Thread(s) ist korrekt.
		18. Berechnung: 4.431250 s. Die 18. Berechnung der Primzahlen mit 12 Thread(s) ist korrekt.
		19. Berechnung: 4.422363 s. Die 19. Berechnung der Primzahlen mit 12 Thread(s) ist korrekt.
		20. Berechnung: 4.554380 s. Die 20. Berechnung der Primzahlen mit 12 Thread(s) ist korrekt.
		21. Berechnung: 4.457880 s. Die 21. Berechnung der Primzahlen mit 12 Thread(s) ist korrekt.
		22. Berechnung: 4.392085 s. Die 22. Berechnung der Primzahlen mit 12 Thread(s) ist korrekt.
		23. Berechnung: 4.536580 s. Die 23. Berechnung der Primzahlen mit 12 Thread(s) ist korrekt.
		24. Berechnung: 4.356337 s. Die 24. Berechnung der Primzahlen mit 12 Thread(s) ist korrekt.
		25. Berechnung: 4.539405 s. Die 25. Berechnung der Primzahlen mit 12 Thread(s) ist korrekt.
		26. Berechnung: 4.452414 s. Die 26. Berechnung der Primzahlen mit 12 Thread(s) ist korrekt.
		27. Berechnung: 4.414308 s. Die 27. Berechnung der Primzahlen mit 12 Thread(s) ist korrekt.
		28. Berechnung: 4.601916 s. Die 28. Berechnung der Primzahlen mit 12 Thread(s) ist korrekt.
		29. Berechnung: 4.392149 s. Die 29. Berechnung der Primzahlen mit 12 Thread(s) ist korrekt.
		30. Berechnung: 4.446190 s. Die 30. Berechnung der Primzahlen mit 12 Thread(s) ist korrekt.
		31. Berechnung: 4.268158 s. Die 31. Berechnung der Primzahlen mit 12 Thread(s) ist korrekt.
		32. Berechnung: 4.552754 s. Die 32. Berechnung der Primzahlen mit 12 Thread(s) ist korrekt.
		33. Berechnung: 4.535019 s. Die 33. Berechnung der Primzahlen mit 12 Thread(s) ist korrekt.
		34. Berechnung: 4.445761 s. Die 34. Berechnung der Primzahlen mit 12 Thread(s) ist korrekt.
		35. Berechnung: 4.352673 s. Die 35. Berechnung der Primzahlen mit 12 Thread(s) ist korrekt.
		36. Berechnung: 4.466832 s. Die 36. Berechnung der Primzahlen mit 12 Thread(s) ist korrekt.
		37. Berechnung: 4.371313 s. Die 37. Berechnung der Primzahlen mit 12 Thread(s) ist korrekt.
		38. Berechnung: 4.471388 s. Die 38. Berechnung der Primzahlen mit 12 Thread(s) ist korrekt.
		39. Berechnung: 4.452948 s. Die 39. Berechnung der Primzahlen mit 12 Thread(s) ist korrekt.
		40. Berechnung: 4.423741 s. Die 40. Berechnung der Primzahlen mit 12 Thread(s) ist korrekt.
		41. Berechnung: 4.388872 s. Die 41. Berechnung der Primzahlen mit 12 Thread(s) ist korrekt.
		42. Berechnung: 4.371830 s. Die 42. Berechnung der Primzahlen mit 12 Thread(s) ist korrekt.
		43. Berechnung: 4.275122 s. Die 43. Berechnung der Primzahlen mit 12 Thread(s) ist korrekt.
		44. Berechnung: 4.440306 s. Die 44. Berechnung der Primzahlen mit 12 Thread(s) ist korrekt.
		45. Berechnung: 4.330893 s. Die 45. Berechnung der Primzahlen mit 12 Thread(s) ist korrekt.
		46. Berechnung: 4.646097 s. Die 46. Berechnung der Primzahlen mit 12 Thread(s) ist korrekt.
		47. Berechnung: 4.545404 s. Die 47. Berechnung der Primzahlen mit 12 Thread(s) ist korrekt.
		48. Berechnung: 4.504744 s. Die 48. Berechnung der Primzahlen mit 12 Thread(s) ist korrekt.
		49. Berechnung: 4.575104 s. Die 49. Berechnung der Primzahlen mit 12 Thread(s) ist korrekt.
		50. Berechnung: 4.384935 s. Die 50. Berechnung der Primzahlen mit 12 Thread(s) ist korrekt.
		Durchschnittliche Ausfuehrungszeit des Programmes bei 50 Durchlaeufen mit 12 Thread(s): 4.449857 s. Alle berechneten Primzahlen mit 12 Thread(s) sind korrekt.
	Berechnung mittels 14 Thread(s):
		1. Berechnung: 4.376740 s. Die 1. Berechnung der Primzahlen mit 14 Thread(s) ist korrekt.
		2. Berechnung: 4.386863 s. Die 2. Berechnung der Primzahlen mit 14 Thread(s) ist korrekt.
		3. Berechnung: 4.317363 s. Die 3. Berechnung der Primzahlen mit 14 Thread(s) ist korrekt.
		4. Berechnung: 4.391320 s. Die 4. Berechnung der Primzahlen mit 14 Thread(s) ist korrekt.
		5. Berechnung: 4.388451 s. Die 5. Berechnung der Primzahlen mit 14 Thread(s) ist korrekt.
		6. Berechnung: 4.289684 s. Die 6. Berechnung der Primzahlen mit 14 Thread(s) ist korrekt.
		7. Berechnung: 4.471365 s. Die 7. Berechnung der Primzahlen mit 14 Thread(s) ist korrekt.
		8. Berechnung: 4.226606 s. Die 8. Berechnung der Primzahlen mit 14 Thread(s) ist korrekt.
		9. Berechnung: 4.447759 s. Die 9. Berechnung der Primzahlen mit 14 Thread(s) ist korrekt.
		10. Berechnung: 4.448388 s. Die 10. Berechnung der Primzahlen mit 14 Thread(s) ist korrekt.
		11. Berechnung: 4.442824 s. Die 11. Berechnung der Primzahlen mit 14 Thread(s) ist korrekt.
		12. Berechnung: 4.287877 s. Die 12. Berechnung der Primzahlen mit 14 Thread(s) ist korrekt.
		13. Berechnung: 4.393358 s. Die 13. Berechnung der Primzahlen mit 14 Thread(s) ist korrekt.
		14. Berechnung: 4.504529 s. Die 14. Berechnung der Primzahlen mit 14 Thread(s) ist korrekt.
		15. Berechnung: 4.444056 s. Die 15. Berechnung der Primzahlen mit 14 Thread(s) ist korrekt.
		16. Berechnung: 4.323384 s. Die 16. Berechnung der Primzahlen mit 14 Thread(s) ist korrekt.
		17. Berechnung: 4.399472 s. Die 17. Berechnung der Primzahlen mit 14 Thread(s) ist korrekt.
		18. Berechnung: 4.313903 s. Die 18. Berechnung der Primzahlen mit 14 Thread(s) ist korrekt.
		19. Berechnung: 4.146003 s. Die 19. Berechnung der Primzahlen mit 14 Thread(s) ist korrekt.
		20. Berechnung: 4.517322 s. Die 20. Berechnung der Primzahlen mit 14 Thread(s) ist korrekt.
		21. Berechnung: 4.415625 s. Die 21. Berechnung der Primzahlen mit 14 Thread(s) ist korrekt.
		22. Berechnung: 4.588347 s. Die 22. Berechnung der Primzahlen mit 14 Thread(s) ist korrekt.
		23. Berechnung: 4.661211 s. Die 23. Berechnung der Primzahlen mit 14 Thread(s) ist korrekt.
		24. Berechnung: 4.257089 s. Die 24. Berechnung der Primzahlen mit 14 Thread(s) ist korrekt.
		25. Berechnung: 4.277271 s. Die 25. Berechnung der Primzahlen mit 14 Thread(s) ist korrekt.
		26. Berechnung: 4.322377 s. Die 26. Berechnung der Primzahlen mit 14 Thread(s) ist korrekt.
		27. Berechnung: 4.505515 s. Die 27. Berechnung der Primzahlen mit 14 Thread(s) ist korrekt.
		28. Berechnung: 4.318886 s. Die 28. Berechnung der Primzahlen mit 14 Thread(s) ist korrekt.
		29. Berechnung: 4.433132 s. Die 29. Berechnung der Primzahlen mit 14 Thread(s) ist korrekt.
		30. Berechnung: 4.441015 s. Die 30. Berechnung der Primzahlen mit 14 Thread(s) ist korrekt.
		31. Berechnung: 4.292772 s. Die 31. Berechnung der Primzahlen mit 14 Thread(s) ist korrekt.
		32. Berechnung: 4.305413 s. Die 32. Berechnung der Primzahlen mit 14 Thread(s) ist korrekt.
		33. Berechnung: 4.337781 s. Die 33. Berechnung der Primzahlen mit 14 Thread(s) ist korrekt.
		34. Berechnung: 4.492279 s. Die 34. Berechnung der Primzahlen mit 14 Thread(s) ist korrekt.
		35. Berechnung: 4.346904 s. Die 35. Berechnung der Primzahlen mit 14 Thread(s) ist korrekt.
		36. Berechnung: 4.470747 s. Die 36. Berechnung der Primzahlen mit 14 Thread(s) ist korrekt.
		37. Berechnung: 4.393237 s. Die 37. Berechnung der Primzahlen mit 14 Thread(s) ist korrekt.
		38. Berechnung: 4.325025 s. Die 38. Berechnung der Primzahlen mit 14 Thread(s) ist korrekt.
		39. Berechnung: 4.295694 s. Die 39. Berechnung der Primzahlen mit 14 Thread(s) ist korrekt.
		40. Berechnung: 4.402316 s. Die 40. Berechnung der Primzahlen mit 14 Thread(s) ist korrekt.
		41. Berechnung: 4.513764 s. Die 41. Berechnung der Primzahlen mit 14 Thread(s) ist korrekt.
		42. Berechnung: 4.323242 s. Die 42. Berechnung der Primzahlen mit 14 Thread(s) ist korrekt.
		43. Berechnung: 4.275537 s. Die 43. Berechnung der Primzahlen mit 14 Thread(s) ist korrekt.
		44. Berechnung: 4.232055 s. Die 44. Berechnung der Primzahlen mit 14 Thread(s) ist korrekt.
		45. Berechnung: 4.406411 s. Die 45. Berechnung der Primzahlen mit 14 Thread(s) ist korrekt.
		46. Berechnung: 4.425342 s. Die 46. Berechnung der Primzahlen mit 14 Thread(s) ist korrekt.
		47. Berechnung: 4.347542 s. Die 47. Berechnung der Primzahlen mit 14 Thread(s) ist korrekt.
		48. Berechnung: 4.357120 s. Die 48. Berechnung der Primzahlen mit 14 Thread(s) ist korrekt.
		49. Berechnung: 4.334917 s. Die 49. Berechnung der Primzahlen mit 14 Thread(s) ist korrekt.
		50. Berechnung: 4.326030 s. Die 50. Berechnung der Primzahlen mit 14 Thread(s) ist korrekt.
		Durchschnittliche Ausfuehrungszeit des Programmes bei 50 Durchlaeufen mit 14 Thread(s): 4.378837 s. Alle berechneten Primzahlen mit 14 Thread(s) sind korrekt.
	Berechnung mittels 16 Thread(s):
		1. Berechnung: 4.330565 s. Die 1. Berechnung der Primzahlen mit 16 Thread(s) ist korrekt.
		2. Berechnung: 4.178808 s. Die 2. Berechnung der Primzahlen mit 16 Thread(s) ist korrekt.
		3. Berechnung: 4.227736 s. Die 3. Berechnung der Primzahlen mit 16 Thread(s) ist korrekt.
		4. Berechnung: 4.228211 s. Die 4. Berechnung der Primzahlen mit 16 Thread(s) ist korrekt.
		5. Berechnung: 4.288179 s. Die 5. Berechnung der Primzahlen mit 16 Thread(s) ist korrekt.
		6. Berechnung: 4.381679 s. Die 6. Berechnung der Primzahlen mit 16 Thread(s) ist korrekt.
		7. Berechnung: 4.375687 s. Die 7. Berechnung der Primzahlen mit 16 Thread(s) ist korrekt.
		8. Berechnung: 4.258488 s. Die 8. Berechnung der Primzahlen mit 16 Thread(s) ist korrekt.
		9. Berechnung: 4.332517 s. Die 9. Berechnung der Primzahlen mit 16 Thread(s) ist korrekt.
		10. Berechnung: 4.169758 s. Die 10. Berechnung der Primzahlen mit 16 Thread(s) ist korrekt.
		11. Berechnung: 4.390338 s. Die 11. Berechnung der Primzahlen mit 16 Thread(s) ist korrekt.
		12. Berechnung: 4.288332 s. Die 12. Berechnung der Primzahlen mit 16 Thread(s) ist korrekt.
		13. Berechnung: 4.302684 s. Die 13. Berechnung der Primzahlen mit 16 Thread(s) ist korrekt.
		14. Berechnung: 4.377057 s. Die 14. Berechnung der Primzahlen mit 16 Thread(s) ist korrekt.
		15. Berechnung: 4.331524 s. Die 15. Berechnung der Primzahlen mit 16 Thread(s) ist korrekt.
		16. Berechnung: 4.132149 s. Die 16. Berechnung der Primzahlen mit 16 Thread(s) ist korrekt.
		17. Berechnung: 4.271902 s. Die 17. Berechnung der Primzahlen mit 16 Thread(s) ist korrekt.
		18. Berechnung: 4.449552 s. Die 18. Berechnung der Primzahlen mit 16 Thread(s) ist korrekt.
		19. Berechnung: 4.312317 s. Die 19. Berechnung der Primzahlen mit 16 Thread(s) ist korrekt.
		20. Berechnung: 4.284980 s. Die 20. Berechnung der Primzahlen mit 16 Thread(s) ist korrekt.
		21. Berechnung: 4.191203 s. Die 21. Berechnung der Primzahlen mit 16 Thread(s) ist korrekt.
		22. Berechnung: 4.285339 s. Die 22. Berechnung der Primzahlen mit 16 Thread(s) ist korrekt.
		23. Berechnung: 4.271826 s. Die 23. Berechnung der Primzahlen mit 16 Thread(s) ist korrekt.
		24. Berechnung: 4.415017 s. Die 24. Berechnung der Primzahlen mit 16 Thread(s) ist korrekt.
		25. Berechnung: 4.349866 s. Die 25. Berechnung der Primzahlen mit 16 Thread(s) ist korrekt.
		26. Berechnung: 4.228190 s. Die 26. Berechnung der Primzahlen mit 16 Thread(s) ist korrekt.
		27. Berechnung: 4.217687 s. Die 27. Berechnung der Primzahlen mit 16 Thread(s) ist korrekt.
		28. Berechnung: 4.365890 s. Die 28. Berechnung der Primzahlen mit 16 Thread(s) ist korrekt.
		29. Berechnung: 4.354079 s. Die 29. Berechnung der Primzahlen mit 16 Thread(s) ist korrekt.
		30. Berechnung: 4.396879 s. Die 30. Berechnung der Primzahlen mit 16 Thread(s) ist korrekt.
		31. Berechnung: 4.237305 s. Die 31. Berechnung der Primzahlen mit 16 Thread(s) ist korrekt.
		32. Berechnung: 4.225034 s. Die 32. Berechnung der Primzahlen mit 16 Thread(s) ist korrekt.
		33. Berechnung: 4.316914 s. Die 33. Berechnung der Primzahlen mit 16 Thread(s) ist korrekt.
		34. Berechnung: 4.254844 s. Die 34. Berechnung der Primzahlen mit 16 Thread(s) ist korrekt.
		35. Berechnung: 4.328798 s. Die 35. Berechnung der Primzahlen mit 16 Thread(s) ist korrekt.
		36. Berechnung: 4.373439 s. Die 36. Berechnung der Primzahlen mit 16 Thread(s) ist korrekt.
		37. Berechnung: 4.302753 s. Die 37. Berechnung der Primzahlen mit 16 Thread(s) ist korrekt.
		38. Berechnung: 4.213492 s. Die 38. Berechnung der Primzahlen mit 16 Thread(s) ist korrekt.
		39. Berechnung: 4.371727 s. Die 39. Berechnung der Primzahlen mit 16 Thread(s) ist korrekt.
		40. Berechnung: 4.361949 s. Die 40. Berechnung der Primzahlen mit 16 Thread(s) ist korrekt.
		41. Berechnung: 4.323107 s. Die 41. Berechnung der Primzahlen mit 16 Thread(s) ist korrekt.
		42. Berechnung: 4.239810 s. Die 42. Berechnung der Primzahlen mit 16 Thread(s) ist korrekt.
		43. Berechnung: 4.269611 s. Die 43. Berechnung der Primzahlen mit 16 Thread(s) ist korrekt.
		44. Berechnung: 4.104824 s. Die 44. Berechnung der Primzahlen mit 16 Thread(s) ist korrekt.
		45. Berechnung: 4.299460 s. Die 45. Berechnung der Primzahlen mit 16 Thread(s) ist korrekt.
		46. Berechnung: 4.412127 s. Die 46. Berechnung der Primzahlen mit 16 Thread(s) ist korrekt.
		47. Berechnung: 4.250533 s. Die 47. Berechnung der Primzahlen mit 16 Thread(s) ist korrekt.
		48. Berechnung: 4.337385 s. Die 48. Berechnung der Primzahlen mit 16 Thread(s) ist korrekt.
		49. Berechnung: 4.135508 s. Die 49. Berechnung der Primzahlen mit 16 Thread(s) ist korrekt.
		50. Berechnung: 4.383085 s. Die 50. Berechnung der Primzahlen mit 16 Thread(s) ist korrekt.
		Durchschnittliche Ausfuehrungszeit des Programmes bei 50 Durchlaeufen mit 16 Thread(s): 4.294603 s. Alle berechneten Primzahlen mit 16 Thread(s) sind korrekt.
	Berechnung mittels 18 Thread(s):
		1. Berechnung: 5.094862 s. Die 1. Berechnung der Primzahlen mit 18 Thread(s) ist korrekt.
		2. Berechnung: 5.137587 s. Die 2. Berechnung der Primzahlen mit 18 Thread(s) ist korrekt.
		3. Berechnung: 5.014961 s. Die 3. Berechnung der Primzahlen mit 18 Thread(s) ist korrekt.
		4. Berechnung: 5.235912 s. Die 4. Berechnung der Primzahlen mit 18 Thread(s) ist korrekt.
		5. Berechnung: 5.351149 s. Die 5. Berechnung der Primzahlen mit 18 Thread(s) ist korrekt.
		6. Berechnung: 4.944385 s. Die 6. Berechnung der Primzahlen mit 18 Thread(s) ist korrekt.
		7. Berechnung: 5.354008 s. Die 7. Berechnung der Primzahlen mit 18 Thread(s) ist korrekt.
		8. Berechnung: 4.346212 s. Die 8. Berechnung der Primzahlen mit 18 Thread(s) ist korrekt.
		9. Berechnung: 4.798325 s. Die 9. Berechnung der Primzahlen mit 18 Thread(s) ist korrekt.
		10. Berechnung: 4.951819 s. Die 10. Berechnung der Primzahlen mit 18 Thread(s) ist korrekt.
		11. Berechnung: 4.385004 s. Die 11. Berechnung der Primzahlen mit 18 Thread(s) ist korrekt.
		12. Berechnung: 4.367262 s. Die 12. Berechnung der Primzahlen mit 18 Thread(s) ist korrekt.
		13. Berechnung: 4.200785 s. Die 13. Berechnung der Primzahlen mit 18 Thread(s) ist korrekt.
		14. Berechnung: 4.263878 s. Die 14. Berechnung der Primzahlen mit 18 Thread(s) ist korrekt.
		15. Berechnung: 4.205330 s. Die 15. Berechnung der Primzahlen mit 18 Thread(s) ist korrekt.
		16. Berechnung: 4.173984 s. Die 16. Berechnung der Primzahlen mit 18 Thread(s) ist korrekt.
		17. Berechnung: 4.193629 s. Die 17. Berechnung der Primzahlen mit 18 Thread(s) ist korrekt.
		18. Berechnung: 4.308546 s. Die 18. Berechnung der Primzahlen mit 18 Thread(s) ist korrekt.
		19. Berechnung: 4.432297 s. Die 19. Berechnung der Primzahlen mit 18 Thread(s) ist korrekt.
		20. Berechnung: 4.417051 s. Die 20. Berechnung der Primzahlen mit 18 Thread(s) ist korrekt.
		21. Berechnung: 4.250822 s. Die 21. Berechnung der Primzahlen mit 18 Thread(s) ist korrekt.
		22. Berechnung: 4.183083 s. Die 22. Berechnung der Primzahlen mit 18 Thread(s) ist korrekt.
		23. Berechnung: 4.239268 s. Die 23. Berechnung der Primzahlen mit 18 Thread(s) ist korrekt.
		24. Berechnung: 4.295270 s. Die 24. Berechnung der Primzahlen mit 18 Thread(s) ist korrekt.
		25. Berechnung: 4.310075 s. Die 25. Berechnung der Primzahlen mit 18 Thread(s) ist korrekt.
		26. Berechnung: 4.282811 s. Die 26. Berechnung der Primzahlen mit 18 Thread(s) ist korrekt.
		27. Berechnung: 4.134572 s. Die 27. Berechnung der Primzahlen mit 18 Thread(s) ist korrekt.
		28. Berechnung: 4.374087 s. Die 28. Berechnung der Primzahlen mit 18 Thread(s) ist korrekt.
		29. Berechnung: 4.238771 s. Die 29. Berechnung der Primzahlen mit 18 Thread(s) ist korrekt.
		30. Berechnung: 4.284436 s. Die 30. Berechnung der Primzahlen mit 18 Thread(s) ist korrekt.
		31. Berechnung: 4.386200 s. Die 31. Berechnung der Primzahlen mit 18 Thread(s) ist korrekt.
		32. Berechnung: 4.187987 s. Die 32. Berechnung der Primzahlen mit 18 Thread(s) ist korrekt.
		33. Berechnung: 4.383641 s. Die 33. Berechnung der Primzahlen mit 18 Thread(s) ist korrekt.
		34. Berechnung: 4.218811 s. Die 34. Berechnung der Primzahlen mit 18 Thread(s) ist korrekt.
		35. Berechnung: 4.400612 s. Die 35. Berechnung der Primzahlen mit 18 Thread(s) ist korrekt.
		36. Berechnung: 4.258970 s. Die 36. Berechnung der Primzahlen mit 18 Thread(s) ist korrekt.
		37. Berechnung: 4.182665 s. Die 37. Berechnung der Primzahlen mit 18 Thread(s) ist korrekt.
		38. Berechnung: 4.151721 s. Die 38. Berechnung der Primzahlen mit 18 Thread(s) ist korrekt.
		39. Berechnung: 4.260882 s. Die 39. Berechnung der Primzahlen mit 18 Thread(s) ist korrekt.
		40. Berechnung: 4.348129 s. Die 40. Berechnung der Primzahlen mit 18 Thread(s) ist korrekt.
		41. Berechnung: 4.329332 s. Die 41. Berechnung der Primzahlen mit 18 Thread(s) ist korrekt.
		42. Berechnung: 4.372342 s. Die 42. Berechnung der Primzahlen mit 18 Thread(s) ist korrekt.
		43. Berechnung: 4.234846 s. Die 43. Berechnung der Primzahlen mit 18 Thread(s) ist korrekt.
		44. Berechnung: 4.323148 s. Die 44. Berechnung der Primzahlen mit 18 Thread(s) ist korrekt.
		45. Berechnung: 4.332558 s. Die 45. Berechnung der Primzahlen mit 18 Thread(s) ist korrekt.
		46. Berechnung: 4.315585 s. Die 46. Berechnung der Primzahlen mit 18 Thread(s) ist korrekt.
		47. Berechnung: 4.281499 s. Die 47. Berechnung der Primzahlen mit 18 Thread(s) ist korrekt.
		48. Berechnung: 4.258584 s. Die 48. Berechnung der Primzahlen mit 18 Thread(s) ist korrekt.
		49. Berechnung: 4.142956 s. Die 49. Berechnung der Primzahlen mit 18 Thread(s) ist korrekt.
		50. Berechnung: 4.290148 s. Die 50. Berechnung der Primzahlen mit 18 Thread(s) ist korrekt.
		Durchschnittliche Ausfuehrungszeit des Programmes bei 50 Durchlaeufen mit 18 Thread(s): 4.428616 s. Alle berechneten Primzahlen mit 18 Thread(s) sind korrekt.
	Berechnung mittels 20 Thread(s):
		1. Berechnung: 4.214776 s. Die 1. Berechnung der Primzahlen mit 20 Thread(s) ist korrekt.
		2. Berechnung: 4.244204 s. Die 2. Berechnung der Primzahlen mit 20 Thread(s) ist korrekt.
		3. Berechnung: 4.154090 s. Die 3. Berechnung der Primzahlen mit 20 Thread(s) ist korrekt.
		4. Berechnung: 4.155187 s. Die 4. Berechnung der Primzahlen mit 20 Thread(s) ist korrekt.
		5. Berechnung: 4.247520 s. Die 5. Berechnung der Primzahlen mit 20 Thread(s) ist korrekt.
		6. Berechnung: 4.164677 s. Die 6. Berechnung der Primzahlen mit 20 Thread(s) ist korrekt.
		7. Berechnung: 4.224466 s. Die 7. Berechnung der Primzahlen mit 20 Thread(s) ist korrekt.
		8. Berechnung: 4.209277 s. Die 8. Berechnung der Primzahlen mit 20 Thread(s) ist korrekt.
		9. Berechnung: 4.085108 s. Die 9. Berechnung der Primzahlen mit 20 Thread(s) ist korrekt.
		10. Berechnung: 4.245008 s. Die 10. Berechnung der Primzahlen mit 20 Thread(s) ist korrekt.
		11. Berechnung: 4.261972 s. Die 11. Berechnung der Primzahlen mit 20 Thread(s) ist korrekt.
		12. Berechnung: 4.238144 s. Die 12. Berechnung der Primzahlen mit 20 Thread(s) ist korrekt.
		13. Berechnung: 4.241383 s. Die 13. Berechnung der Primzahlen mit 20 Thread(s) ist korrekt.
		14. Berechnung: 4.111114 s. Die 14. Berechnung der Primzahlen mit 20 Thread(s) ist korrekt.
		15. Berechnung: 4.217105 s. Die 15. Berechnung der Primzahlen mit 20 Thread(s) ist korrekt.
		16. Berechnung: 4.184293 s. Die 16. Berechnung der Primzahlen mit 20 Thread(s) ist korrekt.
		17. Berechnung: 4.216632 s. Die 17. Berechnung der Primzahlen mit 20 Thread(s) ist korrekt.
		18. Berechnung: 4.182002 s. Die 18. Berechnung der Primzahlen mit 20 Thread(s) ist korrekt.
		19. Berechnung: 4.150067 s. Die 19. Berechnung der Primzahlen mit 20 Thread(s) ist korrekt.
		20. Berechnung: 4.228050 s. Die 20. Berechnung der Primzahlen mit 20 Thread(s) ist korrekt.
		21. Berechnung: 4.300362 s. Die 21. Berechnung der Primzahlen mit 20 Thread(s) ist korrekt.
		22. Berechnung: 4.291964 s. Die 22. Berechnung der Primzahlen mit 20 Thread(s) ist korrekt.
		23. Berechnung: 4.234935 s. Die 23. Berechnung der Primzahlen mit 20 Thread(s) ist korrekt.
		24. Berechnung: 4.091003 s. Die 24. Berechnung der Primzahlen mit 20 Thread(s) ist korrekt.
		25. Berechnung: 4.299236 s. Die 25. Berechnung der Primzahlen mit 20 Thread(s) ist korrekt.
		26. Berechnung: 4.210948 s. Die 26. Berechnung der Primzahlen mit 20 Thread(s) ist korrekt.
		27. Berechnung: 4.254740 s. Die 27. Berechnung der Primzahlen mit 20 Thread(s) ist korrekt.
		28. Berechnung: 4.253961 s. Die 28. Berechnung der Primzahlen mit 20 Thread(s) ist korrekt.
		29. Berechnung: 4.128930 s. Die 29. Berechnung der Primzahlen mit 20 Thread(s) ist korrekt.
		30. Berechnung: 4.113350 s. Die 30. Berechnung der Primzahlen mit 20 Thread(s) ist korrekt.
		31. Berechnung: 4.225890 s. Die 31. Berechnung der Primzahlen mit 20 Thread(s) ist korrekt.
		32. Berechnung: 4.205623 s. Die 32. Berechnung der Primzahlen mit 20 Thread(s) ist korrekt.
		33. Berechnung: 4.180259 s. Die 33. Berechnung der Primzahlen mit 20 Thread(s) ist korrekt.
		34. Berechnung: 4.106833 s. Die 34. Berechnung der Primzahlen mit 20 Thread(s) ist korrekt.
		35. Berechnung: 4.235902 s. Die 35. Berechnung der Primzahlen mit 20 Thread(s) ist korrekt.
		36. Berechnung: 4.232733 s. Die 36. Berechnung der Primzahlen mit 20 Thread(s) ist korrekt.
		37. Berechnung: 4.180780 s. Die 37. Berechnung der Primzahlen mit 20 Thread(s) ist korrekt.
		38. Berechnung: 4.155632 s. Die 38. Berechnung der Primzahlen mit 20 Thread(s) ist korrekt.
		39. Berechnung: 4.107132 s. Die 39. Berechnung der Primzahlen mit 20 Thread(s) ist korrekt.
		40. Berechnung: 4.240700 s. Die 40. Berechnung der Primzahlen mit 20 Thread(s) ist korrekt.
		41. Berechnung: 4.205560 s. Die 41. Berechnung der Primzahlen mit 20 Thread(s) ist korrekt.
		42. Berechnung: 4.278911 s. Die 42. Berechnung der Primzahlen mit 20 Thread(s) ist korrekt.
		43. Berechnung: 4.268607 s. Die 43. Berechnung der Primzahlen mit 20 Thread(s) ist korrekt.
		44. Berechnung: 4.268970 s. Die 44. Berechnung der Primzahlen mit 20 Thread(s) ist korrekt.
		45. Berechnung: 4.142317 s. Die 45. Berechnung der Primzahlen mit 20 Thread(s) ist korrekt.
		46. Berechnung: 4.178384 s. Die 46. Berechnung der Primzahlen mit 20 Thread(s) ist korrekt.
		47. Berechnung: 4.244221 s. Die 47. Berechnung der Primzahlen mit 20 Thread(s) ist korrekt.
		48. Berechnung: 4.238964 s. Die 48. Berechnung der Primzahlen mit 20 Thread(s) ist korrekt.
		49. Berechnung: 4.190100 s. Die 49. Berechnung der Primzahlen mit 20 Thread(s) ist korrekt.
		50. Berechnung: 4.146502 s. Die 50. Berechnung der Primzahlen mit 20 Thread(s) ist korrekt.
		Durchschnittliche Ausfuehrungszeit des Programmes bei 50 Durchlaeufen mit 20 Thread(s): 4.203770 s. Alle berechneten Primzahlen mit 20 Thread(s) sind korrekt.
	Berechnung mittels 22 Thread(s):
		1. Berechnung: 4.181188 s. Die 1. Berechnung der Primzahlen mit 22 Thread(s) ist korrekt.
		2. Berechnung: 4.156297 s. Die 2. Berechnung der Primzahlen mit 22 Thread(s) ist korrekt.
		3. Berechnung: 4.252033 s. Die 3. Berechnung der Primzahlen mit 22 Thread(s) ist korrekt.
		4. Berechnung: 4.154639 s. Die 4. Berechnung der Primzahlen mit 22 Thread(s) ist korrekt.
		5. Berechnung: 4.097755 s. Die 5. Berechnung der Primzahlen mit 22 Thread(s) ist korrekt.
		6. Berechnung: 4.208467 s. Die 6. Berechnung der Primzahlen mit 22 Thread(s) ist korrekt.
		7. Berechnung: 4.253670 s. Die 7. Berechnung der Primzahlen mit 22 Thread(s) ist korrekt.
		8. Berechnung: 4.204948 s. Die 8. Berechnung der Primzahlen mit 22 Thread(s) ist korrekt.
		9. Berechnung: 4.189871 s. Die 9. Berechnung der Primzahlen mit 22 Thread(s) ist korrekt.
		10. Berechnung: 4.151916 s. Die 10. Berechnung der Primzahlen mit 22 Thread(s) ist korrekt.
		11. Berechnung: 4.243406 s. Die 11. Berechnung der Primzahlen mit 22 Thread(s) ist korrekt.
		12. Berechnung: 4.202581 s. Die 12. Berechnung der Primzahlen mit 22 Thread(s) ist korrekt.
		13. Berechnung: 4.212789 s. Die 13. Berechnung der Primzahlen mit 22 Thread(s) ist korrekt.
		14. Berechnung: 4.265051 s. Die 14. Berechnung der Primzahlen mit 22 Thread(s) ist korrekt.
		15. Berechnung: 4.137492 s. Die 15. Berechnung der Primzahlen mit 22 Thread(s) ist korrekt.
		16. Berechnung: 4.255373 s. Die 16. Berechnung der Primzahlen mit 22 Thread(s) ist korrekt.
		17. Berechnung: 4.270560 s. Die 17. Berechnung der Primzahlen mit 22 Thread(s) ist korrekt.
		18. Berechnung: 4.355558 s. Die 18. Berechnung der Primzahlen mit 22 Thread(s) ist korrekt.
		19. Berechnung: 4.170462 s. Die 19. Berechnung der Primzahlen mit 22 Thread(s) ist korrekt.
		20. Berechnung: 4.197159 s. Die 20. Berechnung der Primzahlen mit 22 Thread(s) ist korrekt.
		21. Berechnung: 4.156430 s. Die 21. Berechnung der Primzahlen mit 22 Thread(s) ist korrekt.
		22. Berechnung: 4.241937 s. Die 22. Berechnung der Primzahlen mit 22 Thread(s) ist korrekt.
		23. Berechnung: 4.163355 s. Die 23. Berechnung der Primzahlen mit 22 Thread(s) ist korrekt.
		24. Berechnung: 4.177181 s. Die 24. Berechnung der Primzahlen mit 22 Thread(s) ist korrekt.
		25. Berechnung: 4.097569 s. Die 25. Berechnung der Primzahlen mit 22 Thread(s) ist korrekt.
		26. Berechnung: 4.157403 s. Die 26. Berechnung der Primzahlen mit 22 Thread(s) ist korrekt.
		27. Berechnung: 4.171315 s. Die 27. Berechnung der Primzahlen mit 22 Thread(s) ist korrekt.
		28. Berechnung: 4.300578 s. Die 28. Berechnung der Primzahlen mit 22 Thread(s) ist korrekt.
		29. Berechnung: 4.265124 s. Die 29. Berechnung der Primzahlen mit 22 Thread(s) ist korrekt.
		30. Berechnung: 4.134636 s. Die 30. Berechnung der Primzahlen mit 22 Thread(s) ist korrekt.
		31. Berechnung: 4.162874 s. Die 31. Berechnung der Primzahlen mit 22 Thread(s) ist korrekt.
		32. Berechnung: 4.230906 s. Die 32. Berechnung der Primzahlen mit 22 Thread(s) ist korrekt.
		33. Berechnung: 4.251451 s. Die 33. Berechnung der Primzahlen mit 22 Thread(s) ist korrekt.
		34. Berechnung: 4.207238 s. Die 34. Berechnung der Primzahlen mit 22 Thread(s) ist korrekt.
		35. Berechnung: 4.095979 s. Die 35. Berechnung der Primzahlen mit 22 Thread(s) ist korrekt.
		36. Berechnung: 4.276665 s. Die 36. Berechnung der Primzahlen mit 22 Thread(s) ist korrekt.
		37. Berechnung: 4.213333 s. Die 37. Berechnung der Primzahlen mit 22 Thread(s) ist korrekt.
		38. Berechnung: 4.245060 s. Die 38. Berechnung der Primzahlen mit 22 Thread(s) ist korrekt.
		39. Berechnung: 4.246298 s. Die 39. Berechnung der Primzahlen mit 22 Thread(s) ist korrekt.
		40. Berechnung: 4.075002 s. Die 40. Berechnung der Primzahlen mit 22 Thread(s) ist korrekt.
		41. Berechnung: 4.233237 s. Die 41. Berechnung der Primzahlen mit 22 Thread(s) ist korrekt.
		42. Berechnung: 4.187193 s. Die 42. Berechnung der Primzahlen mit 22 Thread(s) ist korrekt.
		43. Berechnung: 4.198534 s. Die 43. Berechnung der Primzahlen mit 22 Thread(s) ist korrekt.
		44. Berechnung: 4.184617 s. Die 44. Berechnung der Primzahlen mit 22 Thread(s) ist korrekt.
		45. Berechnung: 4.107808 s. Die 45. Berechnung der Primzahlen mit 22 Thread(s) ist korrekt.
		46. Berechnung: 4.298953 s. Die 46. Berechnung der Primzahlen mit 22 Thread(s) ist korrekt.
		47. Berechnung: 4.187978 s. Die 47. Berechnung der Primzahlen mit 22 Thread(s) ist korrekt.
		48. Berechnung: 4.180632 s. Die 48. Berechnung der Primzahlen mit 22 Thread(s) ist korrekt.
		49. Berechnung: 4.236595 s. Die 49. Berechnung der Primzahlen mit 22 Thread(s) ist korrekt.
		50. Berechnung: 4.137808 s. Die 50. Berechnung der Primzahlen mit 22 Thread(s) ist korrekt.
		Durchschnittliche Ausfuehrungszeit des Programmes bei 50 Durchlaeufen mit 22 Thread(s): 4.199698 s. Alle berechneten Primzahlen mit 22 Thread(s) sind korrekt.
	Berechnung mittels 24 Thread(s):
		1. Berechnung: 4.213239 s. Die 1. Berechnung der Primzahlen mit 24 Thread(s) ist korrekt.
		2. Berechnung: 4.189486 s. Die 2. Berechnung der Primzahlen mit 24 Thread(s) ist korrekt.
		3. Berechnung: 4.211586 s. Die 3. Berechnung der Primzahlen mit 24 Thread(s) ist korrekt.
		4. Berechnung: 4.164842 s. Die 4. Berechnung der Primzahlen mit 24 Thread(s) ist korrekt.
		5. Berechnung: 4.095044 s. Die 5. Berechnung der Primzahlen mit 24 Thread(s) ist korrekt.
		6. Berechnung: 4.155214 s. Die 6. Berechnung der Primzahlen mit 24 Thread(s) ist korrekt.
		7. Berechnung: 4.344955 s. Die 7. Berechnung der Primzahlen mit 24 Thread(s) ist korrekt.
		8. Berechnung: 4.189039 s. Die 8. Berechnung der Primzahlen mit 24 Thread(s) ist korrekt.
		9. Berechnung: 4.158305 s. Die 9. Berechnung der Primzahlen mit 24 Thread(s) ist korrekt.
		10. Berechnung: 4.103049 s. Die 10. Berechnung der Primzahlen mit 24 Thread(s) ist korrekt.
		11. Berechnung: 4.244325 s. Die 11. Berechnung der Primzahlen mit 24 Thread(s) ist korrekt.
		12. Berechnung: 4.172088 s. Die 12. Berechnung der Primzahlen mit 24 Thread(s) ist korrekt.
		13. Berechnung: 4.209072 s. Die 13. Berechnung der Primzahlen mit 24 Thread(s) ist korrekt.
		14. Berechnung: 4.156090 s. Die 14. Berechnung der Primzahlen mit 24 Thread(s) ist korrekt.
		15. Berechnung: 4.082843 s. Die 15. Berechnung der Primzahlen mit 24 Thread(s) ist korrekt.
		16. Berechnung: 4.175865 s. Die 16. Berechnung der Primzahlen mit 24 Thread(s) ist korrekt.
		17. Berechnung: 4.172455 s. Die 17. Berechnung der Primzahlen mit 24 Thread(s) ist korrekt.
		18. Berechnung: 4.195037 s. Die 18. Berechnung der Primzahlen mit 24 Thread(s) ist korrekt.
		19. Berechnung: 4.213890 s. Die 19. Berechnung der Primzahlen mit 24 Thread(s) ist korrekt.
		20. Berechnung: 4.061310 s. Die 20. Berechnung der Primzahlen mit 24 Thread(s) ist korrekt.
		21. Berechnung: 4.179078 s. Die 21. Berechnung der Primzahlen mit 24 Thread(s) ist korrekt.
		22. Berechnung: 4.213708 s. Die 22. Berechnung der Primzahlen mit 24 Thread(s) ist korrekt.
		23. Berechnung: 4.199997 s. Die 23. Berechnung der Primzahlen mit 24 Thread(s) ist korrekt.
		24. Berechnung: 4.220257 s. Die 24. Berechnung der Primzahlen mit 24 Thread(s) ist korrekt.
		25. Berechnung: 4.070204 s. Die 25. Berechnung der Primzahlen mit 24 Thread(s) ist korrekt.
		26. Berechnung: 4.185388 s. Die 26. Berechnung der Primzahlen mit 24 Thread(s) ist korrekt.
		27. Berechnung: 4.286312 s. Die 27. Berechnung der Primzahlen mit 24 Thread(s) ist korrekt.
		28. Berechnung: 4.232425 s. Die 28. Berechnung der Primzahlen mit 24 Thread(s) ist korrekt.
		29. Berechnung: 4.194623 s. Die 29. Berechnung der Primzahlen mit 24 Thread(s) ist korrekt.
		30. Berechnung: 4.073997 s. Die 30. Berechnung der Primzahlen mit 24 Thread(s) ist korrekt.
		31. Berechnung: 4.178158 s. Die 31. Berechnung der Primzahlen mit 24 Thread(s) ist korrekt.
		32. Berechnung: 4.230475 s. Die 32. Berechnung der Primzahlen mit 24 Thread(s) ist korrekt.
		33. Berechnung: 4.262665 s. Die 33. Berechnung der Primzahlen mit 24 Thread(s) ist korrekt.
		34. Berechnung: 4.205294 s. Die 34. Berechnung der Primzahlen mit 24 Thread(s) ist korrekt.
		35. Berechnung: 4.166329 s. Die 35. Berechnung der Primzahlen mit 24 Thread(s) ist korrekt.
		36. Berechnung: 4.271995 s. Die 36. Berechnung der Primzahlen mit 24 Thread(s) ist korrekt.
		37. Berechnung: 4.191951 s. Die 37. Berechnung der Primzahlen mit 24 Thread(s) ist korrekt.
		38. Berechnung: 4.312768 s. Die 38. Berechnung der Primzahlen mit 24 Thread(s) ist korrekt.
		39. Berechnung: 4.222947 s. Die 39. Berechnung der Primzahlen mit 24 Thread(s) ist korrekt.
		40. Berechnung: 4.115904 s. Die 40. Berechnung der Primzahlen mit 24 Thread(s) ist korrekt.
		41. Berechnung: 4.235366 s. Die 41. Berechnung der Primzahlen mit 24 Thread(s) ist korrekt.
		42. Berechnung: 4.163734 s. Die 42. Berechnung der Primzahlen mit 24 Thread(s) ist korrekt.
		43. Berechnung: 4.215311 s. Die 43. Berechnung der Primzahlen mit 24 Thread(s) ist korrekt.
		44. Berechnung: 4.255144 s. Die 44. Berechnung der Primzahlen mit 24 Thread(s) ist korrekt.
		45. Berechnung: 4.101093 s. Die 45. Berechnung der Primzahlen mit 24 Thread(s) ist korrekt.
		46. Berechnung: 4.218900 s. Die 46. Berechnung der Primzahlen mit 24 Thread(s) ist korrekt.
		47. Berechnung: 4.202823 s. Die 47. Berechnung der Primzahlen mit 24 Thread(s) ist korrekt.
		48. Berechnung: 4.143738 s. Die 48. Berechnung der Primzahlen mit 24 Thread(s) ist korrekt.
		49. Berechnung: 4.217378 s. Die 49. Berechnung der Primzahlen mit 24 Thread(s) ist korrekt.
		50. Berechnung: 4.156159 s. Die 50. Berechnung der Primzahlen mit 24 Thread(s) ist korrekt.
		Durchschnittliche Ausfuehrungszeit des Programmes bei 50 Durchlaeufen mit 24 Thread(s): 4.188637 s. Alle berechneten Primzahlen mit 24 Thread(s) sind korrekt.
	Berechnung mittels 26 Thread(s):
		1. Berechnung: 4.157403 s. Die 1. Berechnung der Primzahlen mit 26 Thread(s) ist korrekt.
		2. Berechnung: 4.135623 s. Die 2. Berechnung der Primzahlen mit 26 Thread(s) ist korrekt.
		3. Berechnung: 4.175032 s. Die 3. Berechnung der Primzahlen mit 26 Thread(s) ist korrekt.
		4. Berechnung: 4.250728 s. Die 4. Berechnung der Primzahlen mit 26 Thread(s) ist korrekt.
		5. Berechnung: 4.137741 s. Die 5. Berechnung der Primzahlen mit 26 Thread(s) ist korrekt.
		6. Berechnung: 4.170648 s. Die 6. Berechnung der Primzahlen mit 26 Thread(s) ist korrekt.
		7. Berechnung: 4.182933 s. Die 7. Berechnung der Primzahlen mit 26 Thread(s) ist korrekt.
		8. Berechnung: 4.156653 s. Die 8. Berechnung der Primzahlen mit 26 Thread(s) ist korrekt.
		9. Berechnung: 4.149891 s. Die 9. Berechnung der Primzahlen mit 26 Thread(s) ist korrekt.
		10. Berechnung: 4.111480 s. Die 10. Berechnung der Primzahlen mit 26 Thread(s) ist korrekt.
		11. Berechnung: 4.194649 s. Die 11. Berechnung der Primzahlen mit 26 Thread(s) ist korrekt.
		12. Berechnung: 4.211785 s. Die 12. Berechnung der Primzahlen mit 26 Thread(s) ist korrekt.
		13. Berechnung: 4.180139 s. Die 13. Berechnung der Primzahlen mit 26 Thread(s) ist korrekt.
		14. Berechnung: 4.235257 s. Die 14. Berechnung der Primzahlen mit 26 Thread(s) ist korrekt.
		15. Berechnung: 4.227490 s. Die 15. Berechnung der Primzahlen mit 26 Thread(s) ist korrekt.
		16. Berechnung: 4.190876 s. Die 16. Berechnung der Primzahlen mit 26 Thread(s) ist korrekt.
		17. Berechnung: 4.179921 s. Die 17. Berechnung der Primzahlen mit 26 Thread(s) ist korrekt.
		18. Berechnung: 4.288231 s. Die 18. Berechnung der Primzahlen mit 26 Thread(s) ist korrekt.
		19. Berechnung: 4.200175 s. Die 19. Berechnung der Primzahlen mit 26 Thread(s) ist korrekt.
		20. Berechnung: 4.170767 s. Die 20. Berechnung der Primzahlen mit 26 Thread(s) ist korrekt.
		21. Berechnung: 4.195731 s. Die 21. Berechnung der Primzahlen mit 26 Thread(s) ist korrekt.
		22. Berechnung: 4.273851 s. Die 22. Berechnung der Primzahlen mit 26 Thread(s) ist korrekt.
		23. Berechnung: 4.211435 s. Die 23. Berechnung der Primzahlen mit 26 Thread(s) ist korrekt.
		24. Berechnung: 4.213320 s. Die 24. Berechnung der Primzahlen mit 26 Thread(s) ist korrekt.
		25. Berechnung: 4.083617 s. Die 25. Berechnung der Primzahlen mit 26 Thread(s) ist korrekt.
		26. Berechnung: 4.167665 s. Die 26. Berechnung der Primzahlen mit 26 Thread(s) ist korrekt.
		27. Berechnung: 4.193627 s. Die 27. Berechnung der Primzahlen mit 26 Thread(s) ist korrekt.
		28. Berechnung: 4.184970 s. Die 28. Berechnung der Primzahlen mit 26 Thread(s) ist korrekt.
		29. Berechnung: 4.245358 s. Die 29. Berechnung der Primzahlen mit 26 Thread(s) ist korrekt.
		30. Berechnung: 4.123891 s. Die 30. Berechnung der Primzahlen mit 26 Thread(s) ist korrekt.
		31. Berechnung: 4.200766 s. Die 31. Berechnung der Primzahlen mit 26 Thread(s) ist korrekt.
		32. Berechnung: 4.251591 s. Die 32. Berechnung der Primzahlen mit 26 Thread(s) ist korrekt.
		33. Berechnung: 4.144801 s. Die 33. Berechnung der Primzahlen mit 26 Thread(s) ist korrekt.
		34. Berechnung: 4.264353 s. Die 34. Berechnung der Primzahlen mit 26 Thread(s) ist korrekt.
		35. Berechnung: 4.090254 s. Die 35. Berechnung der Primzahlen mit 26 Thread(s) ist korrekt.
		36. Berechnung: 4.271090 s. Die 36. Berechnung der Primzahlen mit 26 Thread(s) ist korrekt.
		37. Berechnung: 4.197502 s. Die 37. Berechnung der Primzahlen mit 26 Thread(s) ist korrekt.
		38. Berechnung: 4.204851 s. Die 38. Berechnung der Primzahlen mit 26 Thread(s) ist korrekt.
		39. Berechnung: 4.179725 s. Die 39. Berechnung der Primzahlen mit 26 Thread(s) ist korrekt.
		40. Berechnung: 4.076167 s. Die 40. Berechnung der Primzahlen mit 26 Thread(s) ist korrekt.
		41. Berechnung: 4.143986 s. Die 41. Berechnung der Primzahlen mit 26 Thread(s) ist korrekt.
		42. Berechnung: 4.183542 s. Die 42. Berechnung der Primzahlen mit 26 Thread(s) ist korrekt.
		43. Berechnung: 4.173270 s. Die 43. Berechnung der Primzahlen mit 26 Thread(s) ist korrekt.
		44. Berechnung: 4.215829 s. Die 44. Berechnung der Primzahlen mit 26 Thread(s) ist korrekt.
		45. Berechnung: 4.136506 s. Die 45. Berechnung der Primzahlen mit 26 Thread(s) ist korrekt.
		46. Berechnung: 4.199630 s. Die 46. Berechnung der Primzahlen mit 26 Thread(s) ist korrekt.
		47. Berechnung: 4.148740 s. Die 47. Berechnung der Primzahlen mit 26 Thread(s) ist korrekt.
		48. Berechnung: 4.194620 s. Die 48. Berechnung der Primzahlen mit 26 Thread(s) ist korrekt.
		49. Berechnung: 4.247818 s. Die 49. Berechnung der Primzahlen mit 26 Thread(s) ist korrekt.
		50. Berechnung: 4.142489 s. Die 50. Berechnung der Primzahlen mit 26 Thread(s) ist korrekt.
		Durchschnittliche Ausfuehrungszeit des Programmes bei 50 Durchlaeufen mit 26 Thread(s): 4.185368 s. Alle berechneten Primzahlen mit 26 Thread(s) sind korrekt.
	Berechnung mittels 28 Thread(s):
		1. Berechnung: 4.159240 s. Die 1. Berechnung der Primzahlen mit 28 Thread(s) ist korrekt.
		2. Berechnung: 4.128502 s. Die 2. Berechnung der Primzahlen mit 28 Thread(s) ist korrekt.
		3. Berechnung: 4.215708 s. Die 3. Berechnung der Primzahlen mit 28 Thread(s) ist korrekt.
		4. Berechnung: 4.157325 s. Die 4. Berechnung der Primzahlen mit 28 Thread(s) ist korrekt.
		5. Berechnung: 4.057539 s. Die 5. Berechnung der Primzahlen mit 28 Thread(s) ist korrekt.
		6. Berechnung: 4.155367 s. Die 6. Berechnung der Primzahlen mit 28 Thread(s) ist korrekt.
		7. Berechnung: 4.205325 s. Die 7. Berechnung der Primzahlen mit 28 Thread(s) ist korrekt.
		8. Berechnung: 4.256799 s. Die 8. Berechnung der Primzahlen mit 28 Thread(s) ist korrekt.
		9. Berechnung: 4.171141 s. Die 9. Berechnung der Primzahlen mit 28 Thread(s) ist korrekt.
		10. Berechnung: 4.078967 s. Die 10. Berechnung der Primzahlen mit 28 Thread(s) ist korrekt.
		11. Berechnung: 4.182487 s. Die 11. Berechnung der Primzahlen mit 28 Thread(s) ist korrekt.
		12. Berechnung: 4.247714 s. Die 12. Berechnung der Primzahlen mit 28 Thread(s) ist korrekt.
		13. Berechnung: 4.155367 s. Die 13. Berechnung der Primzahlen mit 28 Thread(s) ist korrekt.
		14. Berechnung: 4.197137 s. Die 14. Berechnung der Primzahlen mit 28 Thread(s) ist korrekt.
		15. Berechnung: 4.156719 s. Die 15. Berechnung der Primzahlen mit 28 Thread(s) ist korrekt.
		16. Berechnung: 4.229924 s. Die 16. Berechnung der Primzahlen mit 28 Thread(s) ist korrekt.
		17. Berechnung: 4.200369 s. Die 17. Berechnung der Primzahlen mit 28 Thread(s) ist korrekt.
		18. Berechnung: 4.235927 s. Die 18. Berechnung der Primzahlen mit 28 Thread(s) ist korrekt.
		19. Berechnung: 4.129038 s. Die 19. Berechnung der Primzahlen mit 28 Thread(s) ist korrekt.
		20. Berechnung: 4.048180 s. Die 20. Berechnung der Primzahlen mit 28 Thread(s) ist korrekt.
		21. Berechnung: 4.154994 s. Die 21. Berechnung der Primzahlen mit 28 Thread(s) ist korrekt.
		22. Berechnung: 4.369137 s. Die 22. Berechnung der Primzahlen mit 28 Thread(s) ist korrekt.
		23. Berechnung: 4.318665 s. Die 23. Berechnung der Primzahlen mit 28 Thread(s) ist korrekt.
		24. Berechnung: 4.241459 s. Die 24. Berechnung der Primzahlen mit 28 Thread(s) ist korrekt.
		25. Berechnung: 4.087396 s. Die 25. Berechnung der Primzahlen mit 28 Thread(s) ist korrekt.
		26. Berechnung: 4.166285 s. Die 26. Berechnung der Primzahlen mit 28 Thread(s) ist korrekt.
		27. Berechnung: 4.199711 s. Die 27. Berechnung der Primzahlen mit 28 Thread(s) ist korrekt.
		28. Berechnung: 4.195043 s. Die 28. Berechnung der Primzahlen mit 28 Thread(s) ist korrekt.
		29. Berechnung: 4.232268 s. Die 29. Berechnung der Primzahlen mit 28 Thread(s) ist korrekt.
		30. Berechnung: 4.052270 s. Die 30. Berechnung der Primzahlen mit 28 Thread(s) ist korrekt.
		31. Berechnung: 4.163847 s. Die 31. Berechnung der Primzahlen mit 28 Thread(s) ist korrekt.
		32. Berechnung: 4.175516 s. Die 32. Berechnung der Primzahlen mit 28 Thread(s) ist korrekt.
		33. Berechnung: 4.606642 s. Die 33. Berechnung der Primzahlen mit 28 Thread(s) ist korrekt.
		34. Berechnung: 5.059663 s. Die 34. Berechnung der Primzahlen mit 28 Thread(s) ist korrekt.
		35. Berechnung: 5.140211 s. Die 35. Berechnung der Primzahlen mit 28 Thread(s) ist korrekt.
		36. Berechnung: 4.545121 s. Die 36. Berechnung der Primzahlen mit 28 Thread(s) ist korrekt.
		37. Berechnung: 4.114494 s. Die 37. Berechnung der Primzahlen mit 28 Thread(s) ist korrekt.
		38. Berechnung: 4.184990 s. Die 38. Berechnung der Primzahlen mit 28 Thread(s) ist korrekt.
		39. Berechnung: 4.204747 s. Die 39. Berechnung der Primzahlen mit 28 Thread(s) ist korrekt.
		40. Berechnung: 4.208093 s. Die 40. Berechnung der Primzahlen mit 28 Thread(s) ist korrekt.
		41. Berechnung: 4.159465 s. Die 41. Berechnung der Primzahlen mit 28 Thread(s) ist korrekt.
		42. Berechnung: 4.034085 s. Die 42. Berechnung der Primzahlen mit 28 Thread(s) ist korrekt.
		43. Berechnung: 4.196456 s. Die 43. Berechnung der Primzahlen mit 28 Thread(s) ist korrekt.
		44. Berechnung: 4.202073 s. Die 44. Berechnung der Primzahlen mit 28 Thread(s) ist korrekt.
		45. Berechnung: 4.235377 s. Die 45. Berechnung der Primzahlen mit 28 Thread(s) ist korrekt.
		46. Berechnung: 4.144588 s. Die 46. Berechnung der Primzahlen mit 28 Thread(s) ist korrekt.
		47. Berechnung: 4.106436 s. Die 47. Berechnung der Primzahlen mit 28 Thread(s) ist korrekt.
		48. Berechnung: 4.179939 s. Die 48. Berechnung der Primzahlen mit 28 Thread(s) ist korrekt.
		49. Berechnung: 4.137031 s. Die 49. Berechnung der Primzahlen mit 28 Thread(s) ist korrekt.
		50. Berechnung: 4.196110 s. Die 50. Berechnung der Primzahlen mit 28 Thread(s) ist korrekt.
		Durchschnittliche Ausfuehrungszeit des Programmes bei 50 Durchlaeufen mit 28 Thread(s): 4.227618 s. Alle berechneten Primzahlen mit 28 Thread(s) sind korrekt.
	Berechnung mittels 30 Thread(s):
		1. Berechnung: 4.139844 s. Die 1. Berechnung der Primzahlen mit 30 Thread(s) ist korrekt.
		2. Berechnung: 4.037441 s. Die 2. Berechnung der Primzahlen mit 30 Thread(s) ist korrekt.
		3. Berechnung: 4.198733 s. Die 3. Berechnung der Primzahlen mit 30 Thread(s) ist korrekt.
		4. Berechnung: 4.268476 s. Die 4. Berechnung der Primzahlen mit 30 Thread(s) ist korrekt.
		5. Berechnung: 4.168180 s. Die 5. Berechnung der Primzahlen mit 30 Thread(s) ist korrekt.
		6. Berechnung: 4.182432 s. Die 6. Berechnung der Primzahlen mit 30 Thread(s) ist korrekt.
		7. Berechnung: 4.130184 s. Die 7. Berechnung der Primzahlen mit 30 Thread(s) ist korrekt.
		8. Berechnung: 4.151186 s. Die 8. Berechnung der Primzahlen mit 30 Thread(s) ist korrekt.
		9. Berechnung: 4.168206 s. Die 9. Berechnung der Primzahlen mit 30 Thread(s) ist korrekt.
		10. Berechnung: 4.228546 s. Die 10. Berechnung der Primzahlen mit 30 Thread(s) ist korrekt.
		11. Berechnung: 4.163268 s. Die 11. Berechnung der Primzahlen mit 30 Thread(s) ist korrekt.
		12. Berechnung: 4.119085 s. Die 12. Berechnung der Primzahlen mit 30 Thread(s) ist korrekt.
		13. Berechnung: 4.174459 s. Die 13. Berechnung der Primzahlen mit 30 Thread(s) ist korrekt.
		14. Berechnung: 4.217165 s. Die 14. Berechnung der Primzahlen mit 30 Thread(s) ist korrekt.
		15. Berechnung: 4.311443 s. Die 15. Berechnung der Primzahlen mit 30 Thread(s) ist korrekt.
		16. Berechnung: 4.154843 s. Die 16. Berechnung der Primzahlen mit 30 Thread(s) ist korrekt.
		17. Berechnung: 4.053033 s. Die 17. Berechnung der Primzahlen mit 30 Thread(s) ist korrekt.
		18. Berechnung: 4.188896 s. Die 18. Berechnung der Primzahlen mit 30 Thread(s) ist korrekt.
		19. Berechnung: 4.188622 s. Die 19. Berechnung der Primzahlen mit 30 Thread(s) ist korrekt.
		20. Berechnung: 4.192597 s. Die 20. Berechnung der Primzahlen mit 30 Thread(s) ist korrekt.
		21. Berechnung: 4.182974 s. Die 21. Berechnung der Primzahlen mit 30 Thread(s) ist korrekt.
		22. Berechnung: 4.060107 s. Die 22. Berechnung der Primzahlen mit 30 Thread(s) ist korrekt.
		23. Berechnung: 4.156047 s. Die 23. Berechnung der Primzahlen mit 30 Thread(s) ist korrekt.
		24. Berechnung: 4.173334 s. Die 24. Berechnung der Primzahlen mit 30 Thread(s) ist korrekt.
		25. Berechnung: 4.151143 s. Die 25. Berechnung der Primzahlen mit 30 Thread(s) ist korrekt.
		26. Berechnung: 4.097229 s. Die 26. Berechnung der Primzahlen mit 30 Thread(s) ist korrekt.
		27. Berechnung: 4.220012 s. Die 27. Berechnung der Primzahlen mit 30 Thread(s) ist korrekt.
		28. Berechnung: 4.176696 s. Die 28. Berechnung der Primzahlen mit 30 Thread(s) ist korrekt.
		29. Berechnung: 4.216696 s. Die 29. Berechnung der Primzahlen mit 30 Thread(s) ist korrekt.
		30. Berechnung: 4.230601 s. Die 30. Berechnung der Primzahlen mit 30 Thread(s) ist korrekt.
		31. Berechnung: 4.087687 s. Die 31. Berechnung der Primzahlen mit 30 Thread(s) ist korrekt.
		32. Berechnung: 4.258764 s. Die 32. Berechnung der Primzahlen mit 30 Thread(s) ist korrekt.
		33. Berechnung: 4.172343 s. Die 33. Berechnung der Primzahlen mit 30 Thread(s) ist korrekt.
		34. Berechnung: 4.172571 s. Die 34. Berechnung der Primzahlen mit 30 Thread(s) ist korrekt.
		35. Berechnung: 4.138523 s. Die 35. Berechnung der Primzahlen mit 30 Thread(s) ist korrekt.
		36. Berechnung: 4.122282 s. Die 36. Berechnung der Primzahlen mit 30 Thread(s) ist korrekt.
		37. Berechnung: 4.219178 s. Die 37. Berechnung der Primzahlen mit 30 Thread(s) ist korrekt.
		38. Berechnung: 4.188083 s. Die 38. Berechnung der Primzahlen mit 30 Thread(s) ist korrekt.
		39. Berechnung: 4.185263 s. Die 39. Berechnung der Primzahlen mit 30 Thread(s) ist korrekt.
		40. Berechnung: 4.198160 s. Die 40. Berechnung der Primzahlen mit 30 Thread(s) ist korrekt.
		41. Berechnung: 4.085618 s. Die 41. Berechnung der Primzahlen mit 30 Thread(s) ist korrekt.
		42. Berechnung: 4.198999 s. Die 42. Berechnung der Primzahlen mit 30 Thread(s) ist korrekt.
		43. Berechnung: 4.166946 s. Die 43. Berechnung der Primzahlen mit 30 Thread(s) ist korrekt.
		44. Berechnung: 4.156491 s. Die 44. Berechnung der Primzahlen mit 30 Thread(s) ist korrekt.
		45. Berechnung: 4.174224 s. Die 45. Berechnung der Primzahlen mit 30 Thread(s) ist korrekt.
		46. Berechnung: 4.123716 s. Die 46. Berechnung der Primzahlen mit 30 Thread(s) ist korrekt.
		47. Berechnung: 4.241329 s. Die 47. Berechnung der Primzahlen mit 30 Thread(s) ist korrekt.
		48. Berechnung: 4.166380 s. Die 48. Berechnung der Primzahlen mit 30 Thread(s) ist korrekt.
		49. Berechnung: 4.147966 s. Die 49. Berechnung der Primzahlen mit 30 Thread(s) ist korrekt.
		50. Berechnung: 4.218760 s. Die 50. Berechnung der Primzahlen mit 30 Thread(s) ist korrekt.
		Durchschnittliche Ausfuehrungszeit des Programmes bei 50 Durchlaeufen mit 30 Thread(s): 4.170495 s. Alle berechneten Primzahlen mit 30 Thread(s) sind korrekt.
	Berechnung mittels 32 Thread(s):
		1. Berechnung: 4.073139 s. Die 1. Berechnung der Primzahlen mit 32 Thread(s) ist korrekt.
		2. Berechnung: 4.136324 s. Die 2. Berechnung der Primzahlen mit 32 Thread(s) ist korrekt.
		3. Berechnung: 4.190925 s. Die 3. Berechnung der Primzahlen mit 32 Thread(s) ist korrekt.
		4. Berechnung: 4.139558 s. Die 4. Berechnung der Primzahlen mit 32 Thread(s) ist korrekt.
		5. Berechnung: 4.151471 s. Die 5. Berechnung der Primzahlen mit 32 Thread(s) ist korrekt.
		6. Berechnung: 4.222138 s. Die 6. Berechnung der Primzahlen mit 32 Thread(s) ist korrekt.
		7. Berechnung: 4.217739 s. Die 7. Berechnung der Primzahlen mit 32 Thread(s) ist korrekt.
		8. Berechnung: 4.316440 s. Die 8. Berechnung der Primzahlen mit 32 Thread(s) ist korrekt.
		9. Berechnung: 4.171938 s. Die 9. Berechnung der Primzahlen mit 32 Thread(s) ist korrekt.
		10. Berechnung: 4.183164 s. Die 10. Berechnung der Primzahlen mit 32 Thread(s) ist korrekt.
		11. Berechnung: 4.097219 s. Die 11. Berechnung der Primzahlen mit 32 Thread(s) ist korrekt.
		12. Berechnung: 4.166523 s. Die 12. Berechnung der Primzahlen mit 32 Thread(s) ist korrekt.
		13. Berechnung: 4.147756 s. Die 13. Berechnung der Primzahlen mit 32 Thread(s) ist korrekt.
		14. Berechnung: 4.214931 s. Die 14. Berechnung der Primzahlen mit 32 Thread(s) ist korrekt.
		15. Berechnung: 4.150785 s. Die 15. Berechnung der Primzahlen mit 32 Thread(s) ist korrekt.
		16. Berechnung: 4.067782 s. Die 16. Berechnung der Primzahlen mit 32 Thread(s) ist korrekt.
		17. Berechnung: 4.148951 s. Die 17. Berechnung der Primzahlen mit 32 Thread(s) ist korrekt.
		18. Berechnung: 4.176968 s. Die 18. Berechnung der Primzahlen mit 32 Thread(s) ist korrekt.
		19. Berechnung: 4.138090 s. Die 19. Berechnung der Primzahlen mit 32 Thread(s) ist korrekt.
		20. Berechnung: 4.178544 s. Die 20. Berechnung der Primzahlen mit 32 Thread(s) ist korrekt.
		21. Berechnung: 4.057918 s. Die 21. Berechnung der Primzahlen mit 32 Thread(s) ist korrekt.
		22. Berechnung: 4.179111 s. Die 22. Berechnung der Primzahlen mit 32 Thread(s) ist korrekt.
		23. Berechnung: 4.180169 s. Die 23. Berechnung der Primzahlen mit 32 Thread(s) ist korrekt.
		24. Berechnung: 4.181121 s. Die 24. Berechnung der Primzahlen mit 32 Thread(s) ist korrekt.
		25. Berechnung: 4.116602 s. Die 25. Berechnung der Primzahlen mit 32 Thread(s) ist korrekt.
		26. Berechnung: 4.122742 s. Die 26. Berechnung der Primzahlen mit 32 Thread(s) ist korrekt.
		27. Berechnung: 4.138262 s. Die 27. Berechnung der Primzahlen mit 32 Thread(s) ist korrekt.
		28. Berechnung: 4.205718 s. Die 28. Berechnung der Primzahlen mit 32 Thread(s) ist korrekt.
		29. Berechnung: 4.178034 s. Die 29. Berechnung der Primzahlen mit 32 Thread(s) ist korrekt.
		30. Berechnung: 4.064479 s. Die 30. Berechnung der Primzahlen mit 32 Thread(s) ist korrekt.
		31. Berechnung: 4.159517 s. Die 31. Berechnung der Primzahlen mit 32 Thread(s) ist korrekt.
		32. Berechnung: 4.177936 s. Die 32. Berechnung der Primzahlen mit 32 Thread(s) ist korrekt.
		33. Berechnung: 4.163624 s. Die 33. Berechnung der Primzahlen mit 32 Thread(s) ist korrekt.
		34. Berechnung: 4.190863 s. Die 34. Berechnung der Primzahlen mit 32 Thread(s) ist korrekt.
		35. Berechnung: 4.148338 s. Die 35. Berechnung der Primzahlen mit 32 Thread(s) ist korrekt.
		36. Berechnung: 4.188731 s. Die 36. Berechnung der Primzahlen mit 32 Thread(s) ist korrekt.
		37. Berechnung: 4.179029 s. Die 37. Berechnung der Primzahlen mit 32 Thread(s) ist korrekt.
		38. Berechnung: 4.168117 s. Die 38. Berechnung der Primzahlen mit 32 Thread(s) ist korrekt.
		39. Berechnung: 4.145648 s. Die 39. Berechnung der Primzahlen mit 32 Thread(s) ist korrekt.
		40. Berechnung: 4.088164 s. Die 40. Berechnung der Primzahlen mit 32 Thread(s) ist korrekt.
		41. Berechnung: 4.202432 s. Die 41. Berechnung der Primzahlen mit 32 Thread(s) ist korrekt.
		42. Berechnung: 4.308797 s. Die 42. Berechnung der Primzahlen mit 32 Thread(s) ist korrekt.
		43. Berechnung: 4.164503 s. Die 43. Berechnung der Primzahlen mit 32 Thread(s) ist korrekt.
		44. Berechnung: 4.161900 s. Die 44. Berechnung der Primzahlen mit 32 Thread(s) ist korrekt.
		45. Berechnung: 4.035959 s. Die 45. Berechnung der Primzahlen mit 32 Thread(s) ist korrekt.
		46. Berechnung: 4.146527 s. Die 46. Berechnung der Primzahlen mit 32 Thread(s) ist korrekt.
		47. Berechnung: 4.193733 s. Die 47. Berechnung der Primzahlen mit 32 Thread(s) ist korrekt.
		48. Berechnung: 4.147986 s. Die 48. Berechnung der Primzahlen mit 32 Thread(s) ist korrekt.
		49. Berechnung: 4.174864 s. Die 49. Berechnung der Primzahlen mit 32 Thread(s) ist korrekt.
		50. Berechnung: 4.073549 s. Die 50. Berechnung der Primzahlen mit 32 Thread(s) ist korrekt.
		Durchschnittliche Ausfuehrungszeit des Programmes bei 50 Durchlaeufen mit 32 Thread(s): 4.158695 s. Alle berechneten Primzahlen mit 32 Thread(s) sind korrekt.
	Berechnung mittels 34 Thread(s):
		1. Berechnung: 4.186945 s. Die 1. Berechnung der Primzahlen mit 34 Thread(s) ist korrekt.
		2. Berechnung: 4.157916 s. Die 2. Berechnung der Primzahlen mit 34 Thread(s) ist korrekt.
		3. Berechnung: 4.162473 s. Die 3. Berechnung der Primzahlen mit 34 Thread(s) ist korrekt.
		4. Berechnung: 4.207314 s. Die 4. Berechnung der Primzahlen mit 34 Thread(s) ist korrekt.
		5. Berechnung: 4.048773 s. Die 5. Berechnung der Primzahlen mit 34 Thread(s) ist korrekt.
		6. Berechnung: 4.157476 s. Die 6. Berechnung der Primzahlen mit 34 Thread(s) ist korrekt.
		7. Berechnung: 4.141345 s. Die 7. Berechnung der Primzahlen mit 34 Thread(s) ist korrekt.
		8. Berechnung: 4.201507 s. Die 8. Berechnung der Primzahlen mit 34 Thread(s) ist korrekt.
		9. Berechnung: 4.171972 s. Die 9. Berechnung der Primzahlen mit 34 Thread(s) ist korrekt.
		10. Berechnung: 4.126581 s. Die 10. Berechnung der Primzahlen mit 34 Thread(s) ist korrekt.
		11. Berechnung: 4.121399 s. Die 11. Berechnung der Primzahlen mit 34 Thread(s) ist korrekt.
		12. Berechnung: 4.134809 s. Die 12. Berechnung der Primzahlen mit 34 Thread(s) ist korrekt.
		13. Berechnung: 4.169194 s. Die 13. Berechnung der Primzahlen mit 34 Thread(s) ist korrekt.
		14. Berechnung: 4.086503 s. Die 14. Berechnung der Primzahlen mit 34 Thread(s) ist korrekt.
		15. Berechnung: 4.134342 s. Die 15. Berechnung der Primzahlen mit 34 Thread(s) ist korrekt.
		16. Berechnung: 4.197835 s. Die 16. Berechnung der Primzahlen mit 34 Thread(s) ist korrekt.
		17. Berechnung: 4.190019 s. Die 17. Berechnung der Primzahlen mit 34 Thread(s) ist korrekt.
		18. Berechnung: 4.222806 s. Die 18. Berechnung der Primzahlen mit 34 Thread(s) ist korrekt.
		19. Berechnung: 4.049782 s. Die 19. Berechnung der Primzahlen mit 34 Thread(s) ist korrekt.
		20. Berechnung: 4.149986 s. Die 20. Berechnung der Primzahlen mit 34 Thread(s) ist korrekt.
		21. Berechnung: 4.189636 s. Die 21. Berechnung der Primzahlen mit 34 Thread(s) ist korrekt.
		22. Berechnung: 4.201530 s. Die 22. Berechnung der Primzahlen mit 34 Thread(s) ist korrekt.
		23. Berechnung: 4.173415 s. Die 23. Berechnung der Primzahlen mit 34 Thread(s) ist korrekt.
		24. Berechnung: 4.061762 s. Die 24. Berechnung der Primzahlen mit 34 Thread(s) ist korrekt.
		25. Berechnung: 4.203944 s. Die 25. Berechnung der Primzahlen mit 34 Thread(s) ist korrekt.
		26. Berechnung: 4.177292 s. Die 26. Berechnung der Primzahlen mit 34 Thread(s) ist korrekt.
		27. Berechnung: 4.176106 s. Die 27. Berechnung der Primzahlen mit 34 Thread(s) ist korrekt.
		28. Berechnung: 4.153954 s. Die 28. Berechnung der Primzahlen mit 34 Thread(s) ist korrekt.
		29. Berechnung: 4.021906 s. Die 29. Berechnung der Primzahlen mit 34 Thread(s) ist korrekt.
		30. Berechnung: 4.173695 s. Die 30. Berechnung der Primzahlen mit 34 Thread(s) ist korrekt.
		31. Berechnung: 4.139630 s. Die 31. Berechnung der Primzahlen mit 34 Thread(s) ist korrekt.
		32. Berechnung: 4.158789 s. Die 32. Berechnung der Primzahlen mit 34 Thread(s) ist korrekt.
		33. Berechnung: 4.163931 s. Die 33. Berechnung der Primzahlen mit 34 Thread(s) ist korrekt.
		34. Berechnung: 4.104228 s. Die 34. Berechnung der Primzahlen mit 34 Thread(s) ist korrekt.
		35. Berechnung: 4.140400 s. Die 35. Berechnung der Primzahlen mit 34 Thread(s) ist korrekt.
		36. Berechnung: 4.173403 s. Die 36. Berechnung der Primzahlen mit 34 Thread(s) ist korrekt.
		37. Berechnung: 4.154872 s. Die 37. Berechnung der Primzahlen mit 34 Thread(s) ist korrekt.
		38. Berechnung: 4.091255 s. Die 38. Berechnung der Primzahlen mit 34 Thread(s) ist korrekt.
		39. Berechnung: 4.127361 s. Die 39. Berechnung der Primzahlen mit 34 Thread(s) ist korrekt.
		40. Berechnung: 4.155069 s. Die 40. Berechnung der Primzahlen mit 34 Thread(s) ist korrekt.
		41. Berechnung: 4.142882 s. Die 41. Berechnung der Primzahlen mit 34 Thread(s) ist korrekt.
		42. Berechnung: 4.179439 s. Die 42. Berechnung der Primzahlen mit 34 Thread(s) ist korrekt.
		43. Berechnung: 4.038505 s. Die 43. Berechnung der Primzahlen mit 34 Thread(s) ist korrekt.
		44. Berechnung: 4.169363 s. Die 44. Berechnung der Primzahlen mit 34 Thread(s) ist korrekt.
		45. Berechnung: 4.163622 s. Die 45. Berechnung der Primzahlen mit 34 Thread(s) ist korrekt.
		46. Berechnung: 4.150952 s. Die 46. Berechnung der Primzahlen mit 34 Thread(s) ist korrekt.
		47. Berechnung: 4.201691 s. Die 47. Berechnung der Primzahlen mit 34 Thread(s) ist korrekt.
		48. Berechnung: 4.106740 s. Die 48. Berechnung der Primzahlen mit 34 Thread(s) ist korrekt.
		49. Berechnung: 4.154393 s. Die 49. Berechnung der Primzahlen mit 34 Thread(s) ist korrekt.
		50. Berechnung: 4.161225 s. Die 50. Berechnung der Primzahlen mit 34 Thread(s) ist korrekt.
		Durchschnittliche Ausfuehrungszeit des Programmes bei 50 Durchlaeufen mit 34 Thread(s): 4.148599 s. Alle berechneten Primzahlen mit 34 Thread(s) sind korrekt.
	Berechnung mittels 36 Thread(s):
		1. Berechnung: 4.157736 s. Die 1. Berechnung der Primzahlen mit 36 Thread(s) ist korrekt.
		2. Berechnung: 4.198542 s. Die 2. Berechnung der Primzahlen mit 36 Thread(s) ist korrekt.
		3. Berechnung: 4.052723 s. Die 3. Berechnung der Primzahlen mit 36 Thread(s) ist korrekt.
		4. Berechnung: 4.171749 s. Die 4. Berechnung der Primzahlen mit 36 Thread(s) ist korrekt.
		5. Berechnung: 4.170142 s. Die 5. Berechnung der Primzahlen mit 36 Thread(s) ist korrekt.
		6. Berechnung: 4.153658 s. Die 6. Berechnung der Primzahlen mit 36 Thread(s) ist korrekt.
		7. Berechnung: 4.151213 s. Die 7. Berechnung der Primzahlen mit 36 Thread(s) ist korrekt.
		8. Berechnung: 4.027229 s. Die 8. Berechnung der Primzahlen mit 36 Thread(s) ist korrekt.
		9. Berechnung: 4.222632 s. Die 9. Berechnung der Primzahlen mit 36 Thread(s) ist korrekt.
		10. Berechnung: 4.173531 s. Die 10. Berechnung der Primzahlen mit 36 Thread(s) ist korrekt.
		11. Berechnung: 4.168958 s. Die 11. Berechnung der Primzahlen mit 36 Thread(s) ist korrekt.
		12. Berechnung: 4.078582 s. Die 12. Berechnung der Primzahlen mit 36 Thread(s) ist korrekt.
		13. Berechnung: 4.103993 s. Die 13. Berechnung der Primzahlen mit 36 Thread(s) ist korrekt.
		14. Berechnung: 4.165903 s. Die 14. Berechnung der Primzahlen mit 36 Thread(s) ist korrekt.
		15. Berechnung: 4.148287 s. Die 15. Berechnung der Primzahlen mit 36 Thread(s) ist korrekt.
		16. Berechnung: 4.167283 s. Die 16. Berechnung der Primzahlen mit 36 Thread(s) ist korrekt.
		17. Berechnung: 4.092356 s. Die 17. Berechnung der Primzahlen mit 36 Thread(s) ist korrekt.
		18. Berechnung: 4.150795 s. Die 18. Berechnung der Primzahlen mit 36 Thread(s) ist korrekt.
		19. Berechnung: 4.200291 s. Die 19. Berechnung der Primzahlen mit 36 Thread(s) ist korrekt.
		20. Berechnung: 4.135988 s. Die 20. Berechnung der Primzahlen mit 36 Thread(s) ist korrekt.
		21. Berechnung: 4.177579 s. Die 21. Berechnung der Primzahlen mit 36 Thread(s) ist korrekt.
		22. Berechnung: 4.055146 s. Die 22. Berechnung der Primzahlen mit 36 Thread(s) ist korrekt.
		23. Berechnung: 4.147783 s. Die 23. Berechnung der Primzahlen mit 36 Thread(s) ist korrekt.
		24. Berechnung: 4.179295 s. Die 24. Berechnung der Primzahlen mit 36 Thread(s) ist korrekt.
		25. Berechnung: 4.200643 s. Die 25. Berechnung der Primzahlen mit 36 Thread(s) ist korrekt.
		26. Berechnung: 4.182449 s. Die 26. Berechnung der Primzahlen mit 36 Thread(s) ist korrekt.
		27. Berechnung: 4.037226 s. Die 27. Berechnung der Primzahlen mit 36 Thread(s) ist korrekt.
		28. Berechnung: 4.137217 s. Die 28. Berechnung der Primzahlen mit 36 Thread(s) ist korrekt.
		29. Berechnung: 4.131398 s. Die 29. Berechnung der Primzahlen mit 36 Thread(s) ist korrekt.
		30. Berechnung: 4.209571 s. Die 30. Berechnung der Primzahlen mit 36 Thread(s) ist korrekt.
		31. Berechnung: 4.131996 s. Die 31. Berechnung der Primzahlen mit 36 Thread(s) ist korrekt.
		32. Berechnung: 4.044795 s. Die 32. Berechnung der Primzahlen mit 36 Thread(s) ist korrekt.
		33. Berechnung: 4.144885 s. Die 33. Berechnung der Primzahlen mit 36 Thread(s) ist korrekt.
		34. Berechnung: 4.166595 s. Die 34. Berechnung der Primzahlen mit 36 Thread(s) ist korrekt.
		35. Berechnung: 4.125031 s. Die 35. Berechnung der Primzahlen mit 36 Thread(s) ist korrekt.
		36. Berechnung: 4.035050 s. Die 36. Berechnung der Primzahlen mit 36 Thread(s) ist korrekt.
		37. Berechnung: 4.159903 s. Die 37. Berechnung der Primzahlen mit 36 Thread(s) ist korrekt.
		38. Berechnung: 4.129645 s. Die 38. Berechnung der Primzahlen mit 36 Thread(s) ist korrekt.
		39. Berechnung: 4.160212 s. Die 39. Berechnung der Primzahlen mit 36 Thread(s) ist korrekt.
		40. Berechnung: 4.175876 s. Die 40. Berechnung der Primzahlen mit 36 Thread(s) ist korrekt.
		41. Berechnung: 4.076497 s. Die 41. Berechnung der Primzahlen mit 36 Thread(s) ist korrekt.
		42. Berechnung: 4.149476 s. Die 42. Berechnung der Primzahlen mit 36 Thread(s) ist korrekt.
		43. Berechnung: 4.248085 s. Die 43. Berechnung der Primzahlen mit 36 Thread(s) ist korrekt.
		44. Berechnung: 4.133433 s. Die 44. Berechnung der Primzahlen mit 36 Thread(s) ist korrekt.
		45. Berechnung: 4.162482 s. Die 45. Berechnung der Primzahlen mit 36 Thread(s) ist korrekt.
		46. Berechnung: 4.091859 s. Die 46. Berechnung der Primzahlen mit 36 Thread(s) ist korrekt.
		47. Berechnung: 4.170694 s. Die 47. Berechnung der Primzahlen mit 36 Thread(s) ist korrekt.
		48. Berechnung: 4.164820 s. Die 48. Berechnung der Primzahlen mit 36 Thread(s) ist korrekt.
		49. Berechnung: 4.159916 s. Die 49. Berechnung der Primzahlen mit 36 Thread(s) ist korrekt.
		50. Berechnung: 4.164842 s. Die 50. Berechnung der Primzahlen mit 36 Thread(s) ist korrekt.
		Durchschnittliche Ausfuehrungszeit des Programmes bei 50 Durchlaeufen mit 36 Thread(s): 4.142920 s. Alle berechneten Primzahlen mit 36 Thread(s) sind korrekt.
	Berechnung mittels 38 Thread(s):
		1. Berechnung: 4.054607 s. Die 1. Berechnung der Primzahlen mit 38 Thread(s) ist korrekt.
		2. Berechnung: 4.132142 s. Die 2. Berechnung der Primzahlen mit 38 Thread(s) ist korrekt.
		3. Berechnung: 4.270956 s. Die 3. Berechnung der Primzahlen mit 38 Thread(s) ist korrekt.
		4. Berechnung: 4.300750 s. Die 4. Berechnung der Primzahlen mit 38 Thread(s) ist korrekt.
		5. Berechnung: 4.171707 s. Die 5. Berechnung der Primzahlen mit 38 Thread(s) ist korrekt.
		6. Berechnung: 4.063388 s. Die 6. Berechnung der Primzahlen mit 38 Thread(s) ist korrekt.
		7. Berechnung: 4.160147 s. Die 7. Berechnung der Primzahlen mit 38 Thread(s) ist korrekt.
		8. Berechnung: 4.161101 s. Die 8. Berechnung der Primzahlen mit 38 Thread(s) ist korrekt.
		9. Berechnung: 4.159442 s. Die 9. Berechnung der Primzahlen mit 38 Thread(s) ist korrekt.
		10. Berechnung: 4.141251 s. Die 10. Berechnung der Primzahlen mit 38 Thread(s) ist korrekt.
		11. Berechnung: 4.058167 s. Die 11. Berechnung der Primzahlen mit 38 Thread(s) ist korrekt.
		12. Berechnung: 4.191068 s. Die 12. Berechnung der Primzahlen mit 38 Thread(s) ist korrekt.
		13. Berechnung: 4.129136 s. Die 13. Berechnung der Primzahlen mit 38 Thread(s) ist korrekt.
		14. Berechnung: 4.176661 s. Die 14. Berechnung der Primzahlen mit 38 Thread(s) ist korrekt.
		15. Berechnung: 4.877445 s. Die 15. Berechnung der Primzahlen mit 38 Thread(s) ist korrekt.
		16. Berechnung: 4.060634 s. Die 16. Berechnung der Primzahlen mit 38 Thread(s) ist korrekt.
		17. Berechnung: 4.169844 s. Die 17. Berechnung der Primzahlen mit 38 Thread(s) ist korrekt.
		18. Berechnung: 4.156498 s. Die 18. Berechnung der Primzahlen mit 38 Thread(s) ist korrekt.
		19. Berechnung: 4.210907 s. Die 19. Berechnung der Primzahlen mit 38 Thread(s) ist korrekt.
		20. Berechnung: 4.162220 s. Die 20. Berechnung der Primzahlen mit 38 Thread(s) ist korrekt.
		21. Berechnung: 4.053664 s. Die 21. Berechnung der Primzahlen mit 38 Thread(s) ist korrekt.
		22. Berechnung: 4.163797 s. Die 22. Berechnung der Primzahlen mit 38 Thread(s) ist korrekt.
		23. Berechnung: 4.181601 s. Die 23. Berechnung der Primzahlen mit 38 Thread(s) ist korrekt.
		24. Berechnung: 4.154314 s. Die 24. Berechnung der Primzahlen mit 38 Thread(s) ist korrekt.
		25. Berechnung: 4.154416 s. Die 25. Berechnung der Primzahlen mit 38 Thread(s) ist korrekt.
		26. Berechnung: 4.032412 s. Die 26. Berechnung der Primzahlen mit 38 Thread(s) ist korrekt.
		27. Berechnung: 4.172373 s. Die 27. Berechnung der Primzahlen mit 38 Thread(s) ist korrekt.
		28. Berechnung: 4.203735 s. Die 28. Berechnung der Primzahlen mit 38 Thread(s) ist korrekt.
		29. Berechnung: 4.257589 s. Die 29. Berechnung der Primzahlen mit 38 Thread(s) ist korrekt.
		30. Berechnung: 4.071553 s. Die 30. Berechnung der Primzahlen mit 38 Thread(s) ist korrekt.
		31. Berechnung: 4.096452 s. Die 31. Berechnung der Primzahlen mit 38 Thread(s) ist korrekt.
		32. Berechnung: 4.201480 s. Die 32. Berechnung der Primzahlen mit 38 Thread(s) ist korrekt.
		33. Berechnung: 4.119486 s. Die 33. Berechnung der Primzahlen mit 38 Thread(s) ist korrekt.
		34. Berechnung: 4.134754 s. Die 34. Berechnung der Primzahlen mit 38 Thread(s) ist korrekt.
		35. Berechnung: 4.047696 s. Die 35. Berechnung der Primzahlen mit 38 Thread(s) ist korrekt.
		36. Berechnung: 4.179313 s. Die 36. Berechnung der Primzahlen mit 38 Thread(s) ist korrekt.
		37. Berechnung: 4.200661 s. Die 37. Berechnung der Primzahlen mit 38 Thread(s) ist korrekt.
		38. Berechnung: 4.153165 s. Die 38. Berechnung der Primzahlen mit 38 Thread(s) ist korrekt.
		39. Berechnung: 4.161116 s. Die 39. Berechnung der Primzahlen mit 38 Thread(s) ist korrekt.
		40. Berechnung: 4.110487 s. Die 40. Berechnung der Primzahlen mit 38 Thread(s) ist korrekt.
		41. Berechnung: 4.133394 s. Die 41. Berechnung der Primzahlen mit 38 Thread(s) ist korrekt.
		42. Berechnung: 4.137605 s. Die 42. Berechnung der Primzahlen mit 38 Thread(s) ist korrekt.
		43. Berechnung: 4.149805 s. Die 43. Berechnung der Primzahlen mit 38 Thread(s) ist korrekt.
		44. Berechnung: 4.163224 s. Die 44. Berechnung der Primzahlen mit 38 Thread(s) ist korrekt.
		45. Berechnung: 4.028576 s. Die 45. Berechnung der Primzahlen mit 38 Thread(s) ist korrekt.
		46. Berechnung: 4.220572 s. Die 46. Berechnung der Primzahlen mit 38 Thread(s) ist korrekt.
		47. Berechnung: 4.141932 s. Die 47. Berechnung der Primzahlen mit 38 Thread(s) ist korrekt.
		48. Berechnung: 4.149316 s. Die 48. Berechnung der Primzahlen mit 38 Thread(s) ist korrekt.
		49. Berechnung: 4.142449 s. Die 49. Berechnung der Primzahlen mit 38 Thread(s) ist korrekt.
		50. Berechnung: 4.052020 s. Die 50. Berechnung der Primzahlen mit 38 Thread(s) ist korrekt.
		Durchschnittliche Ausfuehrungszeit des Programmes bei 50 Durchlaeufen mit 38 Thread(s): 4.159541 s. Alle berechneten Primzahlen mit 38 Thread(s) sind korrekt.
	Berechnung mittels 40 Thread(s):
		1. Berechnung: 4.131231 s. Die 1. Berechnung der Primzahlen mit 40 Thread(s) ist korrekt.
		2. Berechnung: 4.165719 s. Die 2. Berechnung der Primzahlen mit 40 Thread(s) ist korrekt.
		3. Berechnung: 4.153456 s. Die 3. Berechnung der Primzahlen mit 40 Thread(s) ist korrekt.
		4. Berechnung: 4.076889 s. Die 4. Berechnung der Primzahlen mit 40 Thread(s) ist korrekt.
		5. Berechnung: 4.140234 s. Die 5. Berechnung der Primzahlen mit 40 Thread(s) ist korrekt.
		6. Berechnung: 4.168750 s. Die 6. Berechnung der Primzahlen mit 40 Thread(s) ist korrekt.
		7. Berechnung: 4.142616 s. Die 7. Berechnung der Primzahlen mit 40 Thread(s) ist korrekt.
		8. Berechnung: 4.175903 s. Die 8. Berechnung der Primzahlen mit 40 Thread(s) ist korrekt.
		9. Berechnung: 4.039428 s. Die 9. Berechnung der Primzahlen mit 40 Thread(s) ist korrekt.
		10. Berechnung: 4.131037 s. Die 10. Berechnung der Primzahlen mit 40 Thread(s) ist korrekt.
		11. Berechnung: 4.171619 s. Die 11. Berechnung der Primzahlen mit 40 Thread(s) ist korrekt.
		12. Berechnung: 4.178207 s. Die 12. Berechnung der Primzahlen mit 40 Thread(s) ist korrekt.
		13. Berechnung: 4.169863 s. Die 13. Berechnung der Primzahlen mit 40 Thread(s) ist korrekt.
		14. Berechnung: 4.025886 s. Die 14. Berechnung der Primzahlen mit 40 Thread(s) ist korrekt.
		15. Berechnung: 4.159685 s. Die 15. Berechnung der Primzahlen mit 40 Thread(s) ist korrekt.
		16. Berechnung: 4.135521 s. Die 16. Berechnung der Primzahlen mit 40 Thread(s) ist korrekt.
		17. Berechnung: 4.168100 s. Die 17. Berechnung der Primzahlen mit 40 Thread(s) ist korrekt.
		18. Berechnung: 4.172328 s. Die 18. Berechnung der Primzahlen mit 40 Thread(s) ist korrekt.
		19. Berechnung: 4.070631 s. Die 19. Berechnung der Primzahlen mit 40 Thread(s) ist korrekt.
		20. Berechnung: 4.619698 s. Die 20. Berechnung der Primzahlen mit 40 Thread(s) ist korrekt.
		21. Berechnung: 5.045273 s. Die 21. Berechnung der Primzahlen mit 40 Thread(s) ist korrekt.
		22. Berechnung: 5.169341 s. Die 22. Berechnung der Primzahlen mit 40 Thread(s) ist korrekt.
		23. Berechnung: 4.518893 s. Die 23. Berechnung der Primzahlen mit 40 Thread(s) ist korrekt.
		24. Berechnung: 4.175397 s. Die 24. Berechnung der Primzahlen mit 40 Thread(s) ist korrekt.
		25. Berechnung: 4.151678 s. Die 25. Berechnung der Primzahlen mit 40 Thread(s) ist korrekt.
		26. Berechnung: 4.042856 s. Die 26. Berechnung der Primzahlen mit 40 Thread(s) ist korrekt.
		27. Berechnung: 4.174405 s. Die 27. Berechnung der Primzahlen mit 40 Thread(s) ist korrekt.
		28. Berechnung: 4.164779 s. Die 28. Berechnung der Primzahlen mit 40 Thread(s) ist korrekt.
		29. Berechnung: 4.131406 s. Die 29. Berechnung der Primzahlen mit 40 Thread(s) ist korrekt.
		30. Berechnung: 4.111042 s. Die 30. Berechnung der Primzahlen mit 40 Thread(s) ist korrekt.
		31. Berechnung: 4.044279 s. Die 31. Berechnung der Primzahlen mit 40 Thread(s) ist korrekt.
		32. Berechnung: 4.139386 s. Die 32. Berechnung der Primzahlen mit 40 Thread(s) ist korrekt.
		33. Berechnung: 4.193642 s. Die 33. Berechnung der Primzahlen mit 40 Thread(s) ist korrekt.
		34. Berechnung: 4.163350 s. Die 34. Berechnung der Primzahlen mit 40 Thread(s) ist korrekt.
		35. Berechnung: 4.050787 s. Die 35. Berechnung der Primzahlen mit 40 Thread(s) ist korrekt.
		36. Berechnung: 4.174088 s. Die 36. Berechnung der Primzahlen mit 40 Thread(s) ist korrekt.
		37. Berechnung: 4.144734 s. Die 37. Berechnung der Primzahlen mit 40 Thread(s) ist korrekt.
		38. Berechnung: 4.163175 s. Die 38. Berechnung der Primzahlen mit 40 Thread(s) ist korrekt.
		39. Berechnung: 4.150204 s. Die 39. Berechnung der Primzahlen mit 40 Thread(s) ist korrekt.
		40. Berechnung: 4.039366 s. Die 40. Berechnung der Primzahlen mit 40 Thread(s) ist korrekt.
		41. Berechnung: 4.312488 s. Die 41. Berechnung der Primzahlen mit 40 Thread(s) ist korrekt.
		42. Berechnung: 4.141749 s. Die 42. Berechnung der Primzahlen mit 40 Thread(s) ist korrekt.
		43. Berechnung: 4.178186 s. Die 43. Berechnung der Primzahlen mit 40 Thread(s) ist korrekt.
		44. Berechnung: 4.206365 s. Die 44. Berechnung der Primzahlen mit 40 Thread(s) ist korrekt.
		45. Berechnung: 4.052848 s. Die 45. Berechnung der Primzahlen mit 40 Thread(s) ist korrekt.
		46. Berechnung: 4.135984 s. Die 46. Berechnung der Primzahlen mit 40 Thread(s) ist korrekt.
		47. Berechnung: 4.202029 s. Die 47. Berechnung der Primzahlen mit 40 Thread(s) ist korrekt.
		48. Berechnung: 4.131376 s. Die 48. Berechnung der Primzahlen mit 40 Thread(s) ist korrekt.
		49. Berechnung: 4.138002 s. Die 49. Berechnung der Primzahlen mit 40 Thread(s) ist korrekt.
		50. Berechnung: 4.052964 s. Die 50. Berechnung der Primzahlen mit 40 Thread(s) ist korrekt.
		Durchschnittliche Ausfuehrungszeit des Programmes bei 50 Durchlaeufen mit 40 Thread(s): 4.193937 s. Alle berechneten Primzahlen mit 40 Thread(s) sind korrekt.
	Berechnung mittels 42 Thread(s):
		1. Berechnung: 4.171921 s. Die 1. Berechnung der Primzahlen mit 42 Thread(s) ist korrekt.
		2. Berechnung: 4.275183 s. Die 2. Berechnung der Primzahlen mit 42 Thread(s) ist korrekt.
		3. Berechnung: 4.131131 s. Die 3. Berechnung der Primzahlen mit 42 Thread(s) ist korrekt.
		4. Berechnung: 4.180748 s. Die 4. Berechnung der Primzahlen mit 42 Thread(s) ist korrekt.
		5. Berechnung: 4.076505 s. Die 5. Berechnung der Primzahlen mit 42 Thread(s) ist korrekt.
		6. Berechnung: 4.170337 s. Die 6. Berechnung der Primzahlen mit 42 Thread(s) ist korrekt.
		7. Berechnung: 4.138645 s. Die 7. Berechnung der Primzahlen mit 42 Thread(s) ist korrekt.
		8. Berechnung: 4.148629 s. Die 8. Berechnung der Primzahlen mit 42 Thread(s) ist korrekt.
		9. Berechnung: 4.046695 s. Die 9. Berechnung der Primzahlen mit 42 Thread(s) ist korrekt.
		10. Berechnung: 4.154399 s. Die 10. Berechnung der Primzahlen mit 42 Thread(s) ist korrekt.
		11. Berechnung: 4.184718 s. Die 11. Berechnung der Primzahlen mit 42 Thread(s) ist korrekt.
		12. Berechnung: 4.137364 s. Die 12. Berechnung der Primzahlen mit 42 Thread(s) ist korrekt.
		13. Berechnung: 4.156565 s. Die 13. Berechnung der Primzahlen mit 42 Thread(s) ist korrekt.
		14. Berechnung: 4.045705 s. Die 14. Berechnung der Primzahlen mit 42 Thread(s) ist korrekt.
		15. Berechnung: 4.171783 s. Die 15. Berechnung der Primzahlen mit 42 Thread(s) ist korrekt.
		16. Berechnung: 4.179629 s. Die 16. Berechnung der Primzahlen mit 42 Thread(s) ist korrekt.
		17. Berechnung: 4.281414 s. Die 17. Berechnung der Primzahlen mit 42 Thread(s) ist korrekt.
		18. Berechnung: 4.202614 s. Die 18. Berechnung der Primzahlen mit 42 Thread(s) ist korrekt.
		19. Berechnung: 4.053138 s. Die 19. Berechnung der Primzahlen mit 42 Thread(s) ist korrekt.
		20. Berechnung: 4.231757 s. Die 20. Berechnung der Primzahlen mit 42 Thread(s) ist korrekt.
		21. Berechnung: 4.154230 s. Die 21. Berechnung der Primzahlen mit 42 Thread(s) ist korrekt.
		22. Berechnung: 4.125530 s. Die 22. Berechnung der Primzahlen mit 42 Thread(s) ist korrekt.
		23. Berechnung: 4.166615 s. Die 23. Berechnung der Primzahlen mit 42 Thread(s) ist korrekt.
		24. Berechnung: 4.092886 s. Die 24. Berechnung der Primzahlen mit 42 Thread(s) ist korrekt.
		25. Berechnung: 4.660533 s. Die 25. Berechnung der Primzahlen mit 42 Thread(s) ist korrekt.
		26. Berechnung: 4.170034 s. Die 26. Berechnung der Primzahlen mit 42 Thread(s) ist korrekt.
		27. Berechnung: 4.126705 s. Die 27. Berechnung der Primzahlen mit 42 Thread(s) ist korrekt.
		28. Berechnung: 4.133917 s. Die 28. Berechnung der Primzahlen mit 42 Thread(s) ist korrekt.
		29. Berechnung: 4.055608 s. Die 29. Berechnung der Primzahlen mit 42 Thread(s) ist korrekt.
		30. Berechnung: 4.213284 s. Die 30. Berechnung der Primzahlen mit 42 Thread(s) ist korrekt.
		31. Berechnung: 4.128847 s. Die 31. Berechnung der Primzahlen mit 42 Thread(s) ist korrekt.
		32. Berechnung: 4.152695 s. Die 32. Berechnung der Primzahlen mit 42 Thread(s) ist korrekt.
		33. Berechnung: 4.082233 s. Die 33. Berechnung der Primzahlen mit 42 Thread(s) ist korrekt.
		34. Berechnung: 4.055963 s. Die 34. Berechnung der Primzahlen mit 42 Thread(s) ist korrekt.
		35. Berechnung: 4.052927 s. Die 35. Berechnung der Primzahlen mit 42 Thread(s) ist korrekt.
		36. Berechnung: 4.080127 s. Die 36. Berechnung der Primzahlen mit 42 Thread(s) ist korrekt.
		37. Berechnung: 4.107890 s. Die 37. Berechnung der Primzahlen mit 42 Thread(s) ist korrekt.
		38. Berechnung: 4.091414 s. Die 38. Berechnung der Primzahlen mit 42 Thread(s) ist korrekt.
		39. Berechnung: 4.054759 s. Die 39. Berechnung der Primzahlen mit 42 Thread(s) ist korrekt.
		40. Berechnung: 4.134390 s. Die 40. Berechnung der Primzahlen mit 42 Thread(s) ist korrekt.
		41. Berechnung: 4.076339 s. Die 41. Berechnung der Primzahlen mit 42 Thread(s) ist korrekt.
		42. Berechnung: 4.145146 s. Die 42. Berechnung der Primzahlen mit 42 Thread(s) ist korrekt.
		43. Berechnung: 4.044697 s. Die 43. Berechnung der Primzahlen mit 42 Thread(s) ist korrekt.
		44. Berechnung: 4.065999 s. Die 44. Berechnung der Primzahlen mit 42 Thread(s) ist korrekt.
		45. Berechnung: 4.096518 s. Die 45. Berechnung der Primzahlen mit 42 Thread(s) ist korrekt.
		46. Berechnung: 4.082798 s. Die 46. Berechnung der Primzahlen mit 42 Thread(s) ist korrekt.
		47. Berechnung: 4.193454 s. Die 47. Berechnung der Primzahlen mit 42 Thread(s) ist korrekt.
		48. Berechnung: 4.056767 s. Die 48. Berechnung der Primzahlen mit 42 Thread(s) ist korrekt.
		49. Berechnung: 4.058268 s. Die 49. Berechnung der Primzahlen mit 42 Thread(s) ist korrekt.
		50. Berechnung: 4.091706 s. Die 50. Berechnung der Primzahlen mit 42 Thread(s) ist korrekt.
		Durchschnittliche Ausfuehrungszeit des Programmes bei 50 Durchlaeufen mit 42 Thread(s): 4.137823 s. Alle berechneten Primzahlen mit 42 Thread(s) sind korrekt.
	Berechnung mittels 44 Thread(s):
		1. Berechnung: 4.034145 s. Die 1. Berechnung der Primzahlen mit 44 Thread(s) ist korrekt.
		2. Berechnung: 4.048058 s. Die 2. Berechnung der Primzahlen mit 44 Thread(s) ist korrekt.
		3. Berechnung: 4.034981 s. Die 3. Berechnung der Primzahlen mit 44 Thread(s) ist korrekt.
		4. Berechnung: 4.038032 s. Die 4. Berechnung der Primzahlen mit 44 Thread(s) ist korrekt.
		5. Berechnung: 4.054980 s. Die 5. Berechnung der Primzahlen mit 44 Thread(s) ist korrekt.
		6. Berechnung: 4.049767 s. Die 6. Berechnung der Primzahlen mit 44 Thread(s) ist korrekt.
		7. Berechnung: 4.061853 s. Die 7. Berechnung der Primzahlen mit 44 Thread(s) ist korrekt.
		8. Berechnung: 4.039771 s. Die 8. Berechnung der Primzahlen mit 44 Thread(s) ist korrekt.
		9. Berechnung: 4.067535 s. Die 9. Berechnung der Primzahlen mit 44 Thread(s) ist korrekt.
		10. Berechnung: 4.087597 s. Die 10. Berechnung der Primzahlen mit 44 Thread(s) ist korrekt.
		11. Berechnung: 4.189951 s. Die 11. Berechnung der Primzahlen mit 44 Thread(s) ist korrekt.
		12. Berechnung: 4.055395 s. Die 12. Berechnung der Primzahlen mit 44 Thread(s) ist korrekt.
		13. Berechnung: 4.061421 s. Die 13. Berechnung der Primzahlen mit 44 Thread(s) ist korrekt.
		14. Berechnung: 4.039843 s. Die 14. Berechnung der Primzahlen mit 44 Thread(s) ist korrekt.
		15. Berechnung: 4.036708 s. Die 15. Berechnung der Primzahlen mit 44 Thread(s) ist korrekt.
		16. Berechnung: 4.016603 s. Die 16. Berechnung der Primzahlen mit 44 Thread(s) ist korrekt.
		17. Berechnung: 4.075818 s. Die 17. Berechnung der Primzahlen mit 44 Thread(s) ist korrekt.
		18. Berechnung: 4.026692 s. Die 18. Berechnung der Primzahlen mit 44 Thread(s) ist korrekt.
		19. Berechnung: 4.036883 s. Die 19. Berechnung der Primzahlen mit 44 Thread(s) ist korrekt.
		20. Berechnung: 4.053797 s. Die 20. Berechnung der Primzahlen mit 44 Thread(s) ist korrekt.
		21. Berechnung: 4.029746 s. Die 21. Berechnung der Primzahlen mit 44 Thread(s) ist korrekt.
		22. Berechnung: 4.031096 s. Die 22. Berechnung der Primzahlen mit 44 Thread(s) ist korrekt.
		23. Berechnung: 4.059522 s. Die 23. Berechnung der Primzahlen mit 44 Thread(s) ist korrekt.
		24. Berechnung: 4.204665 s. Die 24. Berechnung der Primzahlen mit 44 Thread(s) ist korrekt.
		25. Berechnung: 4.040163 s. Die 25. Berechnung der Primzahlen mit 44 Thread(s) ist korrekt.
		26. Berechnung: 4.072161 s. Die 26. Berechnung der Primzahlen mit 44 Thread(s) ist korrekt.
		27. Berechnung: 4.041587 s. Die 27. Berechnung der Primzahlen mit 44 Thread(s) ist korrekt.
		28. Berechnung: 4.033097 s. Die 28. Berechnung der Primzahlen mit 44 Thread(s) ist korrekt.
		29. Berechnung: 4.060387 s. Die 29. Berechnung der Primzahlen mit 44 Thread(s) ist korrekt.
		30. Berechnung: 4.041743 s. Die 30. Berechnung der Primzahlen mit 44 Thread(s) ist korrekt.
		31. Berechnung: 4.053390 s. Die 31. Berechnung der Primzahlen mit 44 Thread(s) ist korrekt.
		32. Berechnung: 4.056327 s. Die 32. Berechnung der Primzahlen mit 44 Thread(s) ist korrekt.
		33. Berechnung: 4.067827 s. Die 33. Berechnung der Primzahlen mit 44 Thread(s) ist korrekt.
		34. Berechnung: 4.044133 s. Die 34. Berechnung der Primzahlen mit 44 Thread(s) ist korrekt.
		35. Berechnung: 4.036124 s. Die 35. Berechnung der Primzahlen mit 44 Thread(s) ist korrekt.
		36. Berechnung: 4.034092 s. Die 36. Berechnung der Primzahlen mit 44 Thread(s) ist korrekt.
		37. Berechnung: 4.060103 s. Die 37. Berechnung der Primzahlen mit 44 Thread(s) ist korrekt.
		38. Berechnung: 4.043021 s. Die 38. Berechnung der Primzahlen mit 44 Thread(s) ist korrekt.
		39. Berechnung: 4.041395 s. Die 39. Berechnung der Primzahlen mit 44 Thread(s) ist korrekt.
		40. Berechnung: 4.043566 s. Die 40. Berechnung der Primzahlen mit 44 Thread(s) ist korrekt.
		41. Berechnung: 4.038686 s. Die 41. Berechnung der Primzahlen mit 44 Thread(s) ist korrekt.
		42. Berechnung: 4.066538 s. Die 42. Berechnung der Primzahlen mit 44 Thread(s) ist korrekt.
		43. Berechnung: 4.034045 s. Die 43. Berechnung der Primzahlen mit 44 Thread(s) ist korrekt.
		44. Berechnung: 4.041156 s. Die 44. Berechnung der Primzahlen mit 44 Thread(s) ist korrekt.
		45. Berechnung: 4.026924 s. Die 45. Berechnung der Primzahlen mit 44 Thread(s) ist korrekt.
		46. Berechnung: 4.032733 s. Die 46. Berechnung der Primzahlen mit 44 Thread(s) ist korrekt.
		47. Berechnung: 4.056163 s. Die 47. Berechnung der Primzahlen mit 44 Thread(s) ist korrekt.
		48. Berechnung: 4.039205 s. Die 48. Berechnung der Primzahlen mit 44 Thread(s) ist korrekt.
		49. Berechnung: 4.083698 s. Die 49. Berechnung der Primzahlen mit 44 Thread(s) ist korrekt.
		50. Berechnung: 4.035607 s. Die 50. Berechnung der Primzahlen mit 44 Thread(s) ist korrekt.
		Durchschnittliche Ausfuehrungszeit des Programmes bei 50 Durchlaeufen mit 44 Thread(s): 4.053175 s. Alle berechneten Primzahlen mit 44 Thread(s) sind korrekt.
	Berechnung mittels 46 Thread(s):
		1. Berechnung: 4.034444 s. Die 1. Berechnung der Primzahlen mit 46 Thread(s) ist korrekt.
		2. Berechnung: 4.050839 s. Die 2. Berechnung der Primzahlen mit 46 Thread(s) ist korrekt.
		3. Berechnung: 4.081663 s. Die 3. Berechnung der Primzahlen mit 46 Thread(s) ist korrekt.
		4. Berechnung: 4.028393 s. Die 4. Berechnung der Primzahlen mit 46 Thread(s) ist korrekt.
		5. Berechnung: 4.066041 s. Die 5. Berechnung der Primzahlen mit 46 Thread(s) ist korrekt.
		6. Berechnung: 4.047875 s. Die 6. Berechnung der Primzahlen mit 46 Thread(s) ist korrekt.
		7. Berechnung: 4.064830 s. Die 7. Berechnung der Primzahlen mit 46 Thread(s) ist korrekt.
		8. Berechnung: 4.067701 s. Die 8. Berechnung der Primzahlen mit 46 Thread(s) ist korrekt.
		9. Berechnung: 4.080452 s. Die 9. Berechnung der Primzahlen mit 46 Thread(s) ist korrekt.
		10. Berechnung: 4.040155 s. Die 10. Berechnung der Primzahlen mit 46 Thread(s) ist korrekt.
		11. Berechnung: 4.041169 s. Die 11. Berechnung der Primzahlen mit 46 Thread(s) ist korrekt.
		12. Berechnung: 4.046750 s. Die 12. Berechnung der Primzahlen mit 46 Thread(s) ist korrekt.
		13. Berechnung: 4.060633 s. Die 13. Berechnung der Primzahlen mit 46 Thread(s) ist korrekt.
		14. Berechnung: 4.054112 s. Die 14. Berechnung der Primzahlen mit 46 Thread(s) ist korrekt.
		15. Berechnung: 4.033544 s. Die 15. Berechnung der Primzahlen mit 46 Thread(s) ist korrekt.
		16. Berechnung: 4.074694 s. Die 16. Berechnung der Primzahlen mit 46 Thread(s) ist korrekt.
		17. Berechnung: 4.034404 s. Die 17. Berechnung der Primzahlen mit 46 Thread(s) ist korrekt.
		18. Berechnung: 4.059662 s. Die 18. Berechnung der Primzahlen mit 46 Thread(s) ist korrekt.
		19. Berechnung: 4.043572 s. Die 19. Berechnung der Primzahlen mit 46 Thread(s) ist korrekt.
		20. Berechnung: 4.029631 s. Die 20. Berechnung der Primzahlen mit 46 Thread(s) ist korrekt.
		21. Berechnung: 4.033814 s. Die 21. Berechnung der Primzahlen mit 46 Thread(s) ist korrekt.
		22. Berechnung: 4.030640 s. Die 22. Berechnung der Primzahlen mit 46 Thread(s) ist korrekt.
		23. Berechnung: 4.039280 s. Die 23. Berechnung der Primzahlen mit 46 Thread(s) ist korrekt.
		24. Berechnung: 4.085369 s. Die 24. Berechnung der Primzahlen mit 46 Thread(s) ist korrekt.
		25. Berechnung: 4.027954 s. Die 25. Berechnung der Primzahlen mit 46 Thread(s) ist korrekt.
		26. Berechnung: 4.067447 s. Die 26. Berechnung der Primzahlen mit 46 Thread(s) ist korrekt.
		27. Berechnung: 4.039194 s. Die 27. Berechnung der Primzahlen mit 46 Thread(s) ist korrekt.
		28. Berechnung: 4.023291 s. Die 28. Berechnung der Primzahlen mit 46 Thread(s) ist korrekt.
		29. Berechnung: 4.052461 s. Die 29. Berechnung der Primzahlen mit 46 Thread(s) ist korrekt.
		30. Berechnung: 4.046057 s. Die 30. Berechnung der Primzahlen mit 46 Thread(s) ist korrekt.
		31. Berechnung: 4.016578 s. Die 31. Berechnung der Primzahlen mit 46 Thread(s) ist korrekt.
		32. Berechnung: 4.096921 s. Die 32. Berechnung der Primzahlen mit 46 Thread(s) ist korrekt.
		33. Berechnung: 4.130574 s. Die 33. Berechnung der Primzahlen mit 46 Thread(s) ist korrekt.
		34. Berechnung: 4.076148 s. Die 34. Berechnung der Primzahlen mit 46 Thread(s) ist korrekt.
		35. Berechnung: 4.031147 s. Die 35. Berechnung der Primzahlen mit 46 Thread(s) ist korrekt.
		36. Berechnung: 4.076866 s. Die 36. Berechnung der Primzahlen mit 46 Thread(s) ist korrekt.
		37. Berechnung: 4.065085 s. Die 37. Berechnung der Primzahlen mit 46 Thread(s) ist korrekt.
		38. Berechnung: 4.040659 s. Die 38. Berechnung der Primzahlen mit 46 Thread(s) ist korrekt.
		39. Berechnung: 4.042492 s. Die 39. Berechnung der Primzahlen mit 46 Thread(s) ist korrekt.
		40. Berechnung: 4.062397 s. Die 40. Berechnung der Primzahlen mit 46 Thread(s) ist korrekt.
		41. Berechnung: 4.038868 s. Die 41. Berechnung der Primzahlen mit 46 Thread(s) ist korrekt.
		42. Berechnung: 4.060816 s. Die 42. Berechnung der Primzahlen mit 46 Thread(s) ist korrekt.
		43. Berechnung: 4.028828 s. Die 43. Berechnung der Primzahlen mit 46 Thread(s) ist korrekt.
		44. Berechnung: 4.100625 s. Die 44. Berechnung der Primzahlen mit 46 Thread(s) ist korrekt.
		45. Berechnung: 4.023524 s. Die 45. Berechnung der Primzahlen mit 46 Thread(s) ist korrekt.
		46. Berechnung: 4.041150 s. Die 46. Berechnung der Primzahlen mit 46 Thread(s) ist korrekt.
		47. Berechnung: 4.070792 s. Die 47. Berechnung der Primzahlen mit 46 Thread(s) ist korrekt.
		48. Berechnung: 4.099022 s. Die 48. Berechnung der Primzahlen mit 46 Thread(s) ist korrekt.
		49. Berechnung: 4.033729 s. Die 49. Berechnung der Primzahlen mit 46 Thread(s) ist korrekt.
		50. Berechnung: 4.026383 s. Die 50. Berechnung der Primzahlen mit 46 Thread(s) ist korrekt.
		Durchschnittliche Ausfuehrungszeit des Programmes bei 50 Durchlaeufen mit 46 Thread(s): 4.052974 s. Alle berechneten Primzahlen mit 46 Thread(s) sind korrekt.
	Berechnung mittels 48 Thread(s):
		1. Berechnung: 4.055275 s. Die 1. Berechnung der Primzahlen mit 48 Thread(s) ist korrekt.
		2. Berechnung: 4.054309 s. Die 2. Berechnung der Primzahlen mit 48 Thread(s) ist korrekt.
		3. Berechnung: 4.026509 s. Die 3. Berechnung der Primzahlen mit 48 Thread(s) ist korrekt.
		4. Berechnung: 4.035000 s. Die 4. Berechnung der Primzahlen mit 48 Thread(s) ist korrekt.
		5. Berechnung: 4.026910 s. Die 5. Berechnung der Primzahlen mit 48 Thread(s) ist korrekt.
		6. Berechnung: 4.019195 s. Die 6. Berechnung der Primzahlen mit 48 Thread(s) ist korrekt.
		7. Berechnung: 4.071747 s. Die 7. Berechnung der Primzahlen mit 48 Thread(s) ist korrekt.
		8. Berechnung: 4.057121 s. Die 8. Berechnung der Primzahlen mit 48 Thread(s) ist korrekt.
		9. Berechnung: 4.049641 s. Die 9. Berechnung der Primzahlen mit 48 Thread(s) ist korrekt.
		10. Berechnung: 4.030821 s. Die 10. Berechnung der Primzahlen mit 48 Thread(s) ist korrekt.
		11. Berechnung: 4.038611 s. Die 11. Berechnung der Primzahlen mit 48 Thread(s) ist korrekt.
		12. Berechnung: 4.043665 s. Die 12. Berechnung der Primzahlen mit 48 Thread(s) ist korrekt.
		13. Berechnung: 4.028096 s. Die 13. Berechnung der Primzahlen mit 48 Thread(s) ist korrekt.
		14. Berechnung: 4.021694 s. Die 14. Berechnung der Primzahlen mit 48 Thread(s) ist korrekt.
		15. Berechnung: 4.064482 s. Die 15. Berechnung der Primzahlen mit 48 Thread(s) ist korrekt.
		16. Berechnung: 4.046516 s. Die 16. Berechnung der Primzahlen mit 48 Thread(s) ist korrekt.
		17. Berechnung: 4.024084 s. Die 17. Berechnung der Primzahlen mit 48 Thread(s) ist korrekt.
		18. Berechnung: 4.043400 s. Die 18. Berechnung der Primzahlen mit 48 Thread(s) ist korrekt.
		19. Berechnung: 4.038740 s. Die 19. Berechnung der Primzahlen mit 48 Thread(s) ist korrekt.
		20. Berechnung: 4.066395 s. Die 20. Berechnung der Primzahlen mit 48 Thread(s) ist korrekt.
		21. Berechnung: 4.121043 s. Die 21. Berechnung der Primzahlen mit 48 Thread(s) ist korrekt.
		22. Berechnung: 4.048068 s. Die 22. Berechnung der Primzahlen mit 48 Thread(s) ist korrekt.
		23. Berechnung: 4.037933 s. Die 23. Berechnung der Primzahlen mit 48 Thread(s) ist korrekt.
		24. Berechnung: 4.032317 s. Die 24. Berechnung der Primzahlen mit 48 Thread(s) ist korrekt.
		25. Berechnung: 4.049951 s. Die 25. Berechnung der Primzahlen mit 48 Thread(s) ist korrekt.
		26. Berechnung: 4.033653 s. Die 26. Berechnung der Primzahlen mit 48 Thread(s) ist korrekt.
		27. Berechnung: 4.027785 s. Die 27. Berechnung der Primzahlen mit 48 Thread(s) ist korrekt.
		28. Berechnung: 4.043974 s. Die 28. Berechnung der Primzahlen mit 48 Thread(s) ist korrekt.
		29. Berechnung: 4.008978 s. Die 29. Berechnung der Primzahlen mit 48 Thread(s) ist korrekt.
		30. Berechnung: 4.289069 s. Die 30. Berechnung der Primzahlen mit 48 Thread(s) ist korrekt.
		31. Berechnung: 4.088288 s. Die 31. Berechnung der Primzahlen mit 48 Thread(s) ist korrekt.
		32. Berechnung: 4.030596 s. Die 32. Berechnung der Primzahlen mit 48 Thread(s) ist korrekt.
		33. Berechnung: 4.024763 s. Die 33. Berechnung der Primzahlen mit 48 Thread(s) ist korrekt.
		34. Berechnung: 4.064184 s. Die 34. Berechnung der Primzahlen mit 48 Thread(s) ist korrekt.
		35. Berechnung: 4.037348 s. Die 35. Berechnung der Primzahlen mit 48 Thread(s) ist korrekt.
		36. Berechnung: 4.060639 s. Die 36. Berechnung der Primzahlen mit 48 Thread(s) ist korrekt.
		37. Berechnung: 4.032794 s. Die 37. Berechnung der Primzahlen mit 48 Thread(s) ist korrekt.
		38. Berechnung: 4.048049 s. Die 38. Berechnung der Primzahlen mit 48 Thread(s) ist korrekt.
		39. Berechnung: 4.033272 s. Die 39. Berechnung der Primzahlen mit 48 Thread(s) ist korrekt.
		40. Berechnung: 4.061616 s. Die 40. Berechnung der Primzahlen mit 48 Thread(s) ist korrekt.
		41. Berechnung: 4.058803 s. Die 41. Berechnung der Primzahlen mit 48 Thread(s) ist korrekt.
		42. Berechnung: 4.039220 s. Die 42. Berechnung der Primzahlen mit 48 Thread(s) ist korrekt.
		43. Berechnung: 4.033505 s. Die 43. Berechnung der Primzahlen mit 48 Thread(s) ist korrekt.
		44. Berechnung: 4.171341 s. Die 44. Berechnung der Primzahlen mit 48 Thread(s) ist korrekt.
		45. Berechnung: 4.058462 s. Die 45. Berechnung der Primzahlen mit 48 Thread(s) ist korrekt.
		46. Berechnung: 4.062686 s. Die 46. Berechnung der Primzahlen mit 48 Thread(s) ist korrekt.
		47. Berechnung: 4.024912 s. Die 47. Berechnung der Primzahlen mit 48 Thread(s) ist korrekt.
		48. Berechnung: 4.047285 s. Die 48. Berechnung der Primzahlen mit 48 Thread(s) ist korrekt.
		49. Berechnung: 4.053973 s. Die 49. Berechnung der Primzahlen mit 48 Thread(s) ist korrekt.
		50. Berechnung: 4.033860 s. Die 50. Berechnung der Primzahlen mit 48 Thread(s) ist korrekt.
		Durchschnittliche Ausfuehrungszeit des Programmes bei 50 Durchlaeufen mit 48 Thread(s): 4.052012 s. Alle berechneten Primzahlen mit 48 Thread(s) sind korrekt.
	Berechnung mittels 50 Thread(s):
		1. Berechnung: 4.033361 s. Die 1. Berechnung der Primzahlen mit 50 Thread(s) ist korrekt.
		2. Berechnung: 4.038589 s. Die 2. Berechnung der Primzahlen mit 50 Thread(s) ist korrekt.
		3. Berechnung: 4.062218 s. Die 3. Berechnung der Primzahlen mit 50 Thread(s) ist korrekt.
		4. Berechnung: 4.027857 s. Die 4. Berechnung der Primzahlen mit 50 Thread(s) ist korrekt.
		5. Berechnung: 4.047838 s. Die 5. Berechnung der Primzahlen mit 50 Thread(s) ist korrekt.
		6. Berechnung: 4.039080 s. Die 6. Berechnung der Primzahlen mit 50 Thread(s) ist korrekt.
		7. Berechnung: 4.037823 s. Die 7. Berechnung der Primzahlen mit 50 Thread(s) ist korrekt.
		8. Berechnung: 4.070428 s. Die 8. Berechnung der Primzahlen mit 50 Thread(s) ist korrekt.
		9. Berechnung: 4.030610 s. Die 9. Berechnung der Primzahlen mit 50 Thread(s) ist korrekt.
		10. Berechnung: 4.051480 s. Die 10. Berechnung der Primzahlen mit 50 Thread(s) ist korrekt.
		11. Berechnung: 4.044696 s. Die 11. Berechnung der Primzahlen mit 50 Thread(s) ist korrekt.
		12. Berechnung: 4.030176 s. Die 12. Berechnung der Primzahlen mit 50 Thread(s) ist korrekt.
		13. Berechnung: 4.027545 s. Die 13. Berechnung der Primzahlen mit 50 Thread(s) ist korrekt.
		14. Berechnung: 4.025329 s. Die 14. Berechnung der Primzahlen mit 50 Thread(s) ist korrekt.
		15. Berechnung: 4.034264 s. Die 15. Berechnung der Primzahlen mit 50 Thread(s) ist korrekt.
		16. Berechnung: 4.037480 s. Die 16. Berechnung der Primzahlen mit 50 Thread(s) ist korrekt.
		17. Berechnung: 4.048678 s. Die 17. Berechnung der Primzahlen mit 50 Thread(s) ist korrekt.
		18. Berechnung: 4.054755 s. Die 18. Berechnung der Primzahlen mit 50 Thread(s) ist korrekt.
		19. Berechnung: 4.026508 s. Die 19. Berechnung der Primzahlen mit 50 Thread(s) ist korrekt.
		20. Berechnung: 4.050215 s. Die 20. Berechnung der Primzahlen mit 50 Thread(s) ist korrekt.
		21. Berechnung: 4.037069 s. Die 21. Berechnung der Primzahlen mit 50 Thread(s) ist korrekt.
		22. Berechnung: 4.040454 s. Die 22. Berechnung der Primzahlen mit 50 Thread(s) ist korrekt.
		23. Berechnung: 4.044523 s. Die 23. Berechnung der Primzahlen mit 50 Thread(s) ist korrekt.
		24. Berechnung: 4.027118 s. Die 24. Berechnung der Primzahlen mit 50 Thread(s) ist korrekt.
		25. Berechnung: 4.028709 s. Die 25. Berechnung der Primzahlen mit 50 Thread(s) ist korrekt.
		26. Berechnung: 4.063908 s. Die 26. Berechnung der Primzahlen mit 50 Thread(s) ist korrekt.
		27. Berechnung: 4.033625 s. Die 27. Berechnung der Primzahlen mit 50 Thread(s) ist korrekt.
		28. Berechnung: 4.035408 s. Die 28. Berechnung der Primzahlen mit 50 Thread(s) ist korrekt.
		29. Berechnung: 4.036948 s. Die 29. Berechnung der Primzahlen mit 50 Thread(s) ist korrekt.
		30. Berechnung: 4.032962 s. Die 30. Berechnung der Primzahlen mit 50 Thread(s) ist korrekt.
		31. Berechnung: 4.037382 s. Die 31. Berechnung der Primzahlen mit 50 Thread(s) ist korrekt.
		32. Berechnung: 4.052448 s. Die 32. Berechnung der Primzahlen mit 50 Thread(s) ist korrekt.
		33. Berechnung: 4.048751 s. Die 33. Berechnung der Primzahlen mit 50 Thread(s) ist korrekt.
		34. Berechnung: 4.031176 s. Die 34. Berechnung der Primzahlen mit 50 Thread(s) ist korrekt.
		35. Berechnung: 4.043127 s. Die 35. Berechnung der Primzahlen mit 50 Thread(s) ist korrekt.
		36. Berechnung: 4.028840 s. Die 36. Berechnung der Primzahlen mit 50 Thread(s) ist korrekt.
		37. Berechnung: 4.012018 s. Die 37. Berechnung der Primzahlen mit 50 Thread(s) ist korrekt.
		38. Berechnung: 4.026052 s. Die 38. Berechnung der Primzahlen mit 50 Thread(s) ist korrekt.
		39. Berechnung: 4.048296 s. Die 39. Berechnung der Primzahlen mit 50 Thread(s) ist korrekt.
		40. Berechnung: 4.056010 s. Die 40. Berechnung der Primzahlen mit 50 Thread(s) ist korrekt.
		41. Berechnung: 4.117428 s. Die 41. Berechnung der Primzahlen mit 50 Thread(s) ist korrekt.
		42. Berechnung: 4.055512 s. Die 42. Berechnung der Primzahlen mit 50 Thread(s) ist korrekt.
		43. Berechnung: 4.042622 s. Die 43. Berechnung der Primzahlen mit 50 Thread(s) ist korrekt.
		44. Berechnung: 4.047483 s. Die 44. Berechnung der Primzahlen mit 50 Thread(s) ist korrekt.
		45. Berechnung: 4.084652 s. Die 45. Berechnung der Primzahlen mit 50 Thread(s) ist korrekt.
		46. Berechnung: 4.023653 s. Die 46. Berechnung der Primzahlen mit 50 Thread(s) ist korrekt.
		47. Berechnung: 4.039201 s. Die 47. Berechnung der Primzahlen mit 50 Thread(s) ist korrekt.
		48. Berechnung: 4.030623 s. Die 48. Berechnung der Primzahlen mit 50 Thread(s) ist korrekt.
		49. Berechnung: 4.049015 s. Die 49. Berechnung der Primzahlen mit 50 Thread(s) ist korrekt.
		50. Berechnung: 4.037395 s. Die 50. Berechnung der Primzahlen mit 50 Thread(s) ist korrekt.
		Durchschnittliche Ausfuehrungszeit des Programmes bei 50 Durchlaeufen mit 50 Thread(s): 4.042227 s. Alle berechneten Primzahlen mit 50 Thread(s) sind korrekt.
	Berechnung mittels 100 Thread(s):
		1. Berechnung: 4.036560 s. Die 1. Berechnung der Primzahlen mit 100 Thread(s) ist korrekt.
		2. Berechnung: 4.030045 s. Die 2. Berechnung der Primzahlen mit 100 Thread(s) ist korrekt.
		3. Berechnung: 4.032243 s. Die 3. Berechnung der Primzahlen mit 100 Thread(s) ist korrekt.
		4. Berechnung: 4.019512 s. Die 4. Berechnung der Primzahlen mit 100 Thread(s) ist korrekt.
		5. Berechnung: 4.022557 s. Die 5. Berechnung der Primzahlen mit 100 Thread(s) ist korrekt.
		6. Berechnung: 4.039095 s. Die 6. Berechnung der Primzahlen mit 100 Thread(s) ist korrekt.
		7. Berechnung: 4.020039 s. Die 7. Berechnung der Primzahlen mit 100 Thread(s) ist korrekt.
		8. Berechnung: 4.023870 s. Die 8. Berechnung der Primzahlen mit 100 Thread(s) ist korrekt.
		9. Berechnung: 4.017090 s. Die 9. Berechnung der Primzahlen mit 100 Thread(s) ist korrekt.
		10. Berechnung: 4.030008 s. Die 10. Berechnung der Primzahlen mit 100 Thread(s) ist korrekt.
		11. Berechnung: 4.021387 s. Die 11. Berechnung der Primzahlen mit 100 Thread(s) ist korrekt.
		12. Berechnung: 4.034003 s. Die 12. Berechnung der Primzahlen mit 100 Thread(s) ist korrekt.
		13. Berechnung: 4.576795 s. Die 13. Berechnung der Primzahlen mit 100 Thread(s) ist korrekt.
		14. Berechnung: 5.085746 s. Die 14. Berechnung der Primzahlen mit 100 Thread(s) ist korrekt.
		15. Berechnung: 4.985543 s. Die 15. Berechnung der Primzahlen mit 100 Thread(s) ist korrekt.
		16. Berechnung: 4.283598 s. Die 16. Berechnung der Primzahlen mit 100 Thread(s) ist korrekt.
		17. Berechnung: 4.038174 s. Die 17. Berechnung der Primzahlen mit 100 Thread(s) ist korrekt.
		18. Berechnung: 4.030244 s. Die 18. Berechnung der Primzahlen mit 100 Thread(s) ist korrekt.
		19. Berechnung: 4.021415 s. Die 19. Berechnung der Primzahlen mit 100 Thread(s) ist korrekt.
		20. Berechnung: 4.062330 s. Die 20. Berechnung der Primzahlen mit 100 Thread(s) ist korrekt.
		21. Berechnung: 4.064136 s. Die 21. Berechnung der Primzahlen mit 100 Thread(s) ist korrekt.
		22. Berechnung: 4.034675 s. Die 22. Berechnung der Primzahlen mit 100 Thread(s) ist korrekt.
		23. Berechnung: 4.024324 s. Die 23. Berechnung der Primzahlen mit 100 Thread(s) ist korrekt.
		24. Berechnung: 4.055448 s. Die 24. Berechnung der Primzahlen mit 100 Thread(s) ist korrekt.
		25. Berechnung: 4.016514 s. Die 25. Berechnung der Primzahlen mit 100 Thread(s) ist korrekt.
		26. Berechnung: 4.047580 s. Die 26. Berechnung der Primzahlen mit 100 Thread(s) ist korrekt.
		27. Berechnung: 4.037895 s. Die 27. Berechnung der Primzahlen mit 100 Thread(s) ist korrekt.
		28. Berechnung: 4.033735 s. Die 28. Berechnung der Primzahlen mit 100 Thread(s) ist korrekt.
		29. Berechnung: 4.022217 s. Die 29. Berechnung der Primzahlen mit 100 Thread(s) ist korrekt.
		30. Berechnung: 4.037149 s. Die 30. Berechnung der Primzahlen mit 100 Thread(s) ist korrekt.
		31. Berechnung: 4.046211 s. Die 31. Berechnung der Primzahlen mit 100 Thread(s) ist korrekt.
		32. Berechnung: 4.020390 s. Die 32. Berechnung der Primzahlen mit 100 Thread(s) ist korrekt.
		33. Berechnung: 4.038956 s. Die 33. Berechnung der Primzahlen mit 100 Thread(s) ist korrekt.
		34. Berechnung: 4.128992 s. Die 34. Berechnung der Primzahlen mit 100 Thread(s) ist korrekt.
		35. Berechnung: 4.040746 s. Die 35. Berechnung der Primzahlen mit 100 Thread(s) ist korrekt.
		36. Berechnung: 4.024233 s. Die 36. Berechnung der Primzahlen mit 100 Thread(s) ist korrekt.
		37. Berechnung: 4.010472 s. Die 37. Berechnung der Primzahlen mit 100 Thread(s) ist korrekt.
		38. Berechnung: 4.025886 s. Die 38. Berechnung der Primzahlen mit 100 Thread(s) ist korrekt.
		39. Berechnung: 4.037797 s. Die 39. Berechnung der Primzahlen mit 100 Thread(s) ist korrekt.
		40. Berechnung: 4.040588 s. Die 40. Berechnung der Primzahlen mit 100 Thread(s) ist korrekt.
		41. Berechnung: 4.016180 s. Die 41. Berechnung der Primzahlen mit 100 Thread(s) ist korrekt.
		42. Berechnung: 4.045930 s. Die 42. Berechnung der Primzahlen mit 100 Thread(s) ist korrekt.
		43. Berechnung: 4.016557 s. Die 43. Berechnung der Primzahlen mit 100 Thread(s) ist korrekt.
		44. Berechnung: 4.020414 s. Die 44. Berechnung der Primzahlen mit 100 Thread(s) ist korrekt.
		45. Berechnung: 4.162013 s. Die 45. Berechnung der Primzahlen mit 100 Thread(s) ist korrekt.
		46. Berechnung: 4.028289 s. Die 46. Berechnung der Primzahlen mit 100 Thread(s) ist korrekt.
		47. Berechnung: 4.015060 s. Die 47. Berechnung der Primzahlen mit 100 Thread(s) ist korrekt.
		48. Berechnung: 4.021350 s. Die 48. Berechnung der Primzahlen mit 100 Thread(s) ist korrekt.
		49. Berechnung: 4.036613 s. Die 49. Berechnung der Primzahlen mit 100 Thread(s) ist korrekt.
		50. Berechnung: 4.034340 s. Die 50. Berechnung der Primzahlen mit 100 Thread(s) ist korrekt.
		Durchschnittliche Ausfuehrungszeit des Programmes bei 50 Durchlaeufen mit 100 Thread(s): 4.091899 s. Alle berechneten Primzahlen mit 100 Thread(s) sind korrekt.
	Berechnung mittels 150 Thread(s):
		1. Berechnung: 4.049479 s. Die 1. Berechnung der Primzahlen mit 150 Thread(s) ist korrekt.
		2. Berechnung: 4.044294 s. Die 2. Berechnung der Primzahlen mit 150 Thread(s) ist korrekt.
		3. Berechnung: 4.033501 s. Die 3. Berechnung der Primzahlen mit 150 Thread(s) ist korrekt.
		4. Berechnung: 4.033895 s. Die 4. Berechnung der Primzahlen mit 150 Thread(s) ist korrekt.
		5. Berechnung: 4.046449 s. Die 5. Berechnung der Primzahlen mit 150 Thread(s) ist korrekt.
		6. Berechnung: 4.045734 s. Die 6. Berechnung der Primzahlen mit 150 Thread(s) ist korrekt.
		7. Berechnung: 4.051339 s. Die 7. Berechnung der Primzahlen mit 150 Thread(s) ist korrekt.
		8. Berechnung: 4.027046 s. Die 8. Berechnung der Primzahlen mit 150 Thread(s) ist korrekt.
		9. Berechnung: 4.048858 s. Die 9. Berechnung der Primzahlen mit 150 Thread(s) ist korrekt.
		10. Berechnung: 4.042423 s. Die 10. Berechnung der Primzahlen mit 150 Thread(s) ist korrekt.
		11. Berechnung: 4.027215 s. Die 11. Berechnung der Primzahlen mit 150 Thread(s) ist korrekt.
		12. Berechnung: 4.021861 s. Die 12. Berechnung der Primzahlen mit 150 Thread(s) ist korrekt.
		13. Berechnung: 4.073452 s. Die 13. Berechnung der Primzahlen mit 150 Thread(s) ist korrekt.
		14. Berechnung: 4.024060 s. Die 14. Berechnung der Primzahlen mit 150 Thread(s) ist korrekt.
		15. Berechnung: 4.074197 s. Die 15. Berechnung der Primzahlen mit 150 Thread(s) ist korrekt.
		16. Berechnung: 4.030878 s. Die 16. Berechnung der Primzahlen mit 150 Thread(s) ist korrekt.
		17. Berechnung: 4.033616 s. Die 17. Berechnung der Primzahlen mit 150 Thread(s) ist korrekt.
		18. Berechnung: 4.065299 s. Die 18. Berechnung der Primzahlen mit 150 Thread(s) ist korrekt.
		19. Berechnung: 4.015673 s. Die 19. Berechnung der Primzahlen mit 150 Thread(s) ist korrekt.
		20. Berechnung: 4.053105 s. Die 20. Berechnung der Primzahlen mit 150 Thread(s) ist korrekt.
		21. Berechnung: 4.040424 s. Die 21. Berechnung der Primzahlen mit 150 Thread(s) ist korrekt.
		22. Berechnung: 4.051964 s. Die 22. Berechnung der Primzahlen mit 150 Thread(s) ist korrekt.
		23. Berechnung: 4.048418 s. Die 23. Berechnung der Primzahlen mit 150 Thread(s) ist korrekt.
		24. Berechnung: 4.032388 s. Die 24. Berechnung der Primzahlen mit 150 Thread(s) ist korrekt.
		25. Berechnung: 4.057263 s. Die 25. Berechnung der Primzahlen mit 150 Thread(s) ist korrekt.
		26. Berechnung: 4.041232 s. Die 26. Berechnung der Primzahlen mit 150 Thread(s) ist korrekt.
		27. Berechnung: 4.050359 s. Die 27. Berechnung der Primzahlen mit 150 Thread(s) ist korrekt.
		28. Berechnung: 4.044749 s. Die 28. Berechnung der Primzahlen mit 150 Thread(s) ist korrekt.
		29. Berechnung: 4.054733 s. Die 29. Berechnung der Primzahlen mit 150 Thread(s) ist korrekt.
		30. Berechnung: 4.035294 s. Die 30. Berechnung der Primzahlen mit 150 Thread(s) ist korrekt.
		31. Berechnung: 4.049039 s. Die 31. Berechnung der Primzahlen mit 150 Thread(s) ist korrekt.
		32. Berechnung: 4.018768 s. Die 32. Berechnung der Primzahlen mit 150 Thread(s) ist korrekt.
		33. Berechnung: 4.057316 s. Die 33. Berechnung der Primzahlen mit 150 Thread(s) ist korrekt.
		34. Berechnung: 4.034222 s. Die 34. Berechnung der Primzahlen mit 150 Thread(s) ist korrekt.
		35. Berechnung: 4.061450 s. Die 35. Berechnung der Primzahlen mit 150 Thread(s) ist korrekt.
		36. Berechnung: 4.039237 s. Die 36. Berechnung der Primzahlen mit 150 Thread(s) ist korrekt.
		37. Berechnung: 4.062702 s. Die 37. Berechnung der Primzahlen mit 150 Thread(s) ist korrekt.
		38. Berechnung: 4.261665 s. Die 38. Berechnung der Primzahlen mit 150 Thread(s) ist korrekt.
		39. Berechnung: 4.053474 s. Die 39. Berechnung der Primzahlen mit 150 Thread(s) ist korrekt.
		40. Berechnung: 4.052843 s. Die 40. Berechnung der Primzahlen mit 150 Thread(s) ist korrekt.
		41. Berechnung: 4.016718 s. Die 41. Berechnung der Primzahlen mit 150 Thread(s) ist korrekt.
		42. Berechnung: 4.130716 s. Die 42. Berechnung der Primzahlen mit 150 Thread(s) ist korrekt.
		43. Berechnung: 4.051192 s. Die 43. Berechnung der Primzahlen mit 150 Thread(s) ist korrekt.
		44. Berechnung: 4.039531 s. Die 44. Berechnung der Primzahlen mit 150 Thread(s) ist korrekt.
		45. Berechnung: 4.041962 s. Die 45. Berechnung der Primzahlen mit 150 Thread(s) ist korrekt.
		46. Berechnung: 4.081472 s. Die 46. Berechnung der Primzahlen mit 150 Thread(s) ist korrekt.
		47. Berechnung: 4.042643 s. Die 47. Berechnung der Primzahlen mit 150 Thread(s) ist korrekt.
		48. Berechnung: 4.016351 s. Die 48. Berechnung der Primzahlen mit 150 Thread(s) ist korrekt.
		49. Berechnung: 4.197602 s. Die 49. Berechnung der Primzahlen mit 150 Thread(s) ist korrekt.
		50. Berechnung: 4.035042 s. Die 50. Berechnung der Primzahlen mit 150 Thread(s) ist korrekt.
		Durchschnittliche Ausfuehrungszeit des Programmes bei 50 Durchlaeufen mit 150 Thread(s): 4.052863 s. Alle berechneten Primzahlen mit 150 Thread(s) sind korrekt.
	Berechnung mittels 200 Thread(s):
		1. Berechnung: 4.026473 s. Die 1. Berechnung der Primzahlen mit 200 Thread(s) ist korrekt.
		2. Berechnung: 4.042151 s. Die 2. Berechnung der Primzahlen mit 200 Thread(s) ist korrekt.
		3. Berechnung: 4.026339 s. Die 3. Berechnung der Primzahlen mit 200 Thread(s) ist korrekt.
		4. Berechnung: 4.022208 s. Die 4. Berechnung der Primzahlen mit 200 Thread(s) ist korrekt.
		5. Berechnung: 4.096999 s. Die 5. Berechnung der Primzahlen mit 200 Thread(s) ist korrekt.
		6. Berechnung: 4.023419 s. Die 6. Berechnung der Primzahlen mit 200 Thread(s) ist korrekt.
		7. Berechnung: 4.019434 s. Die 7. Berechnung der Primzahlen mit 200 Thread(s) ist korrekt.
		8. Berechnung: 4.025642 s. Die 8. Berechnung der Primzahlen mit 200 Thread(s) ist korrekt.
		9. Berechnung: 4.044162 s. Die 9. Berechnung der Primzahlen mit 200 Thread(s) ist korrekt.
		10. Berechnung: 4.033960 s. Die 10. Berechnung der Primzahlen mit 200 Thread(s) ist korrekt.
		11. Berechnung: 4.029853 s. Die 11. Berechnung der Primzahlen mit 200 Thread(s) ist korrekt.
		12. Berechnung: 4.020052 s. Die 12. Berechnung der Primzahlen mit 200 Thread(s) ist korrekt.
		13. Berechnung: 4.019388 s. Die 13. Berechnung der Primzahlen mit 200 Thread(s) ist korrekt.
		14. Berechnung: 4.026422 s. Die 14. Berechnung der Primzahlen mit 200 Thread(s) ist korrekt.
		15. Berechnung: 4.015203 s. Die 15. Berechnung der Primzahlen mit 200 Thread(s) ist korrekt.
		16. Berechnung: 4.028935 s. Die 16. Berechnung der Primzahlen mit 200 Thread(s) ist korrekt.
		17. Berechnung: 4.055765 s. Die 17. Berechnung der Primzahlen mit 200 Thread(s) ist korrekt.
		18. Berechnung: 4.038472 s. Die 18. Berechnung der Primzahlen mit 200 Thread(s) ist korrekt.
		19. Berechnung: 4.055130 s. Die 19. Berechnung der Primzahlen mit 200 Thread(s) ist korrekt.
		20. Berechnung: 4.026309 s. Die 20. Berechnung der Primzahlen mit 200 Thread(s) ist korrekt.
		21. Berechnung: 4.016288 s. Die 21. Berechnung der Primzahlen mit 200 Thread(s) ist korrekt.
		22. Berechnung: 4.026412 s. Die 22. Berechnung der Primzahlen mit 200 Thread(s) ist korrekt.
		23. Berechnung: 4.026476 s. Die 23. Berechnung der Primzahlen mit 200 Thread(s) ist korrekt.
		24. Berechnung: 4.040071 s. Die 24. Berechnung der Primzahlen mit 200 Thread(s) ist korrekt.
		25. Berechnung: 4.020577 s. Die 25. Berechnung der Primzahlen mit 200 Thread(s) ist korrekt.
		26. Berechnung: 4.023684 s. Die 26. Berechnung der Primzahlen mit 200 Thread(s) ist korrekt.
		27. Berechnung: 4.029473 s. Die 27. Berechnung der Primzahlen mit 200 Thread(s) ist korrekt.
		28. Berechnung: 4.022405 s. Die 28. Berechnung der Primzahlen mit 200 Thread(s) ist korrekt.
		29. Berechnung: 4.034159 s. Die 29. Berechnung der Primzahlen mit 200 Thread(s) ist korrekt.
		30. Berechnung: 4.030138 s. Die 30. Berechnung der Primzahlen mit 200 Thread(s) ist korrekt.
		31. Berechnung: 4.016558 s. Die 31. Berechnung der Primzahlen mit 200 Thread(s) ist korrekt.
		32. Berechnung: 4.041196 s. Die 32. Berechnung der Primzahlen mit 200 Thread(s) ist korrekt.
		33. Berechnung: 4.052659 s. Die 33. Berechnung der Primzahlen mit 200 Thread(s) ist korrekt.
		34. Berechnung: 4.023343 s. Die 34. Berechnung der Primzahlen mit 200 Thread(s) ist korrekt.
		35. Berechnung: 4.028666 s. Die 35. Berechnung der Primzahlen mit 200 Thread(s) ist korrekt.
		36. Berechnung: 4.020613 s. Die 36. Berechnung der Primzahlen mit 200 Thread(s) ist korrekt.
		37. Berechnung: 4.025058 s. Die 37. Berechnung der Primzahlen mit 200 Thread(s) ist korrekt.
		38. Berechnung: 4.036430 s. Die 38. Berechnung der Primzahlen mit 200 Thread(s) ist korrekt.
		39. Berechnung: 4.045278 s. Die 39. Berechnung der Primzahlen mit 200 Thread(s) ist korrekt.
		40. Berechnung: 4.028049 s. Die 40. Berechnung der Primzahlen mit 200 Thread(s) ist korrekt.
		41. Berechnung: 4.016649 s. Die 41. Berechnung der Primzahlen mit 200 Thread(s) ist korrekt.
		42. Berechnung: 4.055692 s. Die 42. Berechnung der Primzahlen mit 200 Thread(s) ist korrekt.
		43. Berechnung: 4.019519 s. Die 43. Berechnung der Primzahlen mit 200 Thread(s) ist korrekt.
		44. Berechnung: 4.048526 s. Die 44. Berechnung der Primzahlen mit 200 Thread(s) ist korrekt.
		45. Berechnung: 4.018023 s. Die 45. Berechnung der Primzahlen mit 200 Thread(s) ist korrekt.
		46. Berechnung: 4.037142 s. Die 46. Berechnung der Primzahlen mit 200 Thread(s) ist korrekt.
		47. Berechnung: 4.025082 s. Die 47. Berechnung der Primzahlen mit 200 Thread(s) ist korrekt.
		48. Berechnung: 4.017610 s. Die 48. Berechnung der Primzahlen mit 200 Thread(s) ist korrekt.
		49. Berechnung: 4.028970 s. Die 49. Berechnung der Primzahlen mit 200 Thread(s) ist korrekt.
		50. Berechnung: 4.022530 s. Die 50. Berechnung der Primzahlen mit 200 Thread(s) ist korrekt.
		Durchschnittliche Ausfuehrungszeit des Programmes bei 50 Durchlaeufen mit 200 Thread(s): 4.031072 s. Alle berechneten Primzahlen mit 200 Thread(s) sind korrekt.
	Berechnung mittels 250 Thread(s):
		1. Berechnung: 4.305189 s. Die 1. Berechnung der Primzahlen mit 250 Thread(s) ist korrekt.
		2. Berechnung: 4.028505 s. Die 2. Berechnung der Primzahlen mit 250 Thread(s) ist korrekt.
		3. Berechnung: 4.019109 s. Die 3. Berechnung der Primzahlen mit 250 Thread(s) ist korrekt.
		4. Berechnung: 4.059716 s. Die 4. Berechnung der Primzahlen mit 250 Thread(s) ist korrekt.
		5. Berechnung: 4.021251 s. Die 5. Berechnung der Primzahlen mit 250 Thread(s) ist korrekt.
		6. Berechnung: 4.018685 s. Die 6. Berechnung der Primzahlen mit 250 Thread(s) ist korrekt.
		7. Berechnung: 4.015839 s. Die 7. Berechnung der Primzahlen mit 250 Thread(s) ist korrekt.
		8. Berechnung: 4.017109 s. Die 8. Berechnung der Primzahlen mit 250 Thread(s) ist korrekt.
		9. Berechnung: 4.046454 s. Die 9. Berechnung der Primzahlen mit 250 Thread(s) ist korrekt.
		10. Berechnung: 4.019951 s. Die 10. Berechnung der Primzahlen mit 250 Thread(s) ist korrekt.
		11. Berechnung: 4.043164 s. Die 11. Berechnung der Primzahlen mit 250 Thread(s) ist korrekt.
		12. Berechnung: 4.028836 s. Die 12. Berechnung der Primzahlen mit 250 Thread(s) ist korrekt.
		13. Berechnung: 4.024575 s. Die 13. Berechnung der Primzahlen mit 250 Thread(s) ist korrekt.
		14. Berechnung: 4.018444 s. Die 14. Berechnung der Primzahlen mit 250 Thread(s) ist korrekt.
		15. Berechnung: 4.026798 s. Die 15. Berechnung der Primzahlen mit 250 Thread(s) ist korrekt.
		16. Berechnung: 4.053694 s. Die 16. Berechnung der Primzahlen mit 250 Thread(s) ist korrekt.
		17. Berechnung: 4.019682 s. Die 17. Berechnung der Primzahlen mit 250 Thread(s) ist korrekt.
		18. Berechnung: 4.022978 s. Die 18. Berechnung der Primzahlen mit 250 Thread(s) ist korrekt.
		19. Berechnung: 4.037483 s. Die 19. Berechnung der Primzahlen mit 250 Thread(s) ist korrekt.
		20. Berechnung: 4.040652 s. Die 20. Berechnung der Primzahlen mit 250 Thread(s) ist korrekt.
		21. Berechnung: 4.029131 s. Die 21. Berechnung der Primzahlen mit 250 Thread(s) ist korrekt.
		22. Berechnung: 4.025637 s. Die 22. Berechnung der Primzahlen mit 250 Thread(s) ist korrekt.
		23. Berechnung: 4.022635 s. Die 23. Berechnung der Primzahlen mit 250 Thread(s) ist korrekt.
		24. Berechnung: 4.031253 s. Die 24. Berechnung der Primzahlen mit 250 Thread(s) ist korrekt.
		25. Berechnung: 4.017172 s. Die 25. Berechnung der Primzahlen mit 250 Thread(s) ist korrekt.
		26. Berechnung: 4.034829 s. Die 26. Berechnung der Primzahlen mit 250 Thread(s) ist korrekt.
		27. Berechnung: 4.023371 s. Die 27. Berechnung der Primzahlen mit 250 Thread(s) ist korrekt.
		28. Berechnung: 4.016389 s. Die 28. Berechnung der Primzahlen mit 250 Thread(s) ist korrekt.
		29. Berechnung: 4.059821 s. Die 29. Berechnung der Primzahlen mit 250 Thread(s) ist korrekt.
		30. Berechnung: 4.018474 s. Die 30. Berechnung der Primzahlen mit 250 Thread(s) ist korrekt.
		31. Berechnung: 4.029812 s. Die 31. Berechnung der Primzahlen mit 250 Thread(s) ist korrekt.
		32. Berechnung: 4.105777 s. Die 32. Berechnung der Primzahlen mit 250 Thread(s) ist korrekt.
		33. Berechnung: 4.067585 s. Die 33. Berechnung der Primzahlen mit 250 Thread(s) ist korrekt.
		34. Berechnung: 4.041223 s. Die 34. Berechnung der Primzahlen mit 250 Thread(s) ist korrekt.
		35. Berechnung: 4.043069 s. Die 35. Berechnung der Primzahlen mit 250 Thread(s) ist korrekt.
		36. Berechnung: 4.033930 s. Die 36. Berechnung der Primzahlen mit 250 Thread(s) ist korrekt.
		37. Berechnung: 4.029911 s. Die 37. Berechnung der Primzahlen mit 250 Thread(s) ist korrekt.
		38. Berechnung: 4.028455 s. Die 38. Berechnung der Primzahlen mit 250 Thread(s) ist korrekt.
		39. Berechnung: 4.019018 s. Die 39. Berechnung der Primzahlen mit 250 Thread(s) ist korrekt.
		40. Berechnung: 4.018130 s. Die 40. Berechnung der Primzahlen mit 250 Thread(s) ist korrekt.
		41. Berechnung: 4.034740 s. Die 41. Berechnung der Primzahlen mit 250 Thread(s) ist korrekt.
		42. Berechnung: 4.023797 s. Die 42. Berechnung der Primzahlen mit 250 Thread(s) ist korrekt.
		43. Berechnung: 4.026486 s. Die 43. Berechnung der Primzahlen mit 250 Thread(s) ist korrekt.
		44. Berechnung: 4.017745 s. Die 44. Berechnung der Primzahlen mit 250 Thread(s) ist korrekt.
		45. Berechnung: 4.020855 s. Die 45. Berechnung der Primzahlen mit 250 Thread(s) ist korrekt.
		46. Berechnung: 4.038628 s. Die 46. Berechnung der Primzahlen mit 250 Thread(s) ist korrekt.
		47. Berechnung: 4.034526 s. Die 47. Berechnung der Primzahlen mit 250 Thread(s) ist korrekt.
		48. Berechnung: 4.034777 s. Die 48. Berechnung der Primzahlen mit 250 Thread(s) ist korrekt.
		49. Berechnung: 4.037678 s. Die 49. Berechnung der Primzahlen mit 250 Thread(s) ist korrekt.
		50. Berechnung: 4.036416 s. Die 50. Berechnung der Primzahlen mit 250 Thread(s) ist korrekt.
		Durchschnittliche Ausfuehrungszeit des Programmes bei 50 Durchlaeufen mit 250 Thread(s): 4.037388 s. Alle berechneten Primzahlen mit 250 Thread(s) sind korrekt.
	Berechnung mittels 300 Thread(s):
		1. Berechnung: 4.025109 s. Die 1. Berechnung der Primzahlen mit 300 Thread(s) ist korrekt.
		2. Berechnung: 4.059912 s. Die 2. Berechnung der Primzahlen mit 300 Thread(s) ist korrekt.
		3. Berechnung: 4.037186 s. Die 3. Berechnung der Primzahlen mit 300 Thread(s) ist korrekt.
		4. Berechnung: 4.039564 s. Die 4. Berechnung der Primzahlen mit 300 Thread(s) ist korrekt.
		5. Berechnung: 4.034029 s. Die 5. Berechnung der Primzahlen mit 300 Thread(s) ist korrekt.
		6. Berechnung: 4.078491 s. Die 6. Berechnung der Primzahlen mit 300 Thread(s) ist korrekt.
		7. Berechnung: 4.034781 s. Die 7. Berechnung der Primzahlen mit 300 Thread(s) ist korrekt.
		8. Berechnung: 4.045456 s. Die 8. Berechnung der Primzahlen mit 300 Thread(s) ist korrekt.
		9. Berechnung: 4.050876 s. Die 9. Berechnung der Primzahlen mit 300 Thread(s) ist korrekt.
		10. Berechnung: 4.021774 s. Die 10. Berechnung der Primzahlen mit 300 Thread(s) ist korrekt.
		11. Berechnung: 4.039654 s. Die 11. Berechnung der Primzahlen mit 300 Thread(s) ist korrekt.
		12. Berechnung: 4.112642 s. Die 12. Berechnung der Primzahlen mit 300 Thread(s) ist korrekt.
		13. Berechnung: 4.077077 s. Die 13. Berechnung der Primzahlen mit 300 Thread(s) ist korrekt.
		14. Berechnung: 4.050157 s. Die 14. Berechnung der Primzahlen mit 300 Thread(s) ist korrekt.
		15. Berechnung: 4.026755 s. Die 15. Berechnung der Primzahlen mit 300 Thread(s) ist korrekt.
		16. Berechnung: 4.091562 s. Die 16. Berechnung der Primzahlen mit 300 Thread(s) ist korrekt.
		17. Berechnung: 4.058217 s. Die 17. Berechnung der Primzahlen mit 300 Thread(s) ist korrekt.
		18. Berechnung: 4.066663 s. Die 18. Berechnung der Primzahlen mit 300 Thread(s) ist korrekt.
		19. Berechnung: 4.059154 s. Die 19. Berechnung der Primzahlen mit 300 Thread(s) ist korrekt.
		20. Berechnung: 4.051894 s. Die 20. Berechnung der Primzahlen mit 300 Thread(s) ist korrekt.
		21. Berechnung: 4.094210 s. Die 21. Berechnung der Primzahlen mit 300 Thread(s) ist korrekt.
		22. Berechnung: 4.053329 s. Die 22. Berechnung der Primzahlen mit 300 Thread(s) ist korrekt.
		23. Berechnung: 4.055556 s. Die 23. Berechnung der Primzahlen mit 300 Thread(s) ist korrekt.
		24. Berechnung: 4.033287 s. Die 24. Berechnung der Primzahlen mit 300 Thread(s) ist korrekt.
		25. Berechnung: 4.047470 s. Die 25. Berechnung der Primzahlen mit 300 Thread(s) ist korrekt.
		26. Berechnung: 4.046812 s. Die 26. Berechnung der Primzahlen mit 300 Thread(s) ist korrekt.
		27. Berechnung: 4.046408 s. Die 27. Berechnung der Primzahlen mit 300 Thread(s) ist korrekt.
		28. Berechnung: 4.094320 s. Die 28. Berechnung der Primzahlen mit 300 Thread(s) ist korrekt.
		29. Berechnung: 4.038368 s. Die 29. Berechnung der Primzahlen mit 300 Thread(s) ist korrekt.
		30. Berechnung: 4.045045 s. Die 30. Berechnung der Primzahlen mit 300 Thread(s) ist korrekt.
		31. Berechnung: 4.034873 s. Die 31. Berechnung der Primzahlen mit 300 Thread(s) ist korrekt.
		32. Berechnung: 4.048799 s. Die 32. Berechnung der Primzahlen mit 300 Thread(s) ist korrekt.
		33. Berechnung: 4.046936 s. Die 33. Berechnung der Primzahlen mit 300 Thread(s) ist korrekt.
		34. Berechnung: 4.041476 s. Die 34. Berechnung der Primzahlen mit 300 Thread(s) ist korrekt.
		35. Berechnung: 4.045424 s. Die 35. Berechnung der Primzahlen mit 300 Thread(s) ist korrekt.
		36. Berechnung: 4.087840 s. Die 36. Berechnung der Primzahlen mit 300 Thread(s) ist korrekt.
		37. Berechnung: 4.069708 s. Die 37. Berechnung der Primzahlen mit 300 Thread(s) ist korrekt.
		38. Berechnung: 4.039864 s. Die 38. Berechnung der Primzahlen mit 300 Thread(s) ist korrekt.
		39. Berechnung: 4.041348 s. Die 39. Berechnung der Primzahlen mit 300 Thread(s) ist korrekt.
		40. Berechnung: 4.212232 s. Die 40. Berechnung der Primzahlen mit 300 Thread(s) ist korrekt.
		41. Berechnung: 4.051743 s. Die 41. Berechnung der Primzahlen mit 300 Thread(s) ist korrekt.
		42. Berechnung: 4.042042 s. Die 42. Berechnung der Primzahlen mit 300 Thread(s) ist korrekt.
		43. Berechnung: 4.176818 s. Die 43. Berechnung der Primzahlen mit 300 Thread(s) ist korrekt.
		44. Berechnung: 4.073538 s. Die 44. Berechnung der Primzahlen mit 300 Thread(s) ist korrekt.
		45. Berechnung: 4.033397 s. Die 45. Berechnung der Primzahlen mit 300 Thread(s) ist korrekt.
		46. Berechnung: 4.037504 s. Die 46. Berechnung der Primzahlen mit 300 Thread(s) ist korrekt.
		47. Berechnung: 4.035250 s. Die 47. Berechnung der Primzahlen mit 300 Thread(s) ist korrekt.
		48. Berechnung: 4.046159 s. Die 48. Berechnung der Primzahlen mit 300 Thread(s) ist korrekt.
		49. Berechnung: 4.046775 s. Die 49. Berechnung der Primzahlen mit 300 Thread(s) ist korrekt.
		50. Berechnung: 4.062560 s. Die 50. Berechnung der Primzahlen mit 300 Thread(s) ist korrekt.
		Durchschnittliche Ausfuehrungszeit des Programmes bei 50 Durchlaeufen mit 300 Thread(s): 4.057801 s. Alle berechneten Primzahlen mit 300 Thread(s) sind korrekt.
	Berechnung mittels 350 Thread(s):
		1. Berechnung: 4.102084 s. Die 1. Berechnung der Primzahlen mit 350 Thread(s) ist korrekt.
		2. Berechnung: 4.091569 s. Die 2. Berechnung der Primzahlen mit 350 Thread(s) ist korrekt.
		3. Berechnung: 4.062429 s. Die 3. Berechnung der Primzahlen mit 350 Thread(s) ist korrekt.
		4. Berechnung: 4.085290 s. Die 4. Berechnung der Primzahlen mit 350 Thread(s) ist korrekt.
		5. Berechnung: 4.101905 s. Die 5. Berechnung der Primzahlen mit 350 Thread(s) ist korrekt.
		6. Berechnung: 4.081877 s. Die 6. Berechnung der Primzahlen mit 350 Thread(s) ist korrekt.
		7. Berechnung: 4.121670 s. Die 7. Berechnung der Primzahlen mit 350 Thread(s) ist korrekt.
		8. Berechnung: 4.064140 s. Die 8. Berechnung der Primzahlen mit 350 Thread(s) ist korrekt.
		9. Berechnung: 4.077199 s. Die 9. Berechnung der Primzahlen mit 350 Thread(s) ist korrekt.
		10. Berechnung: 4.078780 s. Die 10. Berechnung der Primzahlen mit 350 Thread(s) ist korrekt.
		11. Berechnung: 4.079466 s. Die 11. Berechnung der Primzahlen mit 350 Thread(s) ist korrekt.
		12. Berechnung: 4.062171 s. Die 12. Berechnung der Primzahlen mit 350 Thread(s) ist korrekt.
		13. Berechnung: 4.092811 s. Die 13. Berechnung der Primzahlen mit 350 Thread(s) ist korrekt.
		14. Berechnung: 4.067535 s. Die 14. Berechnung der Primzahlen mit 350 Thread(s) ist korrekt.
		15. Berechnung: 4.107531 s. Die 15. Berechnung der Primzahlen mit 350 Thread(s) ist korrekt.
		16. Berechnung: 4.090838 s. Die 16. Berechnung der Primzahlen mit 350 Thread(s) ist korrekt.
		17. Berechnung: 4.066499 s. Die 17. Berechnung der Primzahlen mit 350 Thread(s) ist korrekt.
		18. Berechnung: 4.073990 s. Die 18. Berechnung der Primzahlen mit 350 Thread(s) ist korrekt.
		19. Berechnung: 4.082062 s. Die 19. Berechnung der Primzahlen mit 350 Thread(s) ist korrekt.
		20. Berechnung: 4.081580 s. Die 20. Berechnung der Primzahlen mit 350 Thread(s) ist korrekt.
		21. Berechnung: 4.098205 s. Die 21. Berechnung der Primzahlen mit 350 Thread(s) ist korrekt.
		22. Berechnung: 4.090871 s. Die 22. Berechnung der Primzahlen mit 350 Thread(s) ist korrekt.
		23. Berechnung: 4.066848 s. Die 23. Berechnung der Primzahlen mit 350 Thread(s) ist korrekt.
		24. Berechnung: 4.042979 s. Die 24. Berechnung der Primzahlen mit 350 Thread(s) ist korrekt.
		25. Berechnung: 4.081050 s. Die 25. Berechnung der Primzahlen mit 350 Thread(s) ist korrekt.
		26. Berechnung: 4.074317 s. Die 26. Berechnung der Primzahlen mit 350 Thread(s) ist korrekt.
		27. Berechnung: 4.116156 s. Die 27. Berechnung der Primzahlen mit 350 Thread(s) ist korrekt.
		28. Berechnung: 4.092409 s. Die 28. Berechnung der Primzahlen mit 350 Thread(s) ist korrekt.
		29. Berechnung: 4.074904 s. Die 29. Berechnung der Primzahlen mit 350 Thread(s) ist korrekt.
		30. Berechnung: 4.078951 s. Die 30. Berechnung der Primzahlen mit 350 Thread(s) ist korrekt.
		31. Berechnung: 4.064908 s. Die 31. Berechnung der Primzahlen mit 350 Thread(s) ist korrekt.
		32. Berechnung: 4.079893 s. Die 32. Berechnung der Primzahlen mit 350 Thread(s) ist korrekt.
		33. Berechnung: 4.066143 s. Die 33. Berechnung der Primzahlen mit 350 Thread(s) ist korrekt.
		34. Berechnung: 4.095717 s. Die 34. Berechnung der Primzahlen mit 350 Thread(s) ist korrekt.
		35. Berechnung: 4.102280 s. Die 35. Berechnung der Primzahlen mit 350 Thread(s) ist korrekt.
		36. Berechnung: 4.078615 s. Die 36. Berechnung der Primzahlen mit 350 Thread(s) ist korrekt.
		37. Berechnung: 4.090678 s. Die 37. Berechnung der Primzahlen mit 350 Thread(s) ist korrekt.
		38. Berechnung: 4.048447 s. Die 38. Berechnung der Primzahlen mit 350 Thread(s) ist korrekt.
		39. Berechnung: 4.119350 s. Die 39. Berechnung der Primzahlen mit 350 Thread(s) ist korrekt.
		40. Berechnung: 4.067100 s. Die 40. Berechnung der Primzahlen mit 350 Thread(s) ist korrekt.
		41. Berechnung: 4.081985 s. Die 41. Berechnung der Primzahlen mit 350 Thread(s) ist korrekt.
		42. Berechnung: 4.091565 s. Die 42. Berechnung der Primzahlen mit 350 Thread(s) ist korrekt.
		43. Berechnung: 4.086666 s. Die 43. Berechnung der Primzahlen mit 350 Thread(s) ist korrekt.
		44. Berechnung: 4.073659 s. Die 44. Berechnung der Primzahlen mit 350 Thread(s) ist korrekt.
		45. Berechnung: 4.077096 s. Die 45. Berechnung der Primzahlen mit 350 Thread(s) ist korrekt.
		46. Berechnung: 4.321870 s. Die 46. Berechnung der Primzahlen mit 350 Thread(s) ist korrekt.
		47. Berechnung: 4.079721 s. Die 47. Berechnung der Primzahlen mit 350 Thread(s) ist korrekt.
		48. Berechnung: 4.079311 s. Die 48. Berechnung der Primzahlen mit 350 Thread(s) ist korrekt.
		49. Berechnung: 4.057944 s. Die 49. Berechnung der Primzahlen mit 350 Thread(s) ist korrekt.
		50. Berechnung: 4.076370 s. Die 50. Berechnung der Primzahlen mit 350 Thread(s) ist korrekt.
		Durchschnittliche Ausfuehrungszeit des Programmes bei 50 Durchlaeufen mit 350 Thread(s): 4.086549 s. Alle berechneten Primzahlen mit 350 Thread(s) sind korrekt.
	Berechnung mittels 400 Thread(s):
		1. Berechnung: 4.030611 s. Die 1. Berechnung der Primzahlen mit 400 Thread(s) ist korrekt.
		2. Berechnung: 4.049153 s. Die 2. Berechnung der Primzahlen mit 400 Thread(s) ist korrekt.
		3. Berechnung: 4.027843 s. Die 3. Berechnung der Primzahlen mit 400 Thread(s) ist korrekt.
		4. Berechnung: 4.034465 s. Die 4. Berechnung der Primzahlen mit 400 Thread(s) ist korrekt.
		5. Berechnung: 4.034698 s. Die 5. Berechnung der Primzahlen mit 400 Thread(s) ist korrekt.
		6. Berechnung: 4.064436 s. Die 6. Berechnung der Primzahlen mit 400 Thread(s) ist korrekt.
		7. Berechnung: 4.184010 s. Die 7. Berechnung der Primzahlen mit 400 Thread(s) ist korrekt.
		8. Berechnung: 5.248204 s. Die 8. Berechnung der Primzahlen mit 400 Thread(s) ist korrekt.
		9. Berechnung: 5.069568 s. Die 9. Berechnung der Primzahlen mit 400 Thread(s) ist korrekt.
		10. Berechnung: 4.649714 s. Die 10. Berechnung der Primzahlen mit 400 Thread(s) ist korrekt.
		11. Berechnung: 4.040117 s. Die 11. Berechnung der Primzahlen mit 400 Thread(s) ist korrekt.
		12. Berechnung: 4.028655 s. Die 12. Berechnung der Primzahlen mit 400 Thread(s) ist korrekt.
		13. Berechnung: 4.019796 s. Die 13. Berechnung der Primzahlen mit 400 Thread(s) ist korrekt.
		14. Berechnung: 4.045856 s. Die 14. Berechnung der Primzahlen mit 400 Thread(s) ist korrekt.
		15. Berechnung: 4.030011 s. Die 15. Berechnung der Primzahlen mit 400 Thread(s) ist korrekt.
		16. Berechnung: 4.044691 s. Die 16. Berechnung der Primzahlen mit 400 Thread(s) ist korrekt.
		17. Berechnung: 4.048109 s. Die 17. Berechnung der Primzahlen mit 400 Thread(s) ist korrekt.
		18. Berechnung: 4.054884 s. Die 18. Berechnung der Primzahlen mit 400 Thread(s) ist korrekt.
		19. Berechnung: 4.024386 s. Die 19. Berechnung der Primzahlen mit 400 Thread(s) ist korrekt.
		20. Berechnung: 4.029538 s. Die 20. Berechnung der Primzahlen mit 400 Thread(s) ist korrekt.
		21. Berechnung: 4.038125 s. Die 21. Berechnung der Primzahlen mit 400 Thread(s) ist korrekt.
		22. Berechnung: 4.038668 s. Die 22. Berechnung der Primzahlen mit 400 Thread(s) ist korrekt.
		23. Berechnung: 4.027440 s. Die 23. Berechnung der Primzahlen mit 400 Thread(s) ist korrekt.
		24. Berechnung: 4.062554 s. Die 24. Berechnung der Primzahlen mit 400 Thread(s) ist korrekt.
		25. Berechnung: 4.038987 s. Die 25. Berechnung der Primzahlen mit 400 Thread(s) ist korrekt.
		26. Berechnung: 4.078829 s. Die 26. Berechnung der Primzahlen mit 400 Thread(s) ist korrekt.
		27. Berechnung: 4.033955 s. Die 27. Berechnung der Primzahlen mit 400 Thread(s) ist korrekt.
		28. Berechnung: 4.104313 s. Die 28. Berechnung der Primzahlen mit 400 Thread(s) ist korrekt.
		29. Berechnung: 4.076108 s. Die 29. Berechnung der Primzahlen mit 400 Thread(s) ist korrekt.
		30. Berechnung: 4.031383 s. Die 30. Berechnung der Primzahlen mit 400 Thread(s) ist korrekt.
		31. Berechnung: 4.057056 s. Die 31. Berechnung der Primzahlen mit 400 Thread(s) ist korrekt.
		32. Berechnung: 4.026269 s. Die 32. Berechnung der Primzahlen mit 400 Thread(s) ist korrekt.
		33. Berechnung: 4.052706 s. Die 33. Berechnung der Primzahlen mit 400 Thread(s) ist korrekt.
		34. Berechnung: 4.040228 s. Die 34. Berechnung der Primzahlen mit 400 Thread(s) ist korrekt.
		35. Berechnung: 4.036261 s. Die 35. Berechnung der Primzahlen mit 400 Thread(s) ist korrekt.
		36. Berechnung: 4.026190 s. Die 36. Berechnung der Primzahlen mit 400 Thread(s) ist korrekt.
		37. Berechnung: 4.019945 s. Die 37. Berechnung der Primzahlen mit 400 Thread(s) ist korrekt.
		38. Berechnung: 4.042199 s. Die 38. Berechnung der Primzahlen mit 400 Thread(s) ist korrekt.
		39. Berechnung: 4.038285 s. Die 39. Berechnung der Primzahlen mit 400 Thread(s) ist korrekt.
		40. Berechnung: 4.134853 s. Die 40. Berechnung der Primzahlen mit 400 Thread(s) ist korrekt.
		41. Berechnung: 4.029262 s. Die 41. Berechnung der Primzahlen mit 400 Thread(s) ist korrekt.
		42. Berechnung: 4.033044 s. Die 42. Berechnung der Primzahlen mit 400 Thread(s) ist korrekt.
		43. Berechnung: 4.024635 s. Die 43. Berechnung der Primzahlen mit 400 Thread(s) ist korrekt.
		44. Berechnung: 4.050631 s. Die 44. Berechnung der Primzahlen mit 400 Thread(s) ist korrekt.
		45. Berechnung: 4.030299 s. Die 45. Berechnung der Primzahlen mit 400 Thread(s) ist korrekt.
		46. Berechnung: 4.045707 s. Die 46. Berechnung der Primzahlen mit 400 Thread(s) ist korrekt.
		47. Berechnung: 4.028469 s. Die 47. Berechnung der Primzahlen mit 400 Thread(s) ist korrekt.
		48. Berechnung: 4.045281 s. Die 48. Berechnung der Primzahlen mit 400 Thread(s) ist korrekt.
		49. Berechnung: 4.038719 s. Die 49. Berechnung der Primzahlen mit 400 Thread(s) ist korrekt.
		50. Berechnung: 4.041322 s. Die 50. Berechnung der Primzahlen mit 400 Thread(s) ist korrekt.
		Durchschnittliche Ausfuehrungszeit des Programmes bei 50 Durchlaeufen mit 400 Thread(s): 4.102609 s. Alle berechneten Primzahlen mit 400 Thread(s) sind korrekt.
	Berechnung mittels 450 Thread(s):
		1. Berechnung: 4.056785 s. Die 1. Berechnung der Primzahlen mit 450 Thread(s) ist korrekt.
		2. Berechnung: 4.046717 s. Die 2. Berechnung der Primzahlen mit 450 Thread(s) ist korrekt.
		3. Berechnung: 4.050367 s. Die 3. Berechnung der Primzahlen mit 450 Thread(s) ist korrekt.
		4. Berechnung: 4.082890 s. Die 4. Berechnung der Primzahlen mit 450 Thread(s) ist korrekt.
		5. Berechnung: 4.036876 s. Die 5. Berechnung der Primzahlen mit 450 Thread(s) ist korrekt.
		6. Berechnung: 4.100160 s. Die 6. Berechnung der Primzahlen mit 450 Thread(s) ist korrekt.
		7. Berechnung: 4.058863 s. Die 7. Berechnung der Primzahlen mit 450 Thread(s) ist korrekt.
		8. Berechnung: 4.029388 s. Die 8. Berechnung der Primzahlen mit 450 Thread(s) ist korrekt.
		9. Berechnung: 4.074039 s. Die 9. Berechnung der Primzahlen mit 450 Thread(s) ist korrekt.
		10. Berechnung: 4.039340 s. Die 10. Berechnung der Primzahlen mit 450 Thread(s) ist korrekt.
		11. Berechnung: 4.041548 s. Die 11. Berechnung der Primzahlen mit 450 Thread(s) ist korrekt.
		12. Berechnung: 4.038879 s. Die 12. Berechnung der Primzahlen mit 450 Thread(s) ist korrekt.
		13. Berechnung: 4.059370 s. Die 13. Berechnung der Primzahlen mit 450 Thread(s) ist korrekt.
		14. Berechnung: 4.037142 s. Die 14. Berechnung der Primzahlen mit 450 Thread(s) ist korrekt.
		15. Berechnung: 4.032533 s. Die 15. Berechnung der Primzahlen mit 450 Thread(s) ist korrekt.
		16. Berechnung: 4.043582 s. Die 16. Berechnung der Primzahlen mit 450 Thread(s) ist korrekt.
		17. Berechnung: 4.061555 s. Die 17. Berechnung der Primzahlen mit 450 Thread(s) ist korrekt.
		18. Berechnung: 4.044992 s. Die 18. Berechnung der Primzahlen mit 450 Thread(s) ist korrekt.
		19. Berechnung: 4.075494 s. Die 19. Berechnung der Primzahlen mit 450 Thread(s) ist korrekt.
		20. Berechnung: 4.063724 s. Die 20. Berechnung der Primzahlen mit 450 Thread(s) ist korrekt.
		21. Berechnung: 4.060346 s. Die 21. Berechnung der Primzahlen mit 450 Thread(s) ist korrekt.
		22. Berechnung: 4.049891 s. Die 22. Berechnung der Primzahlen mit 450 Thread(s) ist korrekt.
		23. Berechnung: 4.043639 s. Die 23. Berechnung der Primzahlen mit 450 Thread(s) ist korrekt.
		24. Berechnung: 4.050019 s. Die 24. Berechnung der Primzahlen mit 450 Thread(s) ist korrekt.
		25. Berechnung: 4.064064 s. Die 25. Berechnung der Primzahlen mit 450 Thread(s) ist korrekt.
		26. Berechnung: 4.064073 s. Die 26. Berechnung der Primzahlen mit 450 Thread(s) ist korrekt.
		27. Berechnung: 4.050376 s. Die 27. Berechnung der Primzahlen mit 450 Thread(s) ist korrekt.
		28. Berechnung: 4.069605 s. Die 28. Berechnung der Primzahlen mit 450 Thread(s) ist korrekt.
		29. Berechnung: 4.055505 s. Die 29. Berechnung der Primzahlen mit 450 Thread(s) ist korrekt.
		30. Berechnung: 4.063554 s. Die 30. Berechnung der Primzahlen mit 450 Thread(s) ist korrekt.
		31. Berechnung: 4.063656 s. Die 31. Berechnung der Primzahlen mit 450 Thread(s) ist korrekt.
		32. Berechnung: 4.049316 s. Die 32. Berechnung der Primzahlen mit 450 Thread(s) ist korrekt.
		33. Berechnung: 4.073761 s. Die 33. Berechnung der Primzahlen mit 450 Thread(s) ist korrekt.
		34. Berechnung: 4.053990 s. Die 34. Berechnung der Primzahlen mit 450 Thread(s) ist korrekt.
		35. Berechnung: 4.051372 s. Die 35. Berechnung der Primzahlen mit 450 Thread(s) ist korrekt.
		36. Berechnung: 4.039949 s. Die 36. Berechnung der Primzahlen mit 450 Thread(s) ist korrekt.
		37. Berechnung: 4.138001 s. Die 37. Berechnung der Primzahlen mit 450 Thread(s) ist korrekt.
		38. Berechnung: 4.046686 s. Die 38. Berechnung der Primzahlen mit 450 Thread(s) ist korrekt.
		39. Berechnung: 4.055632 s. Die 39. Berechnung der Primzahlen mit 450 Thread(s) ist korrekt.
		40. Berechnung: 4.066935 s. Die 40. Berechnung der Primzahlen mit 450 Thread(s) ist korrekt.
		41. Berechnung: 4.068035 s. Die 41. Berechnung der Primzahlen mit 450 Thread(s) ist korrekt.
		42. Berechnung: 4.046952 s. Die 42. Berechnung der Primzahlen mit 450 Thread(s) ist korrekt.
		43. Berechnung: 4.063664 s. Die 43. Berechnung der Primzahlen mit 450 Thread(s) ist korrekt.
		44. Berechnung: 4.067969 s. Die 44. Berechnung der Primzahlen mit 450 Thread(s) ist korrekt.
		45. Berechnung: 4.027797 s. Die 45. Berechnung der Primzahlen mit 450 Thread(s) ist korrekt.
		46. Berechnung: 4.057389 s. Die 46. Berechnung der Primzahlen mit 450 Thread(s) ist korrekt.
		47. Berechnung: 4.226666 s. Die 47. Berechnung der Primzahlen mit 450 Thread(s) ist korrekt.
		48. Berechnung: 4.053094 s. Die 48. Berechnung der Primzahlen mit 450 Thread(s) ist korrekt.
		49. Berechnung: 4.096187 s. Die 49. Berechnung der Primzahlen mit 450 Thread(s) ist korrekt.
		50. Berechnung: 4.057084 s. Die 50. Berechnung der Primzahlen mit 450 Thread(s) ist korrekt.
		Durchschnittliche Ausfuehrungszeit des Programmes bei 50 Durchlaeufen mit 450 Thread(s): 4.060989 s. Alle berechneten Primzahlen mit 450 Thread(s) sind korrekt.
	Berechnung mittels 500 Thread(s):
		1. Berechnung: 4.062231 s. Die 1. Berechnung der Primzahlen mit 500 Thread(s) ist korrekt.
		2. Berechnung: 4.040868 s. Die 2. Berechnung der Primzahlen mit 500 Thread(s) ist korrekt.
		3. Berechnung: 4.040958 s. Die 3. Berechnung der Primzahlen mit 500 Thread(s) ist korrekt.
		4. Berechnung: 4.036265 s. Die 4. Berechnung der Primzahlen mit 500 Thread(s) ist korrekt.
		5. Berechnung: 4.064353 s. Die 5. Berechnung der Primzahlen mit 500 Thread(s) ist korrekt.
		6. Berechnung: 4.031209 s. Die 6. Berechnung der Primzahlen mit 500 Thread(s) ist korrekt.
		7. Berechnung: 4.047399 s. Die 7. Berechnung der Primzahlen mit 500 Thread(s) ist korrekt.
		8. Berechnung: 4.058747 s. Die 8. Berechnung der Primzahlen mit 500 Thread(s) ist korrekt.
		9. Berechnung: 4.041968 s. Die 9. Berechnung der Primzahlen mit 500 Thread(s) ist korrekt.
		10. Berechnung: 4.050476 s. Die 10. Berechnung der Primzahlen mit 500 Thread(s) ist korrekt.
		11. Berechnung: 4.058109 s. Die 11. Berechnung der Primzahlen mit 500 Thread(s) ist korrekt.
		12. Berechnung: 4.053692 s. Die 12. Berechnung der Primzahlen mit 500 Thread(s) ist korrekt.
		13. Berechnung: 4.060419 s. Die 13. Berechnung der Primzahlen mit 500 Thread(s) ist korrekt.
		14. Berechnung: 4.051928 s. Die 14. Berechnung der Primzahlen mit 500 Thread(s) ist korrekt.
		15. Berechnung: 4.044850 s. Die 15. Berechnung der Primzahlen mit 500 Thread(s) ist korrekt.
		16. Berechnung: 4.066311 s. Die 16. Berechnung der Primzahlen mit 500 Thread(s) ist korrekt.
		17. Berechnung: 4.049030 s. Die 17. Berechnung der Primzahlen mit 500 Thread(s) ist korrekt.
		18. Berechnung: 4.026201 s. Die 18. Berechnung der Primzahlen mit 500 Thread(s) ist korrekt.
		19. Berechnung: 4.035380 s. Die 19. Berechnung der Primzahlen mit 500 Thread(s) ist korrekt.
		20. Berechnung: 4.054281 s. Die 20. Berechnung der Primzahlen mit 500 Thread(s) ist korrekt.
		21. Berechnung: 4.030763 s. Die 21. Berechnung der Primzahlen mit 500 Thread(s) ist korrekt.
		22. Berechnung: 4.028027 s. Die 22. Berechnung der Primzahlen mit 500 Thread(s) ist korrekt.
		23. Berechnung: 4.044228 s. Die 23. Berechnung der Primzahlen mit 500 Thread(s) ist korrekt.
		24. Berechnung: 4.036438 s. Die 24. Berechnung der Primzahlen mit 500 Thread(s) ist korrekt.
		25. Berechnung: 4.031889 s. Die 25. Berechnung der Primzahlen mit 500 Thread(s) ist korrekt.
		26. Berechnung: 4.109087 s. Die 26. Berechnung der Primzahlen mit 500 Thread(s) ist korrekt.
		27. Berechnung: 4.031460 s. Die 27. Berechnung der Primzahlen mit 500 Thread(s) ist korrekt.
		28. Berechnung: 4.061417 s. Die 28. Berechnung der Primzahlen mit 500 Thread(s) ist korrekt.
		29. Berechnung: 4.029352 s. Die 29. Berechnung der Primzahlen mit 500 Thread(s) ist korrekt.
		30. Berechnung: 4.040647 s. Die 30. Berechnung der Primzahlen mit 500 Thread(s) ist korrekt.
		31. Berechnung: 4.042681 s. Die 31. Berechnung der Primzahlen mit 500 Thread(s) ist korrekt.
		32. Berechnung: 4.078139 s. Die 32. Berechnung der Primzahlen mit 500 Thread(s) ist korrekt.
		33. Berechnung: 4.038362 s. Die 33. Berechnung der Primzahlen mit 500 Thread(s) ist korrekt.
		34. Berechnung: 4.044491 s. Die 34. Berechnung der Primzahlen mit 500 Thread(s) ist korrekt.
		35. Berechnung: 4.053264 s. Die 35. Berechnung der Primzahlen mit 500 Thread(s) ist korrekt.
		36. Berechnung: 4.061399 s. Die 36. Berechnung der Primzahlen mit 500 Thread(s) ist korrekt.
		37. Berechnung: 4.030894 s. Die 37. Berechnung der Primzahlen mit 500 Thread(s) ist korrekt.
		38. Berechnung: 4.041743 s. Die 38. Berechnung der Primzahlen mit 500 Thread(s) ist korrekt.
		39. Berechnung: 4.028994 s. Die 39. Berechnung der Primzahlen mit 500 Thread(s) ist korrekt.
		40. Berechnung: 4.025736 s. Die 40. Berechnung der Primzahlen mit 500 Thread(s) ist korrekt.
		41. Berechnung: 4.033036 s. Die 41. Berechnung der Primzahlen mit 500 Thread(s) ist korrekt.
		42. Berechnung: 4.030705 s. Die 42. Berechnung der Primzahlen mit 500 Thread(s) ist korrekt.
		43. Berechnung: 4.046150 s. Die 43. Berechnung der Primzahlen mit 500 Thread(s) ist korrekt.
		44. Berechnung: 4.039419 s. Die 44. Berechnung der Primzahlen mit 500 Thread(s) ist korrekt.
		45. Berechnung: 4.054943 s. Die 45. Berechnung der Primzahlen mit 500 Thread(s) ist korrekt.
		46. Berechnung: 4.035586 s. Die 46. Berechnung der Primzahlen mit 500 Thread(s) ist korrekt.
		47. Berechnung: 4.041396 s. Die 47. Berechnung der Primzahlen mit 500 Thread(s) ist korrekt.
		48. Berechnung: 4.028422 s. Die 48. Berechnung der Primzahlen mit 500 Thread(s) ist korrekt.
		49. Berechnung: 4.043578 s. Die 49. Berechnung der Primzahlen mit 500 Thread(s) ist korrekt.
		50. Berechnung: 4.055723 s. Die 50. Berechnung der Primzahlen mit 500 Thread(s) ist korrekt.
		Durchschnittliche Ausfuehrungszeit des Programmes bei 50 Durchlaeufen mit 500 Thread(s): 4.045453 s. Alle berechneten Primzahlen mit 500 Thread(s) sind korrekt.
	Berechnung mittels 550 Thread(s):
		1. Berechnung: 4.124342 s. Die 1. Berechnung der Primzahlen mit 550 Thread(s) ist korrekt.
		2. Berechnung: 4.129854 s. Die 2. Berechnung der Primzahlen mit 550 Thread(s) ist korrekt.
		3. Berechnung: 4.161740 s. Die 3. Berechnung der Primzahlen mit 550 Thread(s) ist korrekt.
		4. Berechnung: 4.125456 s. Die 4. Berechnung der Primzahlen mit 550 Thread(s) ist korrekt.
		5. Berechnung: 4.064750 s. Die 5. Berechnung der Primzahlen mit 550 Thread(s) ist korrekt.
		6. Berechnung: 4.174645 s. Die 6. Berechnung der Primzahlen mit 550 Thread(s) ist korrekt.
		7. Berechnung: 4.149179 s. Die 7. Berechnung der Primzahlen mit 550 Thread(s) ist korrekt.
		8. Berechnung: 4.142463 s. Die 8. Berechnung der Primzahlen mit 550 Thread(s) ist korrekt.
		9. Berechnung: 4.123464 s. Die 9. Berechnung der Primzahlen mit 550 Thread(s) ist korrekt.
		10. Berechnung: 4.138745 s. Die 10. Berechnung der Primzahlen mit 550 Thread(s) ist korrekt.
		11. Berechnung: 4.140542 s. Die 11. Berechnung der Primzahlen mit 550 Thread(s) ist korrekt.
		12. Berechnung: 4.118527 s. Die 12. Berechnung der Primzahlen mit 550 Thread(s) ist korrekt.
		13. Berechnung: 4.142605 s. Die 13. Berechnung der Primzahlen mit 550 Thread(s) ist korrekt.
		14. Berechnung: 4.147173 s. Die 14. Berechnung der Primzahlen mit 550 Thread(s) ist korrekt.
		15. Berechnung: 4.163358 s. Die 15. Berechnung der Primzahlen mit 550 Thread(s) ist korrekt.
		16. Berechnung: 4.124663 s. Die 16. Berechnung der Primzahlen mit 550 Thread(s) ist korrekt.
		17. Berechnung: 4.143694 s. Die 17. Berechnung der Primzahlen mit 550 Thread(s) ist korrekt.
		18. Berechnung: 4.113457 s. Die 18. Berechnung der Primzahlen mit 550 Thread(s) ist korrekt.
		19. Berechnung: 4.107216 s. Die 19. Berechnung der Primzahlen mit 550 Thread(s) ist korrekt.
		20. Berechnung: 4.141019 s. Die 20. Berechnung der Primzahlen mit 550 Thread(s) ist korrekt.
		21. Berechnung: 4.120232 s. Die 21. Berechnung der Primzahlen mit 550 Thread(s) ist korrekt.
		22. Berechnung: 4.150251 s. Die 22. Berechnung der Primzahlen mit 550 Thread(s) ist korrekt.
		23. Berechnung: 4.169239 s. Die 23. Berechnung der Primzahlen mit 550 Thread(s) ist korrekt.
		24. Berechnung: 4.135824 s. Die 24. Berechnung der Primzahlen mit 550 Thread(s) ist korrekt.
		25. Berechnung: 4.111172 s. Die 25. Berechnung der Primzahlen mit 550 Thread(s) ist korrekt.
		26. Berechnung: 4.105610 s. Die 26. Berechnung der Primzahlen mit 550 Thread(s) ist korrekt.
		27. Berechnung: 4.106592 s. Die 27. Berechnung der Primzahlen mit 550 Thread(s) ist korrekt.
		28. Berechnung: 4.148892 s. Die 28. Berechnung der Primzahlen mit 550 Thread(s) ist korrekt.
		29. Berechnung: 4.148086 s. Die 29. Berechnung der Primzahlen mit 550 Thread(s) ist korrekt.
		30. Berechnung: 4.130726 s. Die 30. Berechnung der Primzahlen mit 550 Thread(s) ist korrekt.
		31. Berechnung: 4.130623 s. Die 31. Berechnung der Primzahlen mit 550 Thread(s) ist korrekt.
		32. Berechnung: 4.145717 s. Die 32. Berechnung der Primzahlen mit 550 Thread(s) ist korrekt.
		33. Berechnung: 4.116952 s. Die 33. Berechnung der Primzahlen mit 550 Thread(s) ist korrekt.
		34. Berechnung: 4.128545 s. Die 34. Berechnung der Primzahlen mit 550 Thread(s) ist korrekt.
		35. Berechnung: 4.121196 s. Die 35. Berechnung der Primzahlen mit 550 Thread(s) ist korrekt.
		36. Berechnung: 4.148063 s. Die 36. Berechnung der Primzahlen mit 550 Thread(s) ist korrekt.
		37. Berechnung: 4.099337 s. Die 37. Berechnung der Primzahlen mit 550 Thread(s) ist korrekt.
		38. Berechnung: 4.115114 s. Die 38. Berechnung der Primzahlen mit 550 Thread(s) ist korrekt.
		39. Berechnung: 4.154310 s. Die 39. Berechnung der Primzahlen mit 550 Thread(s) ist korrekt.
		40. Berechnung: 4.061898 s. Die 40. Berechnung der Primzahlen mit 550 Thread(s) ist korrekt.
		41. Berechnung: 4.132061 s. Die 41. Berechnung der Primzahlen mit 550 Thread(s) ist korrekt.
		42. Berechnung: 4.123431 s. Die 42. Berechnung der Primzahlen mit 550 Thread(s) ist korrekt.
		43. Berechnung: 4.147575 s. Die 43. Berechnung der Primzahlen mit 550 Thread(s) ist korrekt.
		44. Berechnung: 4.156226 s. Die 44. Berechnung der Primzahlen mit 550 Thread(s) ist korrekt.
		45. Berechnung: 4.129274 s. Die 45. Berechnung der Primzahlen mit 550 Thread(s) ist korrekt.
		46. Berechnung: 4.131380 s. Die 46. Berechnung der Primzahlen mit 550 Thread(s) ist korrekt.
		47. Berechnung: 4.139266 s. Die 47. Berechnung der Primzahlen mit 550 Thread(s) ist korrekt.
		48. Berechnung: 4.137770 s. Die 48. Berechnung der Primzahlen mit 550 Thread(s) ist korrekt.
		49. Berechnung: 4.140278 s. Die 49. Berechnung der Primzahlen mit 550 Thread(s) ist korrekt.
		50. Berechnung: 4.133177 s. Die 50. Berechnung der Primzahlen mit 550 Thread(s) ist korrekt.
		Durchschnittliche Ausfuehrungszeit des Programmes bei 50 Durchlaeufen mit 550 Thread(s): 4.131914 s. Alle berechneten Primzahlen mit 550 Thread(s) sind korrekt.
	Berechnung mittels 600 Thread(s):
		1. Berechnung: 4.154248 s. Die 1. Berechnung der Primzahlen mit 600 Thread(s) ist korrekt.
		2. Berechnung: 4.135549 s. Die 2. Berechnung der Primzahlen mit 600 Thread(s) ist korrekt.
		3. Berechnung: 4.122561 s. Die 3. Berechnung der Primzahlen mit 600 Thread(s) ist korrekt.
		4. Berechnung: 4.149216 s. Die 4. Berechnung der Primzahlen mit 600 Thread(s) ist korrekt.
		5. Berechnung: 4.102678 s. Die 5. Berechnung der Primzahlen mit 600 Thread(s) ist korrekt.
		6. Berechnung: 4.053531 s. Die 6. Berechnung der Primzahlen mit 600 Thread(s) ist korrekt.
		7. Berechnung: 4.099234 s. Die 7. Berechnung der Primzahlen mit 600 Thread(s) ist korrekt.
		8. Berechnung: 4.084690 s. Die 8. Berechnung der Primzahlen mit 600 Thread(s) ist korrekt.
		9. Berechnung: 4.138096 s. Die 9. Berechnung der Primzahlen mit 600 Thread(s) ist korrekt.
		10. Berechnung: 4.135250 s. Die 10. Berechnung der Primzahlen mit 600 Thread(s) ist korrekt.
		11. Berechnung: 4.129696 s. Die 11. Berechnung der Primzahlen mit 600 Thread(s) ist korrekt.
		12. Berechnung: 4.081537 s. Die 12. Berechnung der Primzahlen mit 600 Thread(s) ist korrekt.
		13. Berechnung: 4.113218 s. Die 13. Berechnung der Primzahlen mit 600 Thread(s) ist korrekt.
		14. Berechnung: 4.149339 s. Die 14. Berechnung der Primzahlen mit 600 Thread(s) ist korrekt.
		15. Berechnung: 4.122043 s. Die 15. Berechnung der Primzahlen mit 600 Thread(s) ist korrekt.
		16. Berechnung: 4.144241 s. Die 16. Berechnung der Primzahlen mit 600 Thread(s) ist korrekt.
		17. Berechnung: 4.094010 s. Die 17. Berechnung der Primzahlen mit 600 Thread(s) ist korrekt.
		18. Berechnung: 4.133134 s. Die 18. Berechnung der Primzahlen mit 600 Thread(s) ist korrekt.
		19. Berechnung: 4.138491 s. Die 19. Berechnung der Primzahlen mit 600 Thread(s) ist korrekt.
		20. Berechnung: 4.083083 s. Die 20. Berechnung der Primzahlen mit 600 Thread(s) ist korrekt.
		21. Berechnung: 4.097217 s. Die 21. Berechnung der Primzahlen mit 600 Thread(s) ist korrekt.
		22. Berechnung: 4.117372 s. Die 22. Berechnung der Primzahlen mit 600 Thread(s) ist korrekt.
		23. Berechnung: 4.159033 s. Die 23. Berechnung der Primzahlen mit 600 Thread(s) ist korrekt.
		24. Berechnung: 4.089859 s. Die 24. Berechnung der Primzahlen mit 600 Thread(s) ist korrekt.
		25. Berechnung: 4.045888 s. Die 25. Berechnung der Primzahlen mit 600 Thread(s) ist korrekt.
		26. Berechnung: 4.119265 s. Die 26. Berechnung der Primzahlen mit 600 Thread(s) ist korrekt.
		27. Berechnung: 4.121331 s. Die 27. Berechnung der Primzahlen mit 600 Thread(s) ist korrekt.
		28. Berechnung: 4.129413 s. Die 28. Berechnung der Primzahlen mit 600 Thread(s) ist korrekt.
		29. Berechnung: 4.110443 s. Die 29. Berechnung der Primzahlen mit 600 Thread(s) ist korrekt.
		30. Berechnung: 4.087064 s. Die 30. Berechnung der Primzahlen mit 600 Thread(s) ist korrekt.
		31. Berechnung: 4.137111 s. Die 31. Berechnung der Primzahlen mit 600 Thread(s) ist korrekt.
		32. Berechnung: 4.110157 s. Die 32. Berechnung der Primzahlen mit 600 Thread(s) ist korrekt.
		33. Berechnung: 4.180192 s. Die 33. Berechnung der Primzahlen mit 600 Thread(s) ist korrekt.
		34. Berechnung: 4.123093 s. Die 34. Berechnung der Primzahlen mit 600 Thread(s) ist korrekt.
		35. Berechnung: 4.117882 s. Die 35. Berechnung der Primzahlen mit 600 Thread(s) ist korrekt.
		36. Berechnung: 4.121939 s. Die 36. Berechnung der Primzahlen mit 600 Thread(s) ist korrekt.
		37. Berechnung: 4.129417 s. Die 37. Berechnung der Primzahlen mit 600 Thread(s) ist korrekt.
		38. Berechnung: 4.149166 s. Die 38. Berechnung der Primzahlen mit 600 Thread(s) ist korrekt.
		39. Berechnung: 4.086953 s. Die 39. Berechnung der Primzahlen mit 600 Thread(s) ist korrekt.
		40. Berechnung: 4.108317 s. Die 40. Berechnung der Primzahlen mit 600 Thread(s) ist korrekt.
		41. Berechnung: 4.122133 s. Die 41. Berechnung der Primzahlen mit 600 Thread(s) ist korrekt.
		42. Berechnung: 4.059595 s. Die 42. Berechnung der Primzahlen mit 600 Thread(s) ist korrekt.
		43. Berechnung: 4.397611 s. Die 43. Berechnung der Primzahlen mit 600 Thread(s) ist korrekt.
		44. Berechnung: 4.046117 s. Die 44. Berechnung der Primzahlen mit 600 Thread(s) ist korrekt.
		45. Berechnung: 4.134802 s. Die 45. Berechnung der Primzahlen mit 600 Thread(s) ist korrekt.
		46. Berechnung: 4.127614 s. Die 46. Berechnung der Primzahlen mit 600 Thread(s) ist korrekt.
		47. Berechnung: 4.110227 s. Die 47. Berechnung der Primzahlen mit 600 Thread(s) ist korrekt.
		48. Berechnung: 4.073092 s. Die 48. Berechnung der Primzahlen mit 600 Thread(s) ist korrekt.
		49. Berechnung: 4.093936 s. Die 49. Berechnung der Primzahlen mit 600 Thread(s) ist korrekt.
		50. Berechnung: 4.106155 s. Die 50. Berechnung der Primzahlen mit 600 Thread(s) ist korrekt.
		Durchschnittliche Ausfuehrungszeit des Programmes bei 50 Durchlaeufen mit 600 Thread(s): 4.119525 s. Alle berechneten Primzahlen mit 600 Thread(s) sind korrekt.
	Berechnung mittels 650 Thread(s):
		1. Berechnung: 4.189169 s. Die 1. Berechnung der Primzahlen mit 650 Thread(s) ist korrekt.
		2. Berechnung: 4.169473 s. Die 2. Berechnung der Primzahlen mit 650 Thread(s) ist korrekt.
		3. Berechnung: 4.131749 s. Die 3. Berechnung der Primzahlen mit 650 Thread(s) ist korrekt.
		4. Berechnung: 4.166519 s. Die 4. Berechnung der Primzahlen mit 650 Thread(s) ist korrekt.
		5. Berechnung: 4.150375 s. Die 5. Berechnung der Primzahlen mit 650 Thread(s) ist korrekt.
		6. Berechnung: 4.108891 s. Die 6. Berechnung der Primzahlen mit 650 Thread(s) ist korrekt.
		7. Berechnung: 4.166144 s. Die 7. Berechnung der Primzahlen mit 650 Thread(s) ist korrekt.
		8. Berechnung: 4.167885 s. Die 8. Berechnung der Primzahlen mit 650 Thread(s) ist korrekt.
		9. Berechnung: 4.176166 s. Die 9. Berechnung der Primzahlen mit 650 Thread(s) ist korrekt.
		10. Berechnung: 4.180307 s. Die 10. Berechnung der Primzahlen mit 650 Thread(s) ist korrekt.
		11. Berechnung: 4.133674 s. Die 11. Berechnung der Primzahlen mit 650 Thread(s) ist korrekt.
		12. Berechnung: 4.140880 s. Die 12. Berechnung der Primzahlen mit 650 Thread(s) ist korrekt.
		13. Berechnung: 4.173655 s. Die 13. Berechnung der Primzahlen mit 650 Thread(s) ist korrekt.
		14. Berechnung: 4.136389 s. Die 14. Berechnung der Primzahlen mit 650 Thread(s) ist korrekt.
		15. Berechnung: 4.137450 s. Die 15. Berechnung der Primzahlen mit 650 Thread(s) ist korrekt.
		16. Berechnung: 4.168535 s. Die 16. Berechnung der Primzahlen mit 650 Thread(s) ist korrekt.
		17. Berechnung: 4.167635 s. Die 17. Berechnung der Primzahlen mit 650 Thread(s) ist korrekt.
		18. Berechnung: 4.174358 s. Die 18. Berechnung der Primzahlen mit 650 Thread(s) ist korrekt.
		19. Berechnung: 4.129304 s. Die 19. Berechnung der Primzahlen mit 650 Thread(s) ist korrekt.
		20. Berechnung: 4.169386 s. Die 20. Berechnung der Primzahlen mit 650 Thread(s) ist korrekt.
		21. Berechnung: 4.151256 s. Die 21. Berechnung der Primzahlen mit 650 Thread(s) ist korrekt.
		22. Berechnung: 4.149180 s. Die 22. Berechnung der Primzahlen mit 650 Thread(s) ist korrekt.
		23. Berechnung: 4.172793 s. Die 23. Berechnung der Primzahlen mit 650 Thread(s) ist korrekt.
		24. Berechnung: 4.156450 s. Die 24. Berechnung der Primzahlen mit 650 Thread(s) ist korrekt.
		25. Berechnung: 4.167968 s. Die 25. Berechnung der Primzahlen mit 650 Thread(s) ist korrekt.
		26. Berechnung: 4.163299 s. Die 26. Berechnung der Primzahlen mit 650 Thread(s) ist korrekt.
		27. Berechnung: 4.168578 s. Die 27. Berechnung der Primzahlen mit 650 Thread(s) ist korrekt.
		28. Berechnung: 4.165923 s. Die 28. Berechnung der Primzahlen mit 650 Thread(s) ist korrekt.
		29. Berechnung: 4.149357 s. Die 29. Berechnung der Primzahlen mit 650 Thread(s) ist korrekt.
		30. Berechnung: 4.166753 s. Die 30. Berechnung der Primzahlen mit 650 Thread(s) ist korrekt.
		31. Berechnung: 4.209991 s. Die 31. Berechnung der Primzahlen mit 650 Thread(s) ist korrekt.
		32. Berechnung: 4.135825 s. Die 32. Berechnung der Primzahlen mit 650 Thread(s) ist korrekt.
		33. Berechnung: 4.159892 s. Die 33. Berechnung der Primzahlen mit 650 Thread(s) ist korrekt.
		34. Berechnung: 4.148096 s. Die 34. Berechnung der Primzahlen mit 650 Thread(s) ist korrekt.
		35. Berechnung: 4.151484 s. Die 35. Berechnung der Primzahlen mit 650 Thread(s) ist korrekt.
		36. Berechnung: 4.206820 s. Die 36. Berechnung der Primzahlen mit 650 Thread(s) ist korrekt.
		37. Berechnung: 4.143976 s. Die 37. Berechnung der Primzahlen mit 650 Thread(s) ist korrekt.
		38. Berechnung: 4.148432 s. Die 38. Berechnung der Primzahlen mit 650 Thread(s) ist korrekt.
		39. Berechnung: 4.185675 s. Die 39. Berechnung der Primzahlen mit 650 Thread(s) ist korrekt.
		40. Berechnung: 4.161459 s. Die 40. Berechnung der Primzahlen mit 650 Thread(s) ist korrekt.
		41. Berechnung: 4.160620 s. Die 41. Berechnung der Primzahlen mit 650 Thread(s) ist korrekt.
		42. Berechnung: 4.153013 s. Die 42. Berechnung der Primzahlen mit 650 Thread(s) ist korrekt.
		43. Berechnung: 4.163859 s. Die 43. Berechnung der Primzahlen mit 650 Thread(s) ist korrekt.
		44. Berechnung: 4.170498 s. Die 44. Berechnung der Primzahlen mit 650 Thread(s) ist korrekt.
		45. Berechnung: 4.165878 s. Die 45. Berechnung der Primzahlen mit 650 Thread(s) ist korrekt.
		46. Berechnung: 4.179008 s. Die 46. Berechnung der Primzahlen mit 650 Thread(s) ist korrekt.
		47. Berechnung: 4.149571 s. Die 47. Berechnung der Primzahlen mit 650 Thread(s) ist korrekt.
		48. Berechnung: 4.153623 s. Die 48. Berechnung der Primzahlen mit 650 Thread(s) ist korrekt.
		49. Berechnung: 5.059071 s. Die 49. Berechnung der Primzahlen mit 650 Thread(s) ist korrekt.
		50. Berechnung: 5.184696 s. Die 50. Berechnung der Primzahlen mit 650 Thread(s) ist korrekt.
		Durchschnittliche Ausfuehrungszeit des Programmes bei 50 Durchlaeufen mit 650 Thread(s): 4.198820 s. Alle berechneten Primzahlen mit 650 Thread(s) sind korrekt.
	Berechnung mittels 700 Thread(s):
		1. Berechnung: 5.116648 s. Die 1. Berechnung der Primzahlen mit 700 Thread(s) ist korrekt.
		2. Berechnung: 4.215129 s. Die 2. Berechnung der Primzahlen mit 700 Thread(s) ist korrekt.
		3. Berechnung: 4.175677 s. Die 3. Berechnung der Primzahlen mit 700 Thread(s) ist korrekt.
		4. Berechnung: 4.172222 s. Die 4. Berechnung der Primzahlen mit 700 Thread(s) ist korrekt.
		5. Berechnung: 4.196580 s. Die 5. Berechnung der Primzahlen mit 700 Thread(s) ist korrekt.
		6. Berechnung: 4.177880 s. Die 6. Berechnung der Primzahlen mit 700 Thread(s) ist korrekt.
		7. Berechnung: 4.152260 s. Die 7. Berechnung der Primzahlen mit 700 Thread(s) ist korrekt.
		8. Berechnung: 4.181421 s. Die 8. Berechnung der Primzahlen mit 700 Thread(s) ist korrekt.
		9. Berechnung: 4.196288 s. Die 9. Berechnung der Primzahlen mit 700 Thread(s) ist korrekt.
		10. Berechnung: 4.191668 s. Die 10. Berechnung der Primzahlen mit 700 Thread(s) ist korrekt.
		11. Berechnung: 4.175983 s. Die 11. Berechnung der Primzahlen mit 700 Thread(s) ist korrekt.
		12. Berechnung: 4.208890 s. Die 12. Berechnung der Primzahlen mit 700 Thread(s) ist korrekt.
		13. Berechnung: 4.165100 s. Die 13. Berechnung der Primzahlen mit 700 Thread(s) ist korrekt.
		14. Berechnung: 4.172932 s. Die 14. Berechnung der Primzahlen mit 700 Thread(s) ist korrekt.
		15. Berechnung: 4.184111 s. Die 15. Berechnung der Primzahlen mit 700 Thread(s) ist korrekt.
		16. Berechnung: 4.178813 s. Die 16. Berechnung der Primzahlen mit 700 Thread(s) ist korrekt.
		17. Berechnung: 4.207811 s. Die 17. Berechnung der Primzahlen mit 700 Thread(s) ist korrekt.
		18. Berechnung: 4.170051 s. Die 18. Berechnung der Primzahlen mit 700 Thread(s) ist korrekt.
		19. Berechnung: 4.278270 s. Die 19. Berechnung der Primzahlen mit 700 Thread(s) ist korrekt.
		20. Berechnung: 4.195871 s. Die 20. Berechnung der Primzahlen mit 700 Thread(s) ist korrekt.
		21. Berechnung: 4.175753 s. Die 21. Berechnung der Primzahlen mit 700 Thread(s) ist korrekt.
		22. Berechnung: 4.126050 s. Die 22. Berechnung der Primzahlen mit 700 Thread(s) ist korrekt.
		23. Berechnung: 4.158362 s. Die 23. Berechnung der Primzahlen mit 700 Thread(s) ist korrekt.
		24. Berechnung: 4.182454 s. Die 24. Berechnung der Primzahlen mit 700 Thread(s) ist korrekt.
		25. Berechnung: 4.201479 s. Die 25. Berechnung der Primzahlen mit 700 Thread(s) ist korrekt.
		26. Berechnung: 4.174966 s. Die 26. Berechnung der Primzahlen mit 700 Thread(s) ist korrekt.
		27. Berechnung: 4.171338 s. Die 27. Berechnung der Primzahlen mit 700 Thread(s) ist korrekt.
		28. Berechnung: 4.188036 s. Die 28. Berechnung der Primzahlen mit 700 Thread(s) ist korrekt.
		29. Berechnung: 4.153907 s. Die 29. Berechnung der Primzahlen mit 700 Thread(s) ist korrekt.
		30. Berechnung: 4.228693 s. Die 30. Berechnung der Primzahlen mit 700 Thread(s) ist korrekt.
		31. Berechnung: 4.178295 s. Die 31. Berechnung der Primzahlen mit 700 Thread(s) ist korrekt.
		32. Berechnung: 4.166766 s. Die 32. Berechnung der Primzahlen mit 700 Thread(s) ist korrekt.
		33. Berechnung: 4.181192 s. Die 33. Berechnung der Primzahlen mit 700 Thread(s) ist korrekt.
		34. Berechnung: 4.059907 s. Die 34. Berechnung der Primzahlen mit 700 Thread(s) ist korrekt.
		35. Berechnung: 4.130888 s. Die 35. Berechnung der Primzahlen mit 700 Thread(s) ist korrekt.
		36. Berechnung: 4.156560 s. Die 36. Berechnung der Primzahlen mit 700 Thread(s) ist korrekt.
		37. Berechnung: 4.191391 s. Die 37. Berechnung der Primzahlen mit 700 Thread(s) ist korrekt.
		38. Berechnung: 4.172220 s. Die 38. Berechnung der Primzahlen mit 700 Thread(s) ist korrekt.
		39. Berechnung: 4.134762 s. Die 39. Berechnung der Primzahlen mit 700 Thread(s) ist korrekt.
		40. Berechnung: 4.134511 s. Die 40. Berechnung der Primzahlen mit 700 Thread(s) ist korrekt.
		41. Berechnung: 4.164534 s. Die 41. Berechnung der Primzahlen mit 700 Thread(s) ist korrekt.
		42. Berechnung: 4.175139 s. Die 42. Berechnung der Primzahlen mit 700 Thread(s) ist korrekt.
		43. Berechnung: 4.173189 s. Die 43. Berechnung der Primzahlen mit 700 Thread(s) ist korrekt.
		44. Berechnung: 4.157470 s. Die 44. Berechnung der Primzahlen mit 700 Thread(s) ist korrekt.
		45. Berechnung: 4.189787 s. Die 45. Berechnung der Primzahlen mit 700 Thread(s) ist korrekt.
		46. Berechnung: 4.185077 s. Die 46. Berechnung der Primzahlen mit 700 Thread(s) ist korrekt.
		47. Berechnung: 4.116977 s. Die 47. Berechnung der Primzahlen mit 700 Thread(s) ist korrekt.
		48. Berechnung: 4.234371 s. Die 48. Berechnung der Primzahlen mit 700 Thread(s) ist korrekt.
		49. Berechnung: 4.167765 s. Die 49. Berechnung der Primzahlen mit 700 Thread(s) ist korrekt.
		50. Berechnung: 4.134747 s. Die 50. Berechnung der Primzahlen mit 700 Thread(s) ist korrekt.
		Durchschnittliche Ausfuehrungszeit des Programmes bei 50 Durchlaeufen mit 700 Thread(s): 4.193604 s. Alle berechneten Primzahlen mit 700 Thread(s) sind korrekt.
	Berechnung mittels 750 Thread(s):
		1. Berechnung: 4.068180 s. Die 1. Berechnung der Primzahlen mit 750 Thread(s) ist korrekt.
		2. Berechnung: 4.120723 s. Die 2. Berechnung der Primzahlen mit 750 Thread(s) ist korrekt.
		3. Berechnung: 4.068602 s. Die 3. Berechnung der Primzahlen mit 750 Thread(s) ist korrekt.
		4. Berechnung: 4.064326 s. Die 4. Berechnung der Primzahlen mit 750 Thread(s) ist korrekt.
		5. Berechnung: 4.086172 s. Die 5. Berechnung der Primzahlen mit 750 Thread(s) ist korrekt.
		6. Berechnung: 4.090885 s. Die 6. Berechnung der Primzahlen mit 750 Thread(s) ist korrekt.
		7. Berechnung: 4.091363 s. Die 7. Berechnung der Primzahlen mit 750 Thread(s) ist korrekt.
		8. Berechnung: 4.088677 s. Die 8. Berechnung der Primzahlen mit 750 Thread(s) ist korrekt.
		9. Berechnung: 4.075201 s. Die 9. Berechnung der Primzahlen mit 750 Thread(s) ist korrekt.
		10. Berechnung: 4.117015 s. Die 10. Berechnung der Primzahlen mit 750 Thread(s) ist korrekt.
		11. Berechnung: 4.087344 s. Die 11. Berechnung der Primzahlen mit 750 Thread(s) ist korrekt.
		12. Berechnung: 4.116715 s. Die 12. Berechnung der Primzahlen mit 750 Thread(s) ist korrekt.
		13. Berechnung: 4.106213 s. Die 13. Berechnung der Primzahlen mit 750 Thread(s) ist korrekt.
		14. Berechnung: 4.083139 s. Die 14. Berechnung der Primzahlen mit 750 Thread(s) ist korrekt.
		15. Berechnung: 4.058020 s. Die 15. Berechnung der Primzahlen mit 750 Thread(s) ist korrekt.
		16. Berechnung: 4.103415 s. Die 16. Berechnung der Primzahlen mit 750 Thread(s) ist korrekt.
		17. Berechnung: 4.093994 s. Die 17. Berechnung der Primzahlen mit 750 Thread(s) ist korrekt.
		18. Berechnung: 4.081578 s. Die 18. Berechnung der Primzahlen mit 750 Thread(s) ist korrekt.
		19. Berechnung: 4.126310 s. Die 19. Berechnung der Primzahlen mit 750 Thread(s) ist korrekt.
		20. Berechnung: 4.099044 s. Die 20. Berechnung der Primzahlen mit 750 Thread(s) ist korrekt.
		21. Berechnung: 4.044157 s. Die 21. Berechnung der Primzahlen mit 750 Thread(s) ist korrekt.
		22. Berechnung: 4.087880 s. Die 22. Berechnung der Primzahlen mit 750 Thread(s) ist korrekt.
		23. Berechnung: 4.060099 s. Die 23. Berechnung der Primzahlen mit 750 Thread(s) ist korrekt.
		24. Berechnung: 4.074455 s. Die 24. Berechnung der Primzahlen mit 750 Thread(s) ist korrekt.
		25. Berechnung: 4.064704 s. Die 25. Berechnung der Primzahlen mit 750 Thread(s) ist korrekt.
		26. Berechnung: 4.105051 s. Die 26. Berechnung der Primzahlen mit 750 Thread(s) ist korrekt.
		27. Berechnung: 4.240493 s. Die 27. Berechnung der Primzahlen mit 750 Thread(s) ist korrekt.
		28. Berechnung: 4.111281 s. Die 28. Berechnung der Primzahlen mit 750 Thread(s) ist korrekt.
		29. Berechnung: 4.054859 s. Die 29. Berechnung der Primzahlen mit 750 Thread(s) ist korrekt.
		30. Berechnung: 4.100463 s. Die 30. Berechnung der Primzahlen mit 750 Thread(s) ist korrekt.
		31. Berechnung: 4.108825 s. Die 31. Berechnung der Primzahlen mit 750 Thread(s) ist korrekt.
		32. Berechnung: 4.127928 s. Die 32. Berechnung der Primzahlen mit 750 Thread(s) ist korrekt.
		33. Berechnung: 4.057808 s. Die 33. Berechnung der Primzahlen mit 750 Thread(s) ist korrekt.
		34. Berechnung: 4.099367 s. Die 34. Berechnung der Primzahlen mit 750 Thread(s) ist korrekt.
		35. Berechnung: 4.097515 s. Die 35. Berechnung der Primzahlen mit 750 Thread(s) ist korrekt.
		36. Berechnung: 4.073154 s. Die 36. Berechnung der Primzahlen mit 750 Thread(s) ist korrekt.
		37. Berechnung: 4.081678 s. Die 37. Berechnung der Primzahlen mit 750 Thread(s) ist korrekt.
		38. Berechnung: 4.069917 s. Die 38. Berechnung der Primzahlen mit 750 Thread(s) ist korrekt.
		39. Berechnung: 4.143388 s. Die 39. Berechnung der Primzahlen mit 750 Thread(s) ist korrekt.
		40. Berechnung: 4.090689 s. Die 40. Berechnung der Primzahlen mit 750 Thread(s) ist korrekt.
		41. Berechnung: 4.049260 s. Die 41. Berechnung der Primzahlen mit 750 Thread(s) ist korrekt.
		42. Berechnung: 4.076417 s. Die 42. Berechnung der Primzahlen mit 750 Thread(s) ist korrekt.
		43. Berechnung: 4.099383 s. Die 43. Berechnung der Primzahlen mit 750 Thread(s) ist korrekt.
		44. Berechnung: 4.070997 s. Die 44. Berechnung der Primzahlen mit 750 Thread(s) ist korrekt.
		45. Berechnung: 4.098007 s. Die 45. Berechnung der Primzahlen mit 750 Thread(s) ist korrekt.
		46. Berechnung: 4.094731 s. Die 46. Berechnung der Primzahlen mit 750 Thread(s) ist korrekt.
		47. Berechnung: 4.106946 s. Die 47. Berechnung der Primzahlen mit 750 Thread(s) ist korrekt.
		48. Berechnung: 4.117349 s. Die 48. Berechnung der Primzahlen mit 750 Thread(s) ist korrekt.
		49. Berechnung: 4.071582 s. Die 49. Berechnung der Primzahlen mit 750 Thread(s) ist korrekt.
		50. Berechnung: 4.103365 s. Die 50. Berechnung der Primzahlen mit 750 Thread(s) ist korrekt.
		Durchschnittliche Ausfuehrungszeit des Programmes bei 50 Durchlaeufen mit 750 Thread(s): 4.092173 s. Alle berechneten Primzahlen mit 750 Thread(s) sind korrekt.
	Berechnung mittels 800 Thread(s):
		1. Berechnung: 4.039747 s. Die 1. Berechnung der Primzahlen mit 800 Thread(s) ist korrekt.
		2. Berechnung: 4.050449 s. Die 2. Berechnung der Primzahlen mit 800 Thread(s) ist korrekt.
		3. Berechnung: 4.039264 s. Die 3. Berechnung der Primzahlen mit 800 Thread(s) ist korrekt.
		4. Berechnung: 4.056331 s. Die 4. Berechnung der Primzahlen mit 800 Thread(s) ist korrekt.
		5. Berechnung: 4.060517 s. Die 5. Berechnung der Primzahlen mit 800 Thread(s) ist korrekt.
		6. Berechnung: 4.035195 s. Die 6. Berechnung der Primzahlen mit 800 Thread(s) ist korrekt.
		7. Berechnung: 4.035101 s. Die 7. Berechnung der Primzahlen mit 800 Thread(s) ist korrekt.
		8. Berechnung: 4.038603 s. Die 8. Berechnung der Primzahlen mit 800 Thread(s) ist korrekt.
		9. Berechnung: 4.045177 s. Die 9. Berechnung der Primzahlen mit 800 Thread(s) ist korrekt.
		10. Berechnung: 4.043500 s. Die 10. Berechnung der Primzahlen mit 800 Thread(s) ist korrekt.
		11. Berechnung: 4.049880 s. Die 11. Berechnung der Primzahlen mit 800 Thread(s) ist korrekt.
		12. Berechnung: 4.054684 s. Die 12. Berechnung der Primzahlen mit 800 Thread(s) ist korrekt.
		13. Berechnung: 4.049015 s. Die 13. Berechnung der Primzahlen mit 800 Thread(s) ist korrekt.
		14. Berechnung: 4.049757 s. Die 14. Berechnung der Primzahlen mit 800 Thread(s) ist korrekt.
		15. Berechnung: 4.049458 s. Die 15. Berechnung der Primzahlen mit 800 Thread(s) ist korrekt.
		16. Berechnung: 4.047096 s. Die 16. Berechnung der Primzahlen mit 800 Thread(s) ist korrekt.
		17. Berechnung: 4.053136 s. Die 17. Berechnung der Primzahlen mit 800 Thread(s) ist korrekt.
		18. Berechnung: 4.034925 s. Die 18. Berechnung der Primzahlen mit 800 Thread(s) ist korrekt.
		19. Berechnung: 4.041005 s. Die 19. Berechnung der Primzahlen mit 800 Thread(s) ist korrekt.
		20. Berechnung: 4.042850 s. Die 20. Berechnung der Primzahlen mit 800 Thread(s) ist korrekt.
		21. Berechnung: 4.034391 s. Die 21. Berechnung der Primzahlen mit 800 Thread(s) ist korrekt.
		22. Berechnung: 4.044818 s. Die 22. Berechnung der Primzahlen mit 800 Thread(s) ist korrekt.
		23. Berechnung: 4.042514 s. Die 23. Berechnung der Primzahlen mit 800 Thread(s) ist korrekt.
		24. Berechnung: 4.048876 s. Die 24. Berechnung der Primzahlen mit 800 Thread(s) ist korrekt.
		25. Berechnung: 4.049638 s. Die 25. Berechnung der Primzahlen mit 800 Thread(s) ist korrekt.
		26. Berechnung: 4.098813 s. Die 26. Berechnung der Primzahlen mit 800 Thread(s) ist korrekt.
		27. Berechnung: 4.042070 s. Die 27. Berechnung der Primzahlen mit 800 Thread(s) ist korrekt.
		28. Berechnung: 4.053360 s. Die 28. Berechnung der Primzahlen mit 800 Thread(s) ist korrekt.
		29. Berechnung: 4.041772 s. Die 29. Berechnung der Primzahlen mit 800 Thread(s) ist korrekt.
		30. Berechnung: 4.044729 s. Die 30. Berechnung der Primzahlen mit 800 Thread(s) ist korrekt.
		31. Berechnung: 4.035695 s. Die 31. Berechnung der Primzahlen mit 800 Thread(s) ist korrekt.
		32. Berechnung: 4.050146 s. Die 32. Berechnung der Primzahlen mit 800 Thread(s) ist korrekt.
		33. Berechnung: 4.038757 s. Die 33. Berechnung der Primzahlen mit 800 Thread(s) ist korrekt.
		34. Berechnung: 4.057535 s. Die 34. Berechnung der Primzahlen mit 800 Thread(s) ist korrekt.
		35. Berechnung: 4.043106 s. Die 35. Berechnung der Primzahlen mit 800 Thread(s) ist korrekt.
		36. Berechnung: 4.032801 s. Die 36. Berechnung der Primzahlen mit 800 Thread(s) ist korrekt.
		37. Berechnung: 4.042055 s. Die 37. Berechnung der Primzahlen mit 800 Thread(s) ist korrekt.
		38. Berechnung: 4.055754 s. Die 38. Berechnung der Primzahlen mit 800 Thread(s) ist korrekt.
		39. Berechnung: 4.044602 s. Die 39. Berechnung der Primzahlen mit 800 Thread(s) ist korrekt.
		40. Berechnung: 4.047741 s. Die 40. Berechnung der Primzahlen mit 800 Thread(s) ist korrekt.
		41. Berechnung: 4.066479 s. Die 41. Berechnung der Primzahlen mit 800 Thread(s) ist korrekt.
		42. Berechnung: 4.030732 s. Die 42. Berechnung der Primzahlen mit 800 Thread(s) ist korrekt.
		43. Berechnung: 4.047092 s. Die 43. Berechnung der Primzahlen mit 800 Thread(s) ist korrekt.
		44. Berechnung: 4.045089 s. Die 44. Berechnung der Primzahlen mit 800 Thread(s) ist korrekt.
		45. Berechnung: 4.049209 s. Die 45. Berechnung der Primzahlen mit 800 Thread(s) ist korrekt.
		46. Berechnung: 4.045743 s. Die 46. Berechnung der Primzahlen mit 800 Thread(s) ist korrekt.
		47. Berechnung: 4.045891 s. Die 47. Berechnung der Primzahlen mit 800 Thread(s) ist korrekt.
		48. Berechnung: 4.042505 s. Die 48. Berechnung der Primzahlen mit 800 Thread(s) ist korrekt.
		49. Berechnung: 4.085674 s. Die 49. Berechnung der Primzahlen mit 800 Thread(s) ist korrekt.
		50. Berechnung: 4.050173 s. Die 50. Berechnung der Primzahlen mit 800 Thread(s) ist korrekt.
		Durchschnittliche Ausfuehrungszeit des Programmes bei 50 Durchlaeufen mit 800 Thread(s): 4.047469 s. Alle berechneten Primzahlen mit 800 Thread(s) sind korrekt.
	Berechnung mittels 850 Thread(s):
		1. Berechnung: 4.167126 s. Die 1. Berechnung der Primzahlen mit 850 Thread(s) ist korrekt.
		2. Berechnung: 4.154765 s. Die 2. Berechnung der Primzahlen mit 850 Thread(s) ist korrekt.
		3. Berechnung: 4.144401 s. Die 3. Berechnung der Primzahlen mit 850 Thread(s) ist korrekt.
		4. Berechnung: 4.163311 s. Die 4. Berechnung der Primzahlen mit 850 Thread(s) ist korrekt.
		5. Berechnung: 4.176062 s. Die 5. Berechnung der Primzahlen mit 850 Thread(s) ist korrekt.
		6. Berechnung: 4.183051 s. Die 6. Berechnung der Primzahlen mit 850 Thread(s) ist korrekt.
		7. Berechnung: 4.176701 s. Die 7. Berechnung der Primzahlen mit 850 Thread(s) ist korrekt.
		8. Berechnung: 4.163943 s. Die 8. Berechnung der Primzahlen mit 850 Thread(s) ist korrekt.
		9. Berechnung: 4.165070 s. Die 9. Berechnung der Primzahlen mit 850 Thread(s) ist korrekt.
		10. Berechnung: 4.142097 s. Die 10. Berechnung der Primzahlen mit 850 Thread(s) ist korrekt.
		11. Berechnung: 4.152146 s. Die 11. Berechnung der Primzahlen mit 850 Thread(s) ist korrekt.
		12. Berechnung: 4.198728 s. Die 12. Berechnung der Primzahlen mit 850 Thread(s) ist korrekt.
		13. Berechnung: 4.151676 s. Die 13. Berechnung der Primzahlen mit 850 Thread(s) ist korrekt.
		14. Berechnung: 4.160849 s. Die 14. Berechnung der Primzahlen mit 850 Thread(s) ist korrekt.
		15. Berechnung: 4.152558 s. Die 15. Berechnung der Primzahlen mit 850 Thread(s) ist korrekt.
		16. Berechnung: 4.161597 s. Die 16. Berechnung der Primzahlen mit 850 Thread(s) ist korrekt.
		17. Berechnung: 4.168354 s. Die 17. Berechnung der Primzahlen mit 850 Thread(s) ist korrekt.
		18. Berechnung: 4.146319 s. Die 18. Berechnung der Primzahlen mit 850 Thread(s) ist korrekt.
		19. Berechnung: 4.172252 s. Die 19. Berechnung der Primzahlen mit 850 Thread(s) ist korrekt.
		20. Berechnung: 4.085494 s. Die 20. Berechnung der Primzahlen mit 850 Thread(s) ist korrekt.
		21. Berechnung: 4.169607 s. Die 21. Berechnung der Primzahlen mit 850 Thread(s) ist korrekt.
		22. Berechnung: 4.171958 s. Die 22. Berechnung der Primzahlen mit 850 Thread(s) ist korrekt.
		23. Berechnung: 4.126107 s. Die 23. Berechnung der Primzahlen mit 850 Thread(s) ist korrekt.
		24. Berechnung: 4.136686 s. Die 24. Berechnung der Primzahlen mit 850 Thread(s) ist korrekt.
		25. Berechnung: 4.158907 s. Die 25. Berechnung der Primzahlen mit 850 Thread(s) ist korrekt.
		26. Berechnung: 4.145231 s. Die 26. Berechnung der Primzahlen mit 850 Thread(s) ist korrekt.
		27. Berechnung: 4.169905 s. Die 27. Berechnung der Primzahlen mit 850 Thread(s) ist korrekt.
		28. Berechnung: 4.160038 s. Die 28. Berechnung der Primzahlen mit 850 Thread(s) ist korrekt.
		29. Berechnung: 4.158052 s. Die 29. Berechnung der Primzahlen mit 850 Thread(s) ist korrekt.
		30. Berechnung: 4.165665 s. Die 30. Berechnung der Primzahlen mit 850 Thread(s) ist korrekt.
		31. Berechnung: 4.150650 s. Die 31. Berechnung der Primzahlen mit 850 Thread(s) ist korrekt.
		32. Berechnung: 4.143642 s. Die 32. Berechnung der Primzahlen mit 850 Thread(s) ist korrekt.
		33. Berechnung: 4.180906 s. Die 33. Berechnung der Primzahlen mit 850 Thread(s) ist korrekt.
		34. Berechnung: 4.082052 s. Die 34. Berechnung der Primzahlen mit 850 Thread(s) ist korrekt.
		35. Berechnung: 4.161021 s. Die 35. Berechnung der Primzahlen mit 850 Thread(s) ist korrekt.
		36. Berechnung: 4.083813 s. Die 36. Berechnung der Primzahlen mit 850 Thread(s) ist korrekt.
		37. Berechnung: 4.173986 s. Die 37. Berechnung der Primzahlen mit 850 Thread(s) ist korrekt.
		38. Berechnung: 4.159205 s. Die 38. Berechnung der Primzahlen mit 850 Thread(s) ist korrekt.
		39. Berechnung: 4.072085 s. Die 39. Berechnung der Primzahlen mit 850 Thread(s) ist korrekt.
		40. Berechnung: 4.158663 s. Die 40. Berechnung der Primzahlen mit 850 Thread(s) ist korrekt.
		41. Berechnung: 4.178882 s. Die 41. Berechnung der Primzahlen mit 850 Thread(s) ist korrekt.
		42. Berechnung: 4.166364 s. Die 42. Berechnung der Primzahlen mit 850 Thread(s) ist korrekt.
		43. Berechnung: 4.125043 s. Die 43. Berechnung der Primzahlen mit 850 Thread(s) ist korrekt.
		44. Berechnung: 4.166776 s. Die 44. Berechnung der Primzahlen mit 850 Thread(s) ist korrekt.
		45. Berechnung: 4.154451 s. Die 45. Berechnung der Primzahlen mit 850 Thread(s) ist korrekt.
		46. Berechnung: 4.156172 s. Die 46. Berechnung der Primzahlen mit 850 Thread(s) ist korrekt.
		47. Berechnung: 4.173869 s. Die 47. Berechnung der Primzahlen mit 850 Thread(s) ist korrekt.
		48. Berechnung: 4.202338 s. Die 48. Berechnung der Primzahlen mit 850 Thread(s) ist korrekt.
		49. Berechnung: 4.158423 s. Die 49. Berechnung der Primzahlen mit 850 Thread(s) ist korrekt.
		50. Berechnung: 4.158364 s. Die 50. Berechnung der Primzahlen mit 850 Thread(s) ist korrekt.
		Durchschnittliche Ausfuehrungszeit des Programmes bei 50 Durchlaeufen mit 850 Thread(s): 4.155107 s. Alle berechneten Primzahlen mit 850 Thread(s) sind korrekt.
	Berechnung mittels 900 Thread(s):
		1. Berechnung: 4.062084 s. Die 1. Berechnung der Primzahlen mit 900 Thread(s) ist korrekt.
		2. Berechnung: 4.051484 s. Die 2. Berechnung der Primzahlen mit 900 Thread(s) ist korrekt.
		3. Berechnung: 4.044253 s. Die 3. Berechnung der Primzahlen mit 900 Thread(s) ist korrekt.
		4. Berechnung: 4.065675 s. Die 4. Berechnung der Primzahlen mit 900 Thread(s) ist korrekt.
		5. Berechnung: 4.042055 s. Die 5. Berechnung der Primzahlen mit 900 Thread(s) ist korrekt.
		6. Berechnung: 4.115435 s. Die 6. Berechnung der Primzahlen mit 900 Thread(s) ist korrekt.
		7. Berechnung: 4.341728 s. Die 7. Berechnung der Primzahlen mit 900 Thread(s) ist korrekt.
		8. Berechnung: 4.054280 s. Die 8. Berechnung der Primzahlen mit 900 Thread(s) ist korrekt.
		9. Berechnung: 4.083579 s. Die 9. Berechnung der Primzahlen mit 900 Thread(s) ist korrekt.
		10. Berechnung: 4.040007 s. Die 10. Berechnung der Primzahlen mit 900 Thread(s) ist korrekt.
		11. Berechnung: 4.053826 s. Die 11. Berechnung der Primzahlen mit 900 Thread(s) ist korrekt.
		12. Berechnung: 4.089011 s. Die 12. Berechnung der Primzahlen mit 900 Thread(s) ist korrekt.
		13. Berechnung: 4.042485 s. Die 13. Berechnung der Primzahlen mit 900 Thread(s) ist korrekt.
		14. Berechnung: 4.054613 s. Die 14. Berechnung der Primzahlen mit 900 Thread(s) ist korrekt.
		15. Berechnung: 4.068442 s. Die 15. Berechnung der Primzahlen mit 900 Thread(s) ist korrekt.
		16. Berechnung: 4.058757 s. Die 16. Berechnung der Primzahlen mit 900 Thread(s) ist korrekt.
		17. Berechnung: 4.037335 s. Die 17. Berechnung der Primzahlen mit 900 Thread(s) ist korrekt.
		18. Berechnung: 4.045555 s. Die 18. Berechnung der Primzahlen mit 900 Thread(s) ist korrekt.
		19. Berechnung: 4.035820 s. Die 19. Berechnung der Primzahlen mit 900 Thread(s) ist korrekt.
		20. Berechnung: 4.041578 s. Die 20. Berechnung der Primzahlen mit 900 Thread(s) ist korrekt.
		21. Berechnung: 4.047868 s. Die 21. Berechnung der Primzahlen mit 900 Thread(s) ist korrekt.
		22. Berechnung: 4.060367 s. Die 22. Berechnung der Primzahlen mit 900 Thread(s) ist korrekt.
		23. Berechnung: 4.133374 s. Die 23. Berechnung der Primzahlen mit 900 Thread(s) ist korrekt.
		24. Berechnung: 4.058695 s. Die 24. Berechnung der Primzahlen mit 900 Thread(s) ist korrekt.
		25. Berechnung: 4.039179 s. Die 25. Berechnung der Primzahlen mit 900 Thread(s) ist korrekt.
		26. Berechnung: 4.035817 s. Die 26. Berechnung der Primzahlen mit 900 Thread(s) ist korrekt.
		27. Berechnung: 4.057026 s. Die 27. Berechnung der Primzahlen mit 900 Thread(s) ist korrekt.
		28. Berechnung: 4.061357 s. Die 28. Berechnung der Primzahlen mit 900 Thread(s) ist korrekt.
		29. Berechnung: 4.095107 s. Die 29. Berechnung der Primzahlen mit 900 Thread(s) ist korrekt.
		30. Berechnung: 4.068984 s. Die 30. Berechnung der Primzahlen mit 900 Thread(s) ist korrekt.
		31. Berechnung: 4.048545 s. Die 31. Berechnung der Primzahlen mit 900 Thread(s) ist korrekt.
		32. Berechnung: 4.074915 s. Die 32. Berechnung der Primzahlen mit 900 Thread(s) ist korrekt.
		33. Berechnung: 4.066074 s. Die 33. Berechnung der Primzahlen mit 900 Thread(s) ist korrekt.
		34. Berechnung: 4.062934 s. Die 34. Berechnung der Primzahlen mit 900 Thread(s) ist korrekt.
		35. Berechnung: 4.092530 s. Die 35. Berechnung der Primzahlen mit 900 Thread(s) ist korrekt.
		36. Berechnung: 4.060464 s. Die 36. Berechnung der Primzahlen mit 900 Thread(s) ist korrekt.
		37. Berechnung: 4.083362 s. Die 37. Berechnung der Primzahlen mit 900 Thread(s) ist korrekt.
		38. Berechnung: 4.044585 s. Die 38. Berechnung der Primzahlen mit 900 Thread(s) ist korrekt.
		39. Berechnung: 4.053807 s. Die 39. Berechnung der Primzahlen mit 900 Thread(s) ist korrekt.
		40. Berechnung: 4.035305 s. Die 40. Berechnung der Primzahlen mit 900 Thread(s) ist korrekt.
		41. Berechnung: 4.048428 s. Die 41. Berechnung der Primzahlen mit 900 Thread(s) ist korrekt.
		42. Berechnung: 4.078755 s. Die 42. Berechnung der Primzahlen mit 900 Thread(s) ist korrekt.
		43. Berechnung: 4.050551 s. Die 43. Berechnung der Primzahlen mit 900 Thread(s) ist korrekt.
		44. Berechnung: 4.073937 s. Die 44. Berechnung der Primzahlen mit 900 Thread(s) ist korrekt.
		45. Berechnung: 4.053470 s. Die 45. Berechnung der Primzahlen mit 900 Thread(s) ist korrekt.
		46. Berechnung: 4.088541 s. Die 46. Berechnung der Primzahlen mit 900 Thread(s) ist korrekt.
		47. Berechnung: 4.059624 s. Die 47. Berechnung der Primzahlen mit 900 Thread(s) ist korrekt.
		48. Berechnung: 4.049772 s. Die 48. Berechnung der Primzahlen mit 900 Thread(s) ist korrekt.
		49. Berechnung: 4.066072 s. Die 49. Berechnung der Primzahlen mit 900 Thread(s) ist korrekt.
		50. Berechnung: 4.061453 s. Die 50. Berechnung der Primzahlen mit 900 Thread(s) ist korrekt.
		Durchschnittliche Ausfuehrungszeit des Programmes bei 50 Durchlaeufen mit 900 Thread(s): 4.066778 s. Alle berechneten Primzahlen mit 900 Thread(s) sind korrekt.
	Berechnung mittels 950 Thread(s):
		1. Berechnung: 4.101277 s. Die 1. Berechnung der Primzahlen mit 950 Thread(s) ist korrekt.
		2. Berechnung: 4.083381 s. Die 2. Berechnung der Primzahlen mit 950 Thread(s) ist korrekt.
		3. Berechnung: 4.096426 s. Die 3. Berechnung der Primzahlen mit 950 Thread(s) ist korrekt.
		4. Berechnung: 4.087225 s. Die 4. Berechnung der Primzahlen mit 950 Thread(s) ist korrekt.
		5. Berechnung: 4.090708 s. Die 5. Berechnung der Primzahlen mit 950 Thread(s) ist korrekt.
		6. Berechnung: 4.106633 s. Die 6. Berechnung der Primzahlen mit 950 Thread(s) ist korrekt.
		7. Berechnung: 4.051091 s. Die 7. Berechnung der Primzahlen mit 950 Thread(s) ist korrekt.
		8. Berechnung: 4.100683 s. Die 8. Berechnung der Primzahlen mit 950 Thread(s) ist korrekt.
		9. Berechnung: 4.124353 s. Die 9. Berechnung der Primzahlen mit 950 Thread(s) ist korrekt.
		10. Berechnung: 4.100140 s. Die 10. Berechnung der Primzahlen mit 950 Thread(s) ist korrekt.
		11. Berechnung: 4.044530 s. Die 11. Berechnung der Primzahlen mit 950 Thread(s) ist korrekt.
		12. Berechnung: 4.082883 s. Die 12. Berechnung der Primzahlen mit 950 Thread(s) ist korrekt.
		13. Berechnung: 4.103567 s. Die 13. Berechnung der Primzahlen mit 950 Thread(s) ist korrekt.
		14. Berechnung: 4.096672 s. Die 14. Berechnung der Primzahlen mit 950 Thread(s) ist korrekt.
		15. Berechnung: 4.089895 s. Die 15. Berechnung der Primzahlen mit 950 Thread(s) ist korrekt.
		16. Berechnung: 4.047586 s. Die 16. Berechnung der Primzahlen mit 950 Thread(s) ist korrekt.
		17. Berechnung: 4.146211 s. Die 17. Berechnung der Primzahlen mit 950 Thread(s) ist korrekt.
		18. Berechnung: 4.090076 s. Die 18. Berechnung der Primzahlen mit 950 Thread(s) ist korrekt.
		19. Berechnung: 4.067335 s. Die 19. Berechnung der Primzahlen mit 950 Thread(s) ist korrekt.
		20. Berechnung: 4.075625 s. Die 20. Berechnung der Primzahlen mit 950 Thread(s) ist korrekt.
		21. Berechnung: 4.123232 s. Die 21. Berechnung der Primzahlen mit 950 Thread(s) ist korrekt.
		22. Berechnung: 4.136740 s. Die 22. Berechnung der Primzahlen mit 950 Thread(s) ist korrekt.
		23. Berechnung: 4.109887 s. Die 23. Berechnung der Primzahlen mit 950 Thread(s) ist korrekt.
		24. Berechnung: 4.096545 s. Die 24. Berechnung der Primzahlen mit 950 Thread(s) ist korrekt.
		25. Berechnung: 4.092594 s. Die 25. Berechnung der Primzahlen mit 950 Thread(s) ist korrekt.
		26. Berechnung: 4.084340 s. Die 26. Berechnung der Primzahlen mit 950 Thread(s) ist korrekt.
		27. Berechnung: 4.102450 s. Die 27. Berechnung der Primzahlen mit 950 Thread(s) ist korrekt.
		28. Berechnung: 4.090684 s. Die 28. Berechnung der Primzahlen mit 950 Thread(s) ist korrekt.
		29. Berechnung: 4.070980 s. Die 29. Berechnung der Primzahlen mit 950 Thread(s) ist korrekt.
		30. Berechnung: 4.107418 s. Die 30. Berechnung der Primzahlen mit 950 Thread(s) ist korrekt.
		31. Berechnung: 4.120178 s. Die 31. Berechnung der Primzahlen mit 950 Thread(s) ist korrekt.
		32. Berechnung: 4.063575 s. Die 32. Berechnung der Primzahlen mit 950 Thread(s) ist korrekt.
		33. Berechnung: 4.093467 s. Die 33. Berechnung der Primzahlen mit 950 Thread(s) ist korrekt.
		34. Berechnung: 4.079253 s. Die 34. Berechnung der Primzahlen mit 950 Thread(s) ist korrekt.
		35. Berechnung: 4.091072 s. Die 35. Berechnung der Primzahlen mit 950 Thread(s) ist korrekt.
		36. Berechnung: 4.100774 s. Die 36. Berechnung der Primzahlen mit 950 Thread(s) ist korrekt.
		37. Berechnung: 4.086721 s. Die 37. Berechnung der Primzahlen mit 950 Thread(s) ist korrekt.
		38. Berechnung: 4.096951 s. Die 38. Berechnung der Primzahlen mit 950 Thread(s) ist korrekt.
		39. Berechnung: 4.447193 s. Die 39. Berechnung der Primzahlen mit 950 Thread(s) ist korrekt.
		40. Berechnung: 5.028319 s. Die 40. Berechnung der Primzahlen mit 950 Thread(s) ist korrekt.
		41. Berechnung: 5.117484 s. Die 41. Berechnung der Primzahlen mit 950 Thread(s) ist korrekt.
		42. Berechnung: 4.413831 s. Die 42. Berechnung der Primzahlen mit 950 Thread(s) ist korrekt.
		43. Berechnung: 4.100399 s. Die 43. Berechnung der Primzahlen mit 950 Thread(s) ist korrekt.
		44. Berechnung: 4.041649 s. Die 44. Berechnung der Primzahlen mit 950 Thread(s) ist korrekt.
		45. Berechnung: 4.059685 s. Die 45. Berechnung der Primzahlen mit 950 Thread(s) ist korrekt.
		46. Berechnung: 4.040192 s. Die 46. Berechnung der Primzahlen mit 950 Thread(s) ist korrekt.
		47. Berechnung: 4.125040 s. Die 47. Berechnung der Primzahlen mit 950 Thread(s) ist korrekt.
		48. Berechnung: 4.090684 s. Die 48. Berechnung der Primzahlen mit 950 Thread(s) ist korrekt.
		49. Berechnung: 4.074889 s. Die 49. Berechnung der Primzahlen mit 950 Thread(s) ist korrekt.
		50. Berechnung: 4.057321 s. Die 50. Berechnung der Primzahlen mit 950 Thread(s) ist korrekt.
		Durchschnittliche Ausfuehrungszeit des Programmes bei 50 Durchlaeufen mit 950 Thread(s): 4.142597 s. Alle berechneten Primzahlen mit 950 Thread(s) sind korrekt.
	Berechnung mittels 1000 Thread(s):
		1. Berechnung: 4.061409 s. Die 1. Berechnung der Primzahlen mit 1000 Thread(s) ist korrekt.
		2. Berechnung: 4.054681 s. Die 2. Berechnung der Primzahlen mit 1000 Thread(s) ist korrekt.
		3. Berechnung: 4.047498 s. Die 3. Berechnung der Primzahlen mit 1000 Thread(s) ist korrekt.
		4. Berechnung: 4.046657 s. Die 4. Berechnung der Primzahlen mit 1000 Thread(s) ist korrekt.
		5. Berechnung: 4.041470 s. Die 5. Berechnung der Primzahlen mit 1000 Thread(s) ist korrekt.
		6. Berechnung: 4.041579 s. Die 6. Berechnung der Primzahlen mit 1000 Thread(s) ist korrekt.
		7. Berechnung: 4.046499 s. Die 7. Berechnung der Primzahlen mit 1000 Thread(s) ist korrekt.
		8. Berechnung: 4.069977 s. Die 8. Berechnung der Primzahlen mit 1000 Thread(s) ist korrekt.
		9. Berechnung: 4.065758 s. Die 9. Berechnung der Primzahlen mit 1000 Thread(s) ist korrekt.
		10. Berechnung: 4.162331 s. Die 10. Berechnung der Primzahlen mit 1000 Thread(s) ist korrekt.
		11. Berechnung: 4.039325 s. Die 11. Berechnung der Primzahlen mit 1000 Thread(s) ist korrekt.
		12. Berechnung: 4.039828 s. Die 12. Berechnung der Primzahlen mit 1000 Thread(s) ist korrekt.
		13. Berechnung: 4.040344 s. Die 13. Berechnung der Primzahlen mit 1000 Thread(s) ist korrekt.
		14. Berechnung: 4.045838 s. Die 14. Berechnung der Primzahlen mit 1000 Thread(s) ist korrekt.
		15. Berechnung: 4.037961 s. Die 15. Berechnung der Primzahlen mit 1000 Thread(s) ist korrekt.
		16. Berechnung: 4.036829 s. Die 16. Berechnung der Primzahlen mit 1000 Thread(s) ist korrekt.
		17. Berechnung: 4.053240 s. Die 17. Berechnung der Primzahlen mit 1000 Thread(s) ist korrekt.
		18. Berechnung: 4.042618 s. Die 18. Berechnung der Primzahlen mit 1000 Thread(s) ist korrekt.
		19. Berechnung: 4.027710 s. Die 19. Berechnung der Primzahlen mit 1000 Thread(s) ist korrekt.
		20. Berechnung: 4.045517 s. Die 20. Berechnung der Primzahlen mit 1000 Thread(s) ist korrekt.
		21. Berechnung: 4.154957 s. Die 21. Berechnung der Primzahlen mit 1000 Thread(s) ist korrekt.
		22. Berechnung: 4.038227 s. Die 22. Berechnung der Primzahlen mit 1000 Thread(s) ist korrekt.
		23. Berechnung: 4.049243 s. Die 23. Berechnung der Primzahlen mit 1000 Thread(s) ist korrekt.
		24. Berechnung: 4.067521 s. Die 24. Berechnung der Primzahlen mit 1000 Thread(s) ist korrekt.
		25. Berechnung: 4.038880 s. Die 25. Berechnung der Primzahlen mit 1000 Thread(s) ist korrekt.
		26. Berechnung: 4.037931 s. Die 26. Berechnung der Primzahlen mit 1000 Thread(s) ist korrekt.
		27. Berechnung: 4.041590 s. Die 27. Berechnung der Primzahlen mit 1000 Thread(s) ist korrekt.
		28. Berechnung: 4.038211 s. Die 28. Berechnung der Primzahlen mit 1000 Thread(s) ist korrekt.
		29. Berechnung: 4.048727 s. Die 29. Berechnung der Primzahlen mit 1000 Thread(s) ist korrekt.
		30. Berechnung: 4.054787 s. Die 30. Berechnung der Primzahlen mit 1000 Thread(s) ist korrekt.
		31. Berechnung: 4.039413 s. Die 31. Berechnung der Primzahlen mit 1000 Thread(s) ist korrekt.
		32. Berechnung: 4.064495 s. Die 32. Berechnung der Primzahlen mit 1000 Thread(s) ist korrekt.
		33. Berechnung: 4.054411 s. Die 33. Berechnung der Primzahlen mit 1000 Thread(s) ist korrekt.
		34. Berechnung: 4.075634 s. Die 34. Berechnung der Primzahlen mit 1000 Thread(s) ist korrekt.
		35. Berechnung: 4.051195 s. Die 35. Berechnung der Primzahlen mit 1000 Thread(s) ist korrekt.
		36. Berechnung: 4.054501 s. Die 36. Berechnung der Primzahlen mit 1000 Thread(s) ist korrekt.
		37. Berechnung: 4.044457 s. Die 37. Berechnung der Primzahlen mit 1000 Thread(s) ist korrekt.
		38. Berechnung: 4.040926 s. Die 38. Berechnung der Primzahlen mit 1000 Thread(s) ist korrekt.
		39. Berechnung: 4.075437 s. Die 39. Berechnung der Primzahlen mit 1000 Thread(s) ist korrekt.
		40. Berechnung: 4.041829 s. Die 40. Berechnung der Primzahlen mit 1000 Thread(s) ist korrekt.
		41. Berechnung: 4.053248 s. Die 41. Berechnung der Primzahlen mit 1000 Thread(s) ist korrekt.
		42. Berechnung: 4.039342 s. Die 42. Berechnung der Primzahlen mit 1000 Thread(s) ist korrekt.
		43. Berechnung: 4.053886 s. Die 43. Berechnung der Primzahlen mit 1000 Thread(s) ist korrekt.
		44. Berechnung: 4.048550 s. Die 44. Berechnung der Primzahlen mit 1000 Thread(s) ist korrekt.
		45. Berechnung: 4.077761 s. Die 45. Berechnung der Primzahlen mit 1000 Thread(s) ist korrekt.
		46. Berechnung: 4.053750 s. Die 46. Berechnung der Primzahlen mit 1000 Thread(s) ist korrekt.
		47. Berechnung: 4.044309 s. Die 47. Berechnung der Primzahlen mit 1000 Thread(s) ist korrekt.
		48. Berechnung: 4.050644 s. Die 48. Berechnung der Primzahlen mit 1000 Thread(s) ist korrekt.
		49. Berechnung: 4.042189 s. Die 49. Berechnung der Primzahlen mit 1000 Thread(s) ist korrekt.
		50. Berechnung: 4.036391 s. Die 50. Berechnung der Primzahlen mit 1000 Thread(s) ist korrekt.
		Durchschnittliche Ausfuehrungszeit des Programmes bei 50 Durchlaeufen mit 1000 Thread(s): 4.053190 s. Alle berechneten Primzahlen mit 1000 Thread(s) sind korrekt.
	Berechnung mittels 2000 Thread(s):
		1. Berechnung: 4.069173 s. Die 1. Berechnung der Primzahlen mit 2000 Thread(s) ist korrekt.
		2. Berechnung: 4.072965 s. Die 2. Berechnung der Primzahlen mit 2000 Thread(s) ist korrekt.
		3. Berechnung: 4.071452 s. Die 3. Berechnung der Primzahlen mit 2000 Thread(s) ist korrekt.
		4. Berechnung: 4.084243 s. Die 4. Berechnung der Primzahlen mit 2000 Thread(s) ist korrekt.
		5. Berechnung: 4.078494 s. Die 5. Berechnung der Primzahlen mit 2000 Thread(s) ist korrekt.
		6. Berechnung: 4.079250 s. Die 6. Berechnung der Primzahlen mit 2000 Thread(s) ist korrekt.
		7. Berechnung: 4.071954 s. Die 7. Berechnung der Primzahlen mit 2000 Thread(s) ist korrekt.
		8. Berechnung: 4.071196 s. Die 8. Berechnung der Primzahlen mit 2000 Thread(s) ist korrekt.
		9. Berechnung: 4.084206 s. Die 9. Berechnung der Primzahlen mit 2000 Thread(s) ist korrekt.
		10. Berechnung: 4.058886 s. Die 10. Berechnung der Primzahlen mit 2000 Thread(s) ist korrekt.
		11. Berechnung: 4.067321 s. Die 11. Berechnung der Primzahlen mit 2000 Thread(s) ist korrekt.
		12. Berechnung: 4.111381 s. Die 12. Berechnung der Primzahlen mit 2000 Thread(s) ist korrekt.
		13. Berechnung: 4.068571 s. Die 13. Berechnung der Primzahlen mit 2000 Thread(s) ist korrekt.
		14. Berechnung: 4.067837 s. Die 14. Berechnung der Primzahlen mit 2000 Thread(s) ist korrekt.
		15. Berechnung: 4.068940 s. Die 15. Berechnung der Primzahlen mit 2000 Thread(s) ist korrekt.
		16. Berechnung: 4.053763 s. Die 16. Berechnung der Primzahlen mit 2000 Thread(s) ist korrekt.
		17. Berechnung: 4.065371 s. Die 17. Berechnung der Primzahlen mit 2000 Thread(s) ist korrekt.
		18. Berechnung: 4.067836 s. Die 18. Berechnung der Primzahlen mit 2000 Thread(s) ist korrekt.
		19. Berechnung: 4.092865 s. Die 19. Berechnung der Primzahlen mit 2000 Thread(s) ist korrekt.
		20. Berechnung: 4.177157 s. Die 20. Berechnung der Primzahlen mit 2000 Thread(s) ist korrekt.
		21. Berechnung: 4.079554 s. Die 21. Berechnung der Primzahlen mit 2000 Thread(s) ist korrekt.
		22. Berechnung: 4.067380 s. Die 22. Berechnung der Primzahlen mit 2000 Thread(s) ist korrekt.
		23. Berechnung: 4.067816 s. Die 23. Berechnung der Primzahlen mit 2000 Thread(s) ist korrekt.
		24. Berechnung: 4.067301 s. Die 24. Berechnung der Primzahlen mit 2000 Thread(s) ist korrekt.
		25. Berechnung: 4.096196 s. Die 25. Berechnung der Primzahlen mit 2000 Thread(s) ist korrekt.
		26. Berechnung: 4.093022 s. Die 26. Berechnung der Primzahlen mit 2000 Thread(s) ist korrekt.
		27. Berechnung: 4.060181 s. Die 27. Berechnung der Primzahlen mit 2000 Thread(s) ist korrekt.
		28. Berechnung: 4.078656 s. Die 28. Berechnung der Primzahlen mit 2000 Thread(s) ist korrekt.
		29. Berechnung: 4.074554 s. Die 29. Berechnung der Primzahlen mit 2000 Thread(s) ist korrekt.
		30. Berechnung: 4.070682 s. Die 30. Berechnung der Primzahlen mit 2000 Thread(s) ist korrekt.
		31. Berechnung: 4.139639 s. Die 31. Berechnung der Primzahlen mit 2000 Thread(s) ist korrekt.
		32. Berechnung: 4.058157 s. Die 32. Berechnung der Primzahlen mit 2000 Thread(s) ist korrekt.
		33. Berechnung: 4.072759 s. Die 33. Berechnung der Primzahlen mit 2000 Thread(s) ist korrekt.
		34. Berechnung: 4.105096 s. Die 34. Berechnung der Primzahlen mit 2000 Thread(s) ist korrekt.
		35. Berechnung: 4.064148 s. Die 35. Berechnung der Primzahlen mit 2000 Thread(s) ist korrekt.
		36. Berechnung: 4.063848 s. Die 36. Berechnung der Primzahlen mit 2000 Thread(s) ist korrekt.
		37. Berechnung: 4.069271 s. Die 37. Berechnung der Primzahlen mit 2000 Thread(s) ist korrekt.
		38. Berechnung: 4.074261 s. Die 38. Berechnung der Primzahlen mit 2000 Thread(s) ist korrekt.
		39. Berechnung: 4.059081 s. Die 39. Berechnung der Primzahlen mit 2000 Thread(s) ist korrekt.
		40. Berechnung: 4.072627 s. Die 40. Berechnung der Primzahlen mit 2000 Thread(s) ist korrekt.
		41. Berechnung: 4.090970 s. Die 41. Berechnung der Primzahlen mit 2000 Thread(s) ist korrekt.
		42. Berechnung: 4.062462 s. Die 42. Berechnung der Primzahlen mit 2000 Thread(s) ist korrekt.
		43. Berechnung: 4.069667 s. Die 43. Berechnung der Primzahlen mit 2000 Thread(s) ist korrekt.
		44. Berechnung: 4.070361 s. Die 44. Berechnung der Primzahlen mit 2000 Thread(s) ist korrekt.
		45. Berechnung: 4.068670 s. Die 45. Berechnung der Primzahlen mit 2000 Thread(s) ist korrekt.
		46. Berechnung: 4.053252 s. Die 46. Berechnung der Primzahlen mit 2000 Thread(s) ist korrekt.
		47. Berechnung: 4.066089 s. Die 47. Berechnung der Primzahlen mit 2000 Thread(s) ist korrekt.
		48. Berechnung: 4.085016 s. Die 48. Berechnung der Primzahlen mit 2000 Thread(s) ist korrekt.
		49. Berechnung: 4.088874 s. Die 49. Berechnung der Primzahlen mit 2000 Thread(s) ist korrekt.
		50. Berechnung: 4.066684 s. Die 50. Berechnung der Primzahlen mit 2000 Thread(s) ist korrekt.
		Durchschnittliche Ausfuehrungszeit des Programmes bei 50 Durchlaeufen mit 2000 Thread(s): 4.076783 s. Alle berechneten Primzahlen mit 2000 Thread(s) sind korrekt.
	Berechnung mittels 3000 Thread(s):
		1. Berechnung: 4.347213 s. Die 1. Berechnung der Primzahlen mit 3000 Thread(s) ist korrekt.
		2. Berechnung: 4.342970 s. Die 2. Berechnung der Primzahlen mit 3000 Thread(s) ist korrekt.
		3. Berechnung: 4.268800 s. Die 3. Berechnung der Primzahlen mit 3000 Thread(s) ist korrekt.
		4. Berechnung: 4.358599 s. Die 4. Berechnung der Primzahlen mit 3000 Thread(s) ist korrekt.
		5. Berechnung: 4.341771 s. Die 5. Berechnung der Primzahlen mit 3000 Thread(s) ist korrekt.
		6. Berechnung: 4.342702 s. Die 6. Berechnung der Primzahlen mit 3000 Thread(s) ist korrekt.
		7. Berechnung: 4.352643 s. Die 7. Berechnung der Primzahlen mit 3000 Thread(s) ist korrekt.
		8. Berechnung: 4.300972 s. Die 8. Berechnung der Primzahlen mit 3000 Thread(s) ist korrekt.
		9. Berechnung: 4.283844 s. Die 9. Berechnung der Primzahlen mit 3000 Thread(s) ist korrekt.
		10. Berechnung: 4.329326 s. Die 10. Berechnung der Primzahlen mit 3000 Thread(s) ist korrekt.
		11. Berechnung: 4.320231 s. Die 11. Berechnung der Primzahlen mit 3000 Thread(s) ist korrekt.
		12. Berechnung: 4.326475 s. Die 12. Berechnung der Primzahlen mit 3000 Thread(s) ist korrekt.
		13. Berechnung: 4.353966 s. Die 13. Berechnung der Primzahlen mit 3000 Thread(s) ist korrekt.
		14. Berechnung: 4.334085 s. Die 14. Berechnung der Primzahlen mit 3000 Thread(s) ist korrekt.
		15. Berechnung: 4.331238 s. Die 15. Berechnung der Primzahlen mit 3000 Thread(s) ist korrekt.
		16. Berechnung: 4.345775 s. Die 16. Berechnung der Primzahlen mit 3000 Thread(s) ist korrekt.
		17. Berechnung: 4.386611 s. Die 17. Berechnung der Primzahlen mit 3000 Thread(s) ist korrekt.
		18. Berechnung: 4.355811 s. Die 18. Berechnung der Primzahlen mit 3000 Thread(s) ist korrekt.
		19. Berechnung: 4.352834 s. Die 19. Berechnung der Primzahlen mit 3000 Thread(s) ist korrekt.
		20. Berechnung: 4.289984 s. Die 20. Berechnung der Primzahlen mit 3000 Thread(s) ist korrekt.
		21. Berechnung: 4.283121 s. Die 21. Berechnung der Primzahlen mit 3000 Thread(s) ist korrekt.
		22. Berechnung: 4.323330 s. Die 22. Berechnung der Primzahlen mit 3000 Thread(s) ist korrekt.
		23. Berechnung: 4.378265 s. Die 23. Berechnung der Primzahlen mit 3000 Thread(s) ist korrekt.
		24. Berechnung: 4.410620 s. Die 24. Berechnung der Primzahlen mit 3000 Thread(s) ist korrekt.
		25. Berechnung: 4.500319 s. Die 25. Berechnung der Primzahlen mit 3000 Thread(s) ist korrekt.
		26. Berechnung: 4.335278 s. Die 26. Berechnung der Primzahlen mit 3000 Thread(s) ist korrekt.
		27. Berechnung: 4.310509 s. Die 27. Berechnung der Primzahlen mit 3000 Thread(s) ist korrekt.
		28. Berechnung: 4.339716 s. Die 28. Berechnung der Primzahlen mit 3000 Thread(s) ist korrekt.
		29. Berechnung: 4.336704 s. Die 29. Berechnung der Primzahlen mit 3000 Thread(s) ist korrekt.
		30. Berechnung: 4.319569 s. Die 30. Berechnung der Primzahlen mit 3000 Thread(s) ist korrekt.
		31. Berechnung: 4.237138 s. Die 31. Berechnung der Primzahlen mit 3000 Thread(s) ist korrekt.
		32. Berechnung: 4.370850 s. Die 32. Berechnung der Primzahlen mit 3000 Thread(s) ist korrekt.
		33. Berechnung: 4.358869 s. Die 33. Berechnung der Primzahlen mit 3000 Thread(s) ist korrekt.
		34. Berechnung: 4.363894 s. Die 34. Berechnung der Primzahlen mit 3000 Thread(s) ist korrekt.
		35. Berechnung: 4.301906 s. Die 35. Berechnung der Primzahlen mit 3000 Thread(s) ist korrekt.
		36. Berechnung: 4.317806 s. Die 36. Berechnung der Primzahlen mit 3000 Thread(s) ist korrekt.
		37. Berechnung: 4.312695 s. Die 37. Berechnung der Primzahlen mit 3000 Thread(s) ist korrekt.
		38. Berechnung: 4.344445 s. Die 38. Berechnung der Primzahlen mit 3000 Thread(s) ist korrekt.
		39. Berechnung: 4.321619 s. Die 39. Berechnung der Primzahlen mit 3000 Thread(s) ist korrekt.
		40. Berechnung: 4.476404 s. Die 40. Berechnung der Primzahlen mit 3000 Thread(s) ist korrekt.
		41. Berechnung: 4.327315 s. Die 41. Berechnung der Primzahlen mit 3000 Thread(s) ist korrekt.
		42. Berechnung: 4.347879 s. Die 42. Berechnung der Primzahlen mit 3000 Thread(s) ist korrekt.
		43. Berechnung: 4.353687 s. Die 43. Berechnung der Primzahlen mit 3000 Thread(s) ist korrekt.
		44. Berechnung: 4.337441 s. Die 44. Berechnung der Primzahlen mit 3000 Thread(s) ist korrekt.
		45. Berechnung: 4.322530 s. Die 45. Berechnung der Primzahlen mit 3000 Thread(s) ist korrekt.
		46. Berechnung: 4.330479 s. Die 46. Berechnung der Primzahlen mit 3000 Thread(s) ist korrekt.
		47. Berechnung: 4.370469 s. Die 47. Berechnung der Primzahlen mit 3000 Thread(s) ist korrekt.
		48. Berechnung: 4.340835 s. Die 48. Berechnung der Primzahlen mit 3000 Thread(s) ist korrekt.
		49. Berechnung: 4.333206 s. Die 49. Berechnung der Primzahlen mit 3000 Thread(s) ist korrekt.
		50. Berechnung: 4.292388 s. Die 50. Berechnung der Primzahlen mit 3000 Thread(s) ist korrekt.
		Durchschnittliche Ausfuehrungszeit des Programmes bei 50 Durchlaeufen mit 3000 Thread(s): 4.339303 s. Alle berechneten Primzahlen mit 3000 Thread(s) sind korrekt.
	Berechnung mittels 4000 Thread(s):
		1. Berechnung: 4.139836 s. Die 1. Berechnung der Primzahlen mit 4000 Thread(s) ist korrekt.
		2. Berechnung: 4.150666 s. Die 2. Berechnung der Primzahlen mit 4000 Thread(s) ist korrekt.
		3. Berechnung: 4.156774 s. Die 3. Berechnung der Primzahlen mit 4000 Thread(s) ist korrekt.
		4. Berechnung: 4.180182 s. Die 4. Berechnung der Primzahlen mit 4000 Thread(s) ist korrekt.
		5. Berechnung: 4.145672 s. Die 5. Berechnung der Primzahlen mit 4000 Thread(s) ist korrekt.
		6. Berechnung: 4.136368 s. Die 6. Berechnung der Primzahlen mit 4000 Thread(s) ist korrekt.
		7. Berechnung: 4.115442 s. Die 7. Berechnung der Primzahlen mit 4000 Thread(s) ist korrekt.
		8. Berechnung: 4.133017 s. Die 8. Berechnung der Primzahlen mit 4000 Thread(s) ist korrekt.
		9. Berechnung: 4.170540 s. Die 9. Berechnung der Primzahlen mit 4000 Thread(s) ist korrekt.
		10. Berechnung: 4.134176 s. Die 10. Berechnung der Primzahlen mit 4000 Thread(s) ist korrekt.
		11. Berechnung: 4.145517 s. Die 11. Berechnung der Primzahlen mit 4000 Thread(s) ist korrekt.
		12. Berechnung: 4.143760 s. Die 12. Berechnung der Primzahlen mit 4000 Thread(s) ist korrekt.
		13. Berechnung: 4.149445 s. Die 13. Berechnung der Primzahlen mit 4000 Thread(s) ist korrekt.
		14. Berechnung: 4.156377 s. Die 14. Berechnung der Primzahlen mit 4000 Thread(s) ist korrekt.
		15. Berechnung: 4.161607 s. Die 15. Berechnung der Primzahlen mit 4000 Thread(s) ist korrekt.
		16. Berechnung: 4.155887 s. Die 16. Berechnung der Primzahlen mit 4000 Thread(s) ist korrekt.
		17. Berechnung: 4.158533 s. Die 17. Berechnung der Primzahlen mit 4000 Thread(s) ist korrekt.
		18. Berechnung: 4.147229 s. Die 18. Berechnung der Primzahlen mit 4000 Thread(s) ist korrekt.
		19. Berechnung: 4.149343 s. Die 19. Berechnung der Primzahlen mit 4000 Thread(s) ist korrekt.
		20. Berechnung: 4.119143 s. Die 20. Berechnung der Primzahlen mit 4000 Thread(s) ist korrekt.
		21. Berechnung: 4.142087 s. Die 21. Berechnung der Primzahlen mit 4000 Thread(s) ist korrekt.
		22. Berechnung: 4.142211 s. Die 22. Berechnung der Primzahlen mit 4000 Thread(s) ist korrekt.
		23. Berechnung: 4.128336 s. Die 23. Berechnung der Primzahlen mit 4000 Thread(s) ist korrekt.
		24. Berechnung: 4.144161 s. Die 24. Berechnung der Primzahlen mit 4000 Thread(s) ist korrekt.
		25. Berechnung: 4.135049 s. Die 25. Berechnung der Primzahlen mit 4000 Thread(s) ist korrekt.
		26. Berechnung: 4.140997 s. Die 26. Berechnung der Primzahlen mit 4000 Thread(s) ist korrekt.
		27. Berechnung: 4.138015 s. Die 27. Berechnung der Primzahlen mit 4000 Thread(s) ist korrekt.
		28. Berechnung: 4.147689 s. Die 28. Berechnung der Primzahlen mit 4000 Thread(s) ist korrekt.
		29. Berechnung: 4.108236 s. Die 29. Berechnung der Primzahlen mit 4000 Thread(s) ist korrekt.
		30. Berechnung: 4.119765 s. Die 30. Berechnung der Primzahlen mit 4000 Thread(s) ist korrekt.
		31. Berechnung: 4.130860 s. Die 31. Berechnung der Primzahlen mit 4000 Thread(s) ist korrekt.
		32. Berechnung: 4.127962 s. Die 32. Berechnung der Primzahlen mit 4000 Thread(s) ist korrekt.
		33. Berechnung: 4.214013 s. Die 33. Berechnung der Primzahlen mit 4000 Thread(s) ist korrekt.
		34. Berechnung: 4.136436 s. Die 34. Berechnung der Primzahlen mit 4000 Thread(s) ist korrekt.
		35. Berechnung: 4.116487 s. Die 35. Berechnung der Primzahlen mit 4000 Thread(s) ist korrekt.
		36. Berechnung: 4.124138 s. Die 36. Berechnung der Primzahlen mit 4000 Thread(s) ist korrekt.
		37. Berechnung: 4.161134 s. Die 37. Berechnung der Primzahlen mit 4000 Thread(s) ist korrekt.
		38. Berechnung: 4.163953 s. Die 38. Berechnung der Primzahlen mit 4000 Thread(s) ist korrekt.
		39. Berechnung: 4.127067 s. Die 39. Berechnung der Primzahlen mit 4000 Thread(s) ist korrekt.
		40. Berechnung: 4.122871 s. Die 40. Berechnung der Primzahlen mit 4000 Thread(s) ist korrekt.
		41. Berechnung: 4.132621 s. Die 41. Berechnung der Primzahlen mit 4000 Thread(s) ist korrekt.
		42. Berechnung: 4.145269 s. Die 42. Berechnung der Primzahlen mit 4000 Thread(s) ist korrekt.
		43. Berechnung: 4.119241 s. Die 43. Berechnung der Primzahlen mit 4000 Thread(s) ist korrekt.
		44. Berechnung: 4.119431 s. Die 44. Berechnung der Primzahlen mit 4000 Thread(s) ist korrekt.
		45. Berechnung: 4.126039 s. Die 45. Berechnung der Primzahlen mit 4000 Thread(s) ist korrekt.
		46. Berechnung: 4.158983 s. Die 46. Berechnung der Primzahlen mit 4000 Thread(s) ist korrekt.
		47. Berechnung: 4.125972 s. Die 47. Berechnung der Primzahlen mit 4000 Thread(s) ist korrekt.
		48. Berechnung: 4.175641 s. Die 48. Berechnung der Primzahlen mit 4000 Thread(s) ist korrekt.
		49. Berechnung: 4.136460 s. Die 49. Berechnung der Primzahlen mit 4000 Thread(s) ist korrekt.
		50. Berechnung: 4.134470 s. Die 50. Berechnung der Primzahlen mit 4000 Thread(s) ist korrekt.
		Durchschnittliche Ausfuehrungszeit des Programmes bei 50 Durchlaeufen mit 4000 Thread(s): 4.141902 s. Alle berechneten Primzahlen mit 4000 Thread(s) sind korrekt.
	Berechnung mittels 5000 Thread(s):
		1. Berechnung: 4.177951 s. Die 1. Berechnung der Primzahlen mit 5000 Thread(s) ist korrekt.
		2. Berechnung: 4.173906 s. Die 2. Berechnung der Primzahlen mit 5000 Thread(s) ist korrekt.
		3. Berechnung: 4.171675 s. Die 3. Berechnung der Primzahlen mit 5000 Thread(s) ist korrekt.
		4. Berechnung: 4.183204 s. Die 4. Berechnung der Primzahlen mit 5000 Thread(s) ist korrekt.
		5. Berechnung: 4.188214 s. Die 5. Berechnung der Primzahlen mit 5000 Thread(s) ist korrekt.
		6. Berechnung: 4.176624 s. Die 6. Berechnung der Primzahlen mit 5000 Thread(s) ist korrekt.
		7. Berechnung: 4.189482 s. Die 7. Berechnung der Primzahlen mit 5000 Thread(s) ist korrekt.
		8. Berechnung: 4.172993 s. Die 8. Berechnung der Primzahlen mit 5000 Thread(s) ist korrekt.
		9. Berechnung: 4.174100 s. Die 9. Berechnung der Primzahlen mit 5000 Thread(s) ist korrekt.
		10. Berechnung: 4.166579 s. Die 10. Berechnung der Primzahlen mit 5000 Thread(s) ist korrekt.
		11. Berechnung: 4.179743 s. Die 11. Berechnung der Primzahlen mit 5000 Thread(s) ist korrekt.
		12. Berechnung: 4.279978 s. Die 12. Berechnung der Primzahlen mit 5000 Thread(s) ist korrekt.
		13. Berechnung: 4.188234 s. Die 13. Berechnung der Primzahlen mit 5000 Thread(s) ist korrekt.
		14. Berechnung: 4.196913 s. Die 14. Berechnung der Primzahlen mit 5000 Thread(s) ist korrekt.
		15. Berechnung: 4.184699 s. Die 15. Berechnung der Primzahlen mit 5000 Thread(s) ist korrekt.
		16. Berechnung: 4.182200 s. Die 16. Berechnung der Primzahlen mit 5000 Thread(s) ist korrekt.
		17. Berechnung: 4.191383 s. Die 17. Berechnung der Primzahlen mit 5000 Thread(s) ist korrekt.
		18. Berechnung: 4.194123 s. Die 18. Berechnung der Primzahlen mit 5000 Thread(s) ist korrekt.
		19. Berechnung: 4.175699 s. Die 19. Berechnung der Primzahlen mit 5000 Thread(s) ist korrekt.
		20. Berechnung: 4.179146 s. Die 20. Berechnung der Primzahlen mit 5000 Thread(s) ist korrekt.
		21. Berechnung: 4.170438 s. Die 21. Berechnung der Primzahlen mit 5000 Thread(s) ist korrekt.
		22. Berechnung: 4.150427 s. Die 22. Berechnung der Primzahlen mit 5000 Thread(s) ist korrekt.
		23. Berechnung: 4.174852 s. Die 23. Berechnung der Primzahlen mit 5000 Thread(s) ist korrekt.
		24. Berechnung: 4.165992 s. Die 24. Berechnung der Primzahlen mit 5000 Thread(s) ist korrekt.
		25. Berechnung: 4.210962 s. Die 25. Berechnung der Primzahlen mit 5000 Thread(s) ist korrekt.
		26. Berechnung: 4.166530 s. Die 26. Berechnung der Primzahlen mit 5000 Thread(s) ist korrekt.
		27. Berechnung: 4.170377 s. Die 27. Berechnung der Primzahlen mit 5000 Thread(s) ist korrekt.
		28. Berechnung: 4.167663 s. Die 28. Berechnung der Primzahlen mit 5000 Thread(s) ist korrekt.
		29. Berechnung: 4.185291 s. Die 29. Berechnung der Primzahlen mit 5000 Thread(s) ist korrekt.
		30. Berechnung: 4.198194 s. Die 30. Berechnung der Primzahlen mit 5000 Thread(s) ist korrekt.
		31. Berechnung: 4.171881 s. Die 31. Berechnung der Primzahlen mit 5000 Thread(s) ist korrekt.
		32. Berechnung: 4.171692 s. Die 32. Berechnung der Primzahlen mit 5000 Thread(s) ist korrekt.
		33. Berechnung: 4.168140 s. Die 33. Berechnung der Primzahlen mit 5000 Thread(s) ist korrekt.
		34. Berechnung: 4.204090 s. Die 34. Berechnung der Primzahlen mit 5000 Thread(s) ist korrekt.
		35. Berechnung: 4.157615 s. Die 35. Berechnung der Primzahlen mit 5000 Thread(s) ist korrekt.
		36. Berechnung: 4.179009 s. Die 36. Berechnung der Primzahlen mit 5000 Thread(s) ist korrekt.
		37. Berechnung: 5.897373 s. Die 37. Berechnung der Primzahlen mit 5000 Thread(s) ist korrekt.
		38. Berechnung: 5.693987 s. Die 38. Berechnung der Primzahlen mit 5000 Thread(s) ist korrekt.
		39. Berechnung: 5.196548 s. Die 39. Berechnung der Primzahlen mit 5000 Thread(s) ist korrekt.
		40. Berechnung: 5.035745 s. Die 40. Berechnung der Primzahlen mit 5000 Thread(s) ist korrekt.
		41. Berechnung: 5.035185 s. Die 41. Berechnung der Primzahlen mit 5000 Thread(s) ist korrekt.
		42. Berechnung: 4.817437 s. Die 42. Berechnung der Primzahlen mit 5000 Thread(s) ist korrekt.
		43. Berechnung: 4.686022 s. Die 43. Berechnung der Primzahlen mit 5000 Thread(s) ist korrekt.
		44. Berechnung: 4.254482 s. Die 44. Berechnung der Primzahlen mit 5000 Thread(s) ist korrekt.
		45. Berechnung: 4.236705 s. Die 45. Berechnung der Primzahlen mit 5000 Thread(s) ist korrekt.
		46. Berechnung: 4.251723 s. Die 46. Berechnung der Primzahlen mit 5000 Thread(s) ist korrekt.
		47. Berechnung: 4.226692 s. Die 47. Berechnung der Primzahlen mit 5000 Thread(s) ist korrekt.
		48. Berechnung: 4.223390 s. Die 48. Berechnung der Primzahlen mit 5000 Thread(s) ist korrekt.
		49. Berechnung: 4.229493 s. Die 49. Berechnung der Primzahlen mit 5000 Thread(s) ist korrekt.
		50. Berechnung: 4.218665 s. Die 50. Berechnung der Primzahlen mit 5000 Thread(s) ist korrekt.
		Durchschnittliche Ausfuehrungszeit des Programmes bei 50 Durchlaeufen mit 5000 Thread(s): 4.330869 s. Alle berechneten Primzahlen mit 5000 Thread(s) sind korrekt.
	Berechnung mittels 6000 Thread(s):
		1. Berechnung: 5.218093 s. Die 1. Berechnung der Primzahlen mit 6000 Thread(s) ist korrekt.
		2. Berechnung: 5.262085 s. Die 2. Berechnung der Primzahlen mit 6000 Thread(s) ist korrekt.
		3. Berechnung: 5.214800 s. Die 3. Berechnung der Primzahlen mit 6000 Thread(s) ist korrekt.
		4. Berechnung: 5.209131 s. Die 4. Berechnung der Primzahlen mit 6000 Thread(s) ist korrekt.
		5. Berechnung: 5.226900 s. Die 5. Berechnung der Primzahlen mit 6000 Thread(s) ist korrekt.
		6. Berechnung: 5.129852 s. Die 6. Berechnung der Primzahlen mit 6000 Thread(s) ist korrekt.
		7. Berechnung: 5.602986 s. Die 7. Berechnung der Primzahlen mit 6000 Thread(s) ist korrekt.
		8. Berechnung: 5.712880 s. Die 8. Berechnung der Primzahlen mit 6000 Thread(s) ist korrekt.
		9. Berechnung: 5.895166 s. Die 9. Berechnung der Primzahlen mit 6000 Thread(s) ist korrekt.
		10. Berechnung: 5.970681 s. Die 10. Berechnung der Primzahlen mit 6000 Thread(s) ist korrekt.
		11. Berechnung: 5.972026 s. Die 11. Berechnung der Primzahlen mit 6000 Thread(s) ist korrekt.
		12. Berechnung: 5.799510 s. Die 12. Berechnung der Primzahlen mit 6000 Thread(s) ist korrekt.
		13. Berechnung: 5.938951 s. Die 13. Berechnung der Primzahlen mit 6000 Thread(s) ist korrekt.
		14. Berechnung: 5.852015 s. Die 14. Berechnung der Primzahlen mit 6000 Thread(s) ist korrekt.
		15. Berechnung: 5.831001 s. Die 15. Berechnung der Primzahlen mit 6000 Thread(s) ist korrekt.
		16. Berechnung: 5.076875 s. Die 16. Berechnung der Primzahlen mit 6000 Thread(s) ist korrekt.
		17. Berechnung: 5.311203 s. Die 17. Berechnung der Primzahlen mit 6000 Thread(s) ist korrekt.
		18. Berechnung: 5.173759 s. Die 18. Berechnung der Primzahlen mit 6000 Thread(s) ist korrekt.
		19. Berechnung: 6.152788 s. Die 19. Berechnung der Primzahlen mit 6000 Thread(s) ist korrekt.
		20. Berechnung: 5.939020 s. Die 20. Berechnung der Primzahlen mit 6000 Thread(s) ist korrekt.
		21. Berechnung: 5.545045 s. Die 21. Berechnung der Primzahlen mit 6000 Thread(s) ist korrekt.
		22. Berechnung: 5.226196 s. Die 22. Berechnung der Primzahlen mit 6000 Thread(s) ist korrekt.
		23. Berechnung: 5.046753 s. Die 23. Berechnung der Primzahlen mit 6000 Thread(s) ist korrekt.
		24. Berechnung: 5.031164 s. Die 24. Berechnung der Primzahlen mit 6000 Thread(s) ist korrekt.
		25. Berechnung: 5.155839 s. Die 25. Berechnung der Primzahlen mit 6000 Thread(s) ist korrekt.
		26. Berechnung: 5.141481 s. Die 26. Berechnung der Primzahlen mit 6000 Thread(s) ist korrekt.
		27. Berechnung: 5.178594 s. Die 27. Berechnung der Primzahlen mit 6000 Thread(s) ist korrekt.
		28. Berechnung: 5.204734 s. Die 28. Berechnung der Primzahlen mit 6000 Thread(s) ist korrekt.
		29. Berechnung: 5.180393 s. Die 29. Berechnung der Primzahlen mit 6000 Thread(s) ist korrekt.
		30. Berechnung: 5.070705 s. Die 30. Berechnung der Primzahlen mit 6000 Thread(s) ist korrekt.
		31. Berechnung: 5.115410 s. Die 31. Berechnung der Primzahlen mit 6000 Thread(s) ist korrekt.
		32. Berechnung: 5.083064 s. Die 32. Berechnung der Primzahlen mit 6000 Thread(s) ist korrekt.
		33. Berechnung: 5.065403 s. Die 33. Berechnung der Primzahlen mit 6000 Thread(s) ist korrekt.
		34. Berechnung: 5.193847 s. Die 34. Berechnung der Primzahlen mit 6000 Thread(s) ist korrekt.
		35. Berechnung: 5.269662 s. Die 35. Berechnung der Primzahlen mit 6000 Thread(s) ist korrekt.
		36. Berechnung: 5.092857 s. Die 36. Berechnung der Primzahlen mit 6000 Thread(s) ist korrekt.
		37. Berechnung: 5.155764 s. Die 37. Berechnung der Primzahlen mit 6000 Thread(s) ist korrekt.
		38. Berechnung: 5.092644 s. Die 38. Berechnung der Primzahlen mit 6000 Thread(s) ist korrekt.
		39. Berechnung: 5.118980 s. Die 39. Berechnung der Primzahlen mit 6000 Thread(s) ist korrekt.
		40. Berechnung: 5.196814 s. Die 40. Berechnung der Primzahlen mit 6000 Thread(s) ist korrekt.
		41. Berechnung: 5.122680 s. Die 41. Berechnung der Primzahlen mit 6000 Thread(s) ist korrekt.
		42. Berechnung: 5.171790 s. Die 42. Berechnung der Primzahlen mit 6000 Thread(s) ist korrekt.
		43. Berechnung: 5.112658 s. Die 43. Berechnung der Primzahlen mit 6000 Thread(s) ist korrekt.
		44. Berechnung: 5.258368 s. Die 44. Berechnung der Primzahlen mit 6000 Thread(s) ist korrekt.
		45. Berechnung: 5.114286 s. Die 45. Berechnung der Primzahlen mit 6000 Thread(s) ist korrekt.
		46. Berechnung: 5.112104 s. Die 46. Berechnung der Primzahlen mit 6000 Thread(s) ist korrekt.
		47. Berechnung: 5.138644 s. Die 47. Berechnung der Primzahlen mit 6000 Thread(s) ist korrekt.
		48. Berechnung: 5.123252 s. Die 48. Berechnung der Primzahlen mit 6000 Thread(s) ist korrekt.
		49. Berechnung: 5.159450 s. Die 49. Berechnung der Primzahlen mit 6000 Thread(s) ist korrekt.
		50. Berechnung: 5.196978 s. Die 50. Berechnung der Primzahlen mit 6000 Thread(s) ist korrekt.
		Durchschnittliche Ausfuehrungszeit des Programmes bei 50 Durchlaeufen mit 6000 Thread(s): 5.323306 s. Alle berechneten Primzahlen mit 6000 Thread(s) sind korrekt.
	Berechnung mittels 7000 Thread(s):
		1. Berechnung: 4.756980 s. Die 1. Berechnung der Primzahlen mit 7000 Thread(s) ist korrekt.
		2. Berechnung: 4.747221 s. Die 2. Berechnung der Primzahlen mit 7000 Thread(s) ist korrekt.
		3. Berechnung: 4.781582 s. Die 3. Berechnung der Primzahlen mit 7000 Thread(s) ist korrekt.
		4. Berechnung: 4.714369 s. Die 4. Berechnung der Primzahlen mit 7000 Thread(s) ist korrekt.
		5. Berechnung: 4.737522 s. Die 5. Berechnung der Primzahlen mit 7000 Thread(s) ist korrekt.
		6. Berechnung: 4.762907 s. Die 6. Berechnung der Primzahlen mit 7000 Thread(s) ist korrekt.
		7. Berechnung: 4.752942 s. Die 7. Berechnung der Primzahlen mit 7000 Thread(s) ist korrekt.
		8. Berechnung: 4.761022 s. Die 8. Berechnung der Primzahlen mit 7000 Thread(s) ist korrekt.
		9. Berechnung: 4.694860 s. Die 9. Berechnung der Primzahlen mit 7000 Thread(s) ist korrekt.
		10. Berechnung: 4.689240 s. Die 10. Berechnung der Primzahlen mit 7000 Thread(s) ist korrekt.
		11. Berechnung: 4.746931 s. Die 11. Berechnung der Primzahlen mit 7000 Thread(s) ist korrekt.
		12. Berechnung: 4.752995 s. Die 12. Berechnung der Primzahlen mit 7000 Thread(s) ist korrekt.
		13. Berechnung: 4.717931 s. Die 13. Berechnung der Primzahlen mit 7000 Thread(s) ist korrekt.
		14. Berechnung: 4.790018 s. Die 14. Berechnung der Primzahlen mit 7000 Thread(s) ist korrekt.
		15. Berechnung: 4.648061 s. Die 15. Berechnung der Primzahlen mit 7000 Thread(s) ist korrekt.
		16. Berechnung: 4.741863 s. Die 16. Berechnung der Primzahlen mit 7000 Thread(s) ist korrekt.
		17. Berechnung: 4.784419 s. Die 17. Berechnung der Primzahlen mit 7000 Thread(s) ist korrekt.
		18. Berechnung: 4.777497 s. Die 18. Berechnung der Primzahlen mit 7000 Thread(s) ist korrekt.
		19. Berechnung: 4.757577 s. Die 19. Berechnung der Primzahlen mit 7000 Thread(s) ist korrekt.
		20. Berechnung: 4.768713 s. Die 20. Berechnung der Primzahlen mit 7000 Thread(s) ist korrekt.
		21. Berechnung: 4.672551 s. Die 21. Berechnung der Primzahlen mit 7000 Thread(s) ist korrekt.
		22. Berechnung: 4.750754 s. Die 22. Berechnung der Primzahlen mit 7000 Thread(s) ist korrekt.
		23. Berechnung: 4.755280 s. Die 23. Berechnung der Primzahlen mit 7000 Thread(s) ist korrekt.
		24. Berechnung: 4.733721 s. Die 24. Berechnung der Primzahlen mit 7000 Thread(s) ist korrekt.
		25. Berechnung: 4.755408 s. Die 25. Berechnung der Primzahlen mit 7000 Thread(s) ist korrekt.
		26. Berechnung: 4.684357 s. Die 26. Berechnung der Primzahlen mit 7000 Thread(s) ist korrekt.
		27. Berechnung: 4.771513 s. Die 27. Berechnung der Primzahlen mit 7000 Thread(s) ist korrekt.
		28. Berechnung: 4.597367 s. Die 28. Berechnung der Primzahlen mit 7000 Thread(s) ist korrekt.
		29. Berechnung: 4.727373 s. Die 29. Berechnung der Primzahlen mit 7000 Thread(s) ist korrekt.
		30. Berechnung: 4.736962 s. Die 30. Berechnung der Primzahlen mit 7000 Thread(s) ist korrekt.
		31. Berechnung: 4.689556 s. Die 31. Berechnung der Primzahlen mit 7000 Thread(s) ist korrekt.
		32. Berechnung: 4.713264 s. Die 32. Berechnung der Primzahlen mit 7000 Thread(s) ist korrekt.
		33. Berechnung: 4.720604 s. Die 33. Berechnung der Primzahlen mit 7000 Thread(s) ist korrekt.
		34. Berechnung: 4.739230 s. Die 34. Berechnung der Primzahlen mit 7000 Thread(s) ist korrekt.
		35. Berechnung: 4.903692 s. Die 35. Berechnung der Primzahlen mit 7000 Thread(s) ist korrekt.
		36. Berechnung: 4.721892 s. Die 36. Berechnung der Primzahlen mit 7000 Thread(s) ist korrekt.
		37. Berechnung: 4.730460 s. Die 37. Berechnung der Primzahlen mit 7000 Thread(s) ist korrekt.
		38. Berechnung: 4.779348 s. Die 38. Berechnung der Primzahlen mit 7000 Thread(s) ist korrekt.
		39. Berechnung: 4.735200 s. Die 39. Berechnung der Primzahlen mit 7000 Thread(s) ist korrekt.
		40. Berechnung: 4.753632 s. Die 40. Berechnung der Primzahlen mit 7000 Thread(s) ist korrekt.
		41. Berechnung: 4.703727 s. Die 41. Berechnung der Primzahlen mit 7000 Thread(s) ist korrekt.
		42. Berechnung: 4.782778 s. Die 42. Berechnung der Primzahlen mit 7000 Thread(s) ist korrekt.
		43. Berechnung: 4.698428 s. Die 43. Berechnung der Primzahlen mit 7000 Thread(s) ist korrekt.
		44. Berechnung: 4.744956 s. Die 44. Berechnung der Primzahlen mit 7000 Thread(s) ist korrekt.
		45. Berechnung: 4.804793 s. Die 45. Berechnung der Primzahlen mit 7000 Thread(s) ist korrekt.
		46. Berechnung: 4.755071 s. Die 46. Berechnung der Primzahlen mit 7000 Thread(s) ist korrekt.
		47. Berechnung: 4.740905 s. Die 47. Berechnung der Primzahlen mit 7000 Thread(s) ist korrekt.
		48. Berechnung: 4.770820 s. Die 48. Berechnung der Primzahlen mit 7000 Thread(s) ist korrekt.
		49. Berechnung: 4.787956 s. Die 49. Berechnung der Primzahlen mit 7000 Thread(s) ist korrekt.
		50. Berechnung: 4.760075 s. Die 50. Berechnung der Primzahlen mit 7000 Thread(s) ist korrekt.
		Durchschnittliche Ausfuehrungszeit des Programmes bei 50 Durchlaeufen mit 7000 Thread(s): 4.742126 s. Alle berechneten Primzahlen mit 7000 Thread(s) sind korrekt.
	Berechnung mittels 8000 Thread(s):
		1. Berechnung: 5.298901 s. Die 1. Berechnung der Primzahlen mit 8000 Thread(s) ist korrekt.
		2. Berechnung: 5.160796 s. Die 2. Berechnung der Primzahlen mit 8000 Thread(s) ist korrekt.
		3. Berechnung: 5.227727 s. Die 3. Berechnung der Primzahlen mit 8000 Thread(s) ist korrekt.
		4. Berechnung: 5.258382 s. Die 4. Berechnung der Primzahlen mit 8000 Thread(s) ist korrekt.
		5. Berechnung: 5.211709 s. Die 5. Berechnung der Primzahlen mit 8000 Thread(s) ist korrekt.
		6. Berechnung: 5.269962 s. Die 6. Berechnung der Primzahlen mit 8000 Thread(s) ist korrekt.
		7. Berechnung: 5.219302 s. Die 7. Berechnung der Primzahlen mit 8000 Thread(s) ist korrekt.
		8. Berechnung: 5.258097 s. Die 8. Berechnung der Primzahlen mit 8000 Thread(s) ist korrekt.
		9. Berechnung: 5.269339 s. Die 9. Berechnung der Primzahlen mit 8000 Thread(s) ist korrekt.
		10. Berechnung: 5.235493 s. Die 10. Berechnung der Primzahlen mit 8000 Thread(s) ist korrekt.
		11. Berechnung: 5.227398 s. Die 11. Berechnung der Primzahlen mit 8000 Thread(s) ist korrekt.
		12. Berechnung: 5.264600 s. Die 12. Berechnung der Primzahlen mit 8000 Thread(s) ist korrekt.
		13. Berechnung: 5.204898 s. Die 13. Berechnung der Primzahlen mit 8000 Thread(s) ist korrekt.
		14. Berechnung: 5.216649 s. Die 14. Berechnung der Primzahlen mit 8000 Thread(s) ist korrekt.
		15. Berechnung: 5.259222 s. Die 15. Berechnung der Primzahlen mit 8000 Thread(s) ist korrekt.
		16. Berechnung: 5.183916 s. Die 16. Berechnung der Primzahlen mit 8000 Thread(s) ist korrekt.
		17. Berechnung: 5.226491 s. Die 17. Berechnung der Primzahlen mit 8000 Thread(s) ist korrekt.
		18. Berechnung: 5.259735 s. Die 18. Berechnung der Primzahlen mit 8000 Thread(s) ist korrekt.
		19. Berechnung: 5.289028 s. Die 19. Berechnung der Primzahlen mit 8000 Thread(s) ist korrekt.
		20. Berechnung: 5.243587 s. Die 20. Berechnung der Primzahlen mit 8000 Thread(s) ist korrekt.
		21. Berechnung: 5.252654 s. Die 21. Berechnung der Primzahlen mit 8000 Thread(s) ist korrekt.
		22. Berechnung: 5.216366 s. Die 22. Berechnung der Primzahlen mit 8000 Thread(s) ist korrekt.
		23. Berechnung: 5.248319 s. Die 23. Berechnung der Primzahlen mit 8000 Thread(s) ist korrekt.
		24. Berechnung: 5.280508 s. Die 24. Berechnung der Primzahlen mit 8000 Thread(s) ist korrekt.
		25. Berechnung: 5.196521 s. Die 25. Berechnung der Primzahlen mit 8000 Thread(s) ist korrekt.
		26. Berechnung: 5.223163 s. Die 26. Berechnung der Primzahlen mit 8000 Thread(s) ist korrekt.
		27. Berechnung: 5.252979 s. Die 27. Berechnung der Primzahlen mit 8000 Thread(s) ist korrekt.
		28. Berechnung: 5.288727 s. Die 28. Berechnung der Primzahlen mit 8000 Thread(s) ist korrekt.
		29. Berechnung: 5.215668 s. Die 29. Berechnung der Primzahlen mit 8000 Thread(s) ist korrekt.
		30. Berechnung: 5.263360 s. Die 30. Berechnung der Primzahlen mit 8000 Thread(s) ist korrekt.
		31. Berechnung: 5.264042 s. Die 31. Berechnung der Primzahlen mit 8000 Thread(s) ist korrekt.
		32. Berechnung: 5.224539 s. Die 32. Berechnung der Primzahlen mit 8000 Thread(s) ist korrekt.
		33. Berechnung: 5.282413 s. Die 33. Berechnung der Primzahlen mit 8000 Thread(s) ist korrekt.
		34. Berechnung: 5.291774 s. Die 34. Berechnung der Primzahlen mit 8000 Thread(s) ist korrekt.
		35. Berechnung: 5.231614 s. Die 35. Berechnung der Primzahlen mit 8000 Thread(s) ist korrekt.
		36. Berechnung: 5.206424 s. Die 36. Berechnung der Primzahlen mit 8000 Thread(s) ist korrekt.
		37. Berechnung: 5.210154 s. Die 37. Berechnung der Primzahlen mit 8000 Thread(s) ist korrekt.
		38. Berechnung: 5.160818 s. Die 38. Berechnung der Primzahlen mit 8000 Thread(s) ist korrekt.
		39. Berechnung: 5.252929 s. Die 39. Berechnung der Primzahlen mit 8000 Thread(s) ist korrekt.
		40. Berechnung: 5.257916 s. Die 40. Berechnung der Primzahlen mit 8000 Thread(s) ist korrekt.
		41. Berechnung: 5.197282 s. Die 41. Berechnung der Primzahlen mit 8000 Thread(s) ist korrekt.
		42. Berechnung: 5.252280 s. Die 42. Berechnung der Primzahlen mit 8000 Thread(s) ist korrekt.
		43. Berechnung: 5.236551 s. Die 43. Berechnung der Primzahlen mit 8000 Thread(s) ist korrekt.
		44. Berechnung: 5.243270 s. Die 44. Berechnung der Primzahlen mit 8000 Thread(s) ist korrekt.
		45. Berechnung: 5.253186 s. Die 45. Berechnung der Primzahlen mit 8000 Thread(s) ist korrekt.
		46. Berechnung: 5.256259 s. Die 46. Berechnung der Primzahlen mit 8000 Thread(s) ist korrekt.
		47. Berechnung: 5.271760 s. Die 47. Berechnung der Primzahlen mit 8000 Thread(s) ist korrekt.
		48. Berechnung: 5.295447 s. Die 48. Berechnung der Primzahlen mit 8000 Thread(s) ist korrekt.
		49. Berechnung: 5.293437 s. Die 49. Berechnung der Primzahlen mit 8000 Thread(s) ist korrekt.
		50. Berechnung: 5.267252 s. Die 50. Berechnung der Primzahlen mit 8000 Thread(s) ist korrekt.
		Durchschnittliche Ausfuehrungszeit des Programmes bei 50 Durchlaeufen mit 8000 Thread(s): 5.243457 s. Alle berechneten Primzahlen mit 8000 Thread(s) sind korrekt.
	Berechnung mittels 9000 Thread(s):
		1. Berechnung: 4.626443 s. Die 1. Berechnung der Primzahlen mit 9000 Thread(s) ist korrekt.
		2. Berechnung: 4.563890 s. Die 2. Berechnung der Primzahlen mit 9000 Thread(s) ist korrekt.
		3. Berechnung: 4.614558 s. Die 3. Berechnung der Primzahlen mit 9000 Thread(s) ist korrekt.
		4. Berechnung: 4.596721 s. Die 4. Berechnung der Primzahlen mit 9000 Thread(s) ist korrekt.
		5. Berechnung: 4.617856 s. Die 5. Berechnung der Primzahlen mit 9000 Thread(s) ist korrekt.
		6. Berechnung: 4.622207 s. Die 6. Berechnung der Primzahlen mit 9000 Thread(s) ist korrekt.
		7. Berechnung: 4.644240 s. Die 7. Berechnung der Primzahlen mit 9000 Thread(s) ist korrekt.
		8. Berechnung: 4.613153 s. Die 8. Berechnung der Primzahlen mit 9000 Thread(s) ist korrekt.
		9. Berechnung: 4.609016 s. Die 9. Berechnung der Primzahlen mit 9000 Thread(s) ist korrekt.
		10. Berechnung: 4.611368 s. Die 10. Berechnung der Primzahlen mit 9000 Thread(s) ist korrekt.
		11. Berechnung: 4.620716 s. Die 11. Berechnung der Primzahlen mit 9000 Thread(s) ist korrekt.
		12. Berechnung: 4.612476 s. Die 12. Berechnung der Primzahlen mit 9000 Thread(s) ist korrekt.
		13. Berechnung: 4.680343 s. Die 13. Berechnung der Primzahlen mit 9000 Thread(s) ist korrekt.
		14. Berechnung: 4.594408 s. Die 14. Berechnung der Primzahlen mit 9000 Thread(s) ist korrekt.
		15. Berechnung: 4.608120 s. Die 15. Berechnung der Primzahlen mit 9000 Thread(s) ist korrekt.
		16. Berechnung: 4.632923 s. Die 16. Berechnung der Primzahlen mit 9000 Thread(s) ist korrekt.
		17. Berechnung: 4.603571 s. Die 17. Berechnung der Primzahlen mit 9000 Thread(s) ist korrekt.
		18. Berechnung: 4.593558 s. Die 18. Berechnung der Primzahlen mit 9000 Thread(s) ist korrekt.
		19. Berechnung: 4.595516 s. Die 19. Berechnung der Primzahlen mit 9000 Thread(s) ist korrekt.
		20. Berechnung: 4.637823 s. Die 20. Berechnung der Primzahlen mit 9000 Thread(s) ist korrekt.
		21. Berechnung: 4.598763 s. Die 21. Berechnung der Primzahlen mit 9000 Thread(s) ist korrekt.
		22. Berechnung: 4.654984 s. Die 22. Berechnung der Primzahlen mit 9000 Thread(s) ist korrekt.
		23. Berechnung: 4.604080 s. Die 23. Berechnung der Primzahlen mit 9000 Thread(s) ist korrekt.
		24. Berechnung: 4.534306 s. Die 24. Berechnung der Primzahlen mit 9000 Thread(s) ist korrekt.
		25. Berechnung: 4.594895 s. Die 25. Berechnung der Primzahlen mit 9000 Thread(s) ist korrekt.
		26. Berechnung: 4.572789 s. Die 26. Berechnung der Primzahlen mit 9000 Thread(s) ist korrekt.
		27. Berechnung: 4.527811 s. Die 27. Berechnung der Primzahlen mit 9000 Thread(s) ist korrekt.
		28. Berechnung: 4.597141 s. Die 28. Berechnung der Primzahlen mit 9000 Thread(s) ist korrekt.
		29. Berechnung: 4.638294 s. Die 29. Berechnung der Primzahlen mit 9000 Thread(s) ist korrekt.
		30. Berechnung: 4.607821 s. Die 30. Berechnung der Primzahlen mit 9000 Thread(s) ist korrekt.
		31. Berechnung: 4.639307 s. Die 31. Berechnung der Primzahlen mit 9000 Thread(s) ist korrekt.
		32. Berechnung: 4.600060 s. Die 32. Berechnung der Primzahlen mit 9000 Thread(s) ist korrekt.
		33. Berechnung: 4.601539 s. Die 33. Berechnung der Primzahlen mit 9000 Thread(s) ist korrekt.
		34. Berechnung: 4.632605 s. Die 34. Berechnung der Primzahlen mit 9000 Thread(s) ist korrekt.
		35. Berechnung: 4.658720 s. Die 35. Berechnung der Primzahlen mit 9000 Thread(s) ist korrekt.
		36. Berechnung: 4.642173 s. Die 36. Berechnung der Primzahlen mit 9000 Thread(s) ist korrekt.
		37. Berechnung: 4.650712 s. Die 37. Berechnung der Primzahlen mit 9000 Thread(s) ist korrekt.
		38. Berechnung: 4.628417 s. Die 38. Berechnung der Primzahlen mit 9000 Thread(s) ist korrekt.
		39. Berechnung: 4.488596 s. Die 39. Berechnung der Primzahlen mit 9000 Thread(s) ist korrekt.
		40. Berechnung: 4.583812 s. Die 40. Berechnung der Primzahlen mit 9000 Thread(s) ist korrekt.
		41. Berechnung: 4.615097 s. Die 41. Berechnung der Primzahlen mit 9000 Thread(s) ist korrekt.
		42. Berechnung: 4.597778 s. Die 42. Berechnung der Primzahlen mit 9000 Thread(s) ist korrekt.
		43. Berechnung: 4.639640 s. Die 43. Berechnung der Primzahlen mit 9000 Thread(s) ist korrekt.
		44. Berechnung: 4.647926 s. Die 44. Berechnung der Primzahlen mit 9000 Thread(s) ist korrekt.
		45. Berechnung: 4.644580 s. Die 45. Berechnung der Primzahlen mit 9000 Thread(s) ist korrekt.
		46. Berechnung: 4.614914 s. Die 46. Berechnung der Primzahlen mit 9000 Thread(s) ist korrekt.
		47. Berechnung: 4.621072 s. Die 47. Berechnung der Primzahlen mit 9000 Thread(s) ist korrekt.
		48. Berechnung: 4.539835 s. Die 48. Berechnung der Primzahlen mit 9000 Thread(s) ist korrekt.
		49. Berechnung: 4.637212 s. Die 49. Berechnung der Primzahlen mit 9000 Thread(s) ist korrekt.
		50. Berechnung: 4.600579 s. Die 50. Berechnung der Primzahlen mit 9000 Thread(s) ist korrekt.
		Durchschnittliche Ausfuehrungszeit des Programmes bei 50 Durchlaeufen mit 9000 Thread(s): 4.610287 s. Alle berechneten Primzahlen mit 9000 Thread(s) sind korrekt.
	Berechnung mittels 10000 Thread(s):
		1. Berechnung: 4.366763 s. Die 1. Berechnung der Primzahlen mit 10000 Thread(s) ist korrekt.
		2. Berechnung: 4.400292 s. Die 2. Berechnung der Primzahlen mit 10000 Thread(s) ist korrekt.
		3. Berechnung: 4.365028 s. Die 3. Berechnung der Primzahlen mit 10000 Thread(s) ist korrekt.
		4. Berechnung: 4.378070 s. Die 4. Berechnung der Primzahlen mit 10000 Thread(s) ist korrekt.
		5. Berechnung: 4.377725 s. Die 5. Berechnung der Primzahlen mit 10000 Thread(s) ist korrekt.
		6. Berechnung: 4.398588 s. Die 6. Berechnung der Primzahlen mit 10000 Thread(s) ist korrekt.
		7. Berechnung: 4.372647 s. Die 7. Berechnung der Primzahlen mit 10000 Thread(s) ist korrekt.
		8. Berechnung: 4.459646 s. Die 8. Berechnung der Primzahlen mit 10000 Thread(s) ist korrekt.
		9. Berechnung: 4.437697 s. Die 9. Berechnung der Primzahlen mit 10000 Thread(s) ist korrekt.
		10. Berechnung: 4.352282 s. Die 10. Berechnung der Primzahlen mit 10000 Thread(s) ist korrekt.
		11. Berechnung: 4.386982 s. Die 11. Berechnung der Primzahlen mit 10000 Thread(s) ist korrekt.
		12. Berechnung: 4.405218 s. Die 12. Berechnung der Primzahlen mit 10000 Thread(s) ist korrekt.
		13. Berechnung: 4.342038 s. Die 13. Berechnung der Primzahlen mit 10000 Thread(s) ist korrekt.
		14. Berechnung: 4.430637 s. Die 14. Berechnung der Primzahlen mit 10000 Thread(s) ist korrekt.
		15. Berechnung: 4.412187 s. Die 15. Berechnung der Primzahlen mit 10000 Thread(s) ist korrekt.
		16. Berechnung: 4.666412 s. Die 16. Berechnung der Primzahlen mit 10000 Thread(s) ist korrekt.
		17. Berechnung: 4.324396 s. Die 17. Berechnung der Primzahlen mit 10000 Thread(s) ist korrekt.
		18. Berechnung: 4.382564 s. Die 18. Berechnung der Primzahlen mit 10000 Thread(s) ist korrekt.
		19. Berechnung: 4.401516 s. Die 19. Berechnung der Primzahlen mit 10000 Thread(s) ist korrekt.
		20. Berechnung: 4.406487 s. Die 20. Berechnung der Primzahlen mit 10000 Thread(s) ist korrekt.
		21. Berechnung: 4.359786 s. Die 21. Berechnung der Primzahlen mit 10000 Thread(s) ist korrekt.
		22. Berechnung: 4.375048 s. Die 22. Berechnung der Primzahlen mit 10000 Thread(s) ist korrekt.
		23. Berechnung: 4.382363 s. Die 23. Berechnung der Primzahlen mit 10000 Thread(s) ist korrekt.
		24. Berechnung: 4.377133 s. Die 24. Berechnung der Primzahlen mit 10000 Thread(s) ist korrekt.
		25. Berechnung: 4.385252 s. Die 25. Berechnung der Primzahlen mit 10000 Thread(s) ist korrekt.
		26. Berechnung: 4.390231 s. Die 26. Berechnung der Primzahlen mit 10000 Thread(s) ist korrekt.
		27. Berechnung: 4.369650 s. Die 27. Berechnung der Primzahlen mit 10000 Thread(s) ist korrekt.
		28. Berechnung: 4.355808 s. Die 28. Berechnung der Primzahlen mit 10000 Thread(s) ist korrekt.
		29. Berechnung: 4.378229 s. Die 29. Berechnung der Primzahlen mit 10000 Thread(s) ist korrekt.
		30. Berechnung: 4.381421 s. Die 30. Berechnung der Primzahlen mit 10000 Thread(s) ist korrekt.
		31. Berechnung: 4.384601 s. Die 31. Berechnung der Primzahlen mit 10000 Thread(s) ist korrekt.
		32. Berechnung: 4.377030 s. Die 32. Berechnung der Primzahlen mit 10000 Thread(s) ist korrekt.
		33. Berechnung: 4.446621 s. Die 33. Berechnung der Primzahlen mit 10000 Thread(s) ist korrekt.
		34. Berechnung: 4.371571 s. Die 34. Berechnung der Primzahlen mit 10000 Thread(s) ist korrekt.
		35. Berechnung: 4.414799 s. Die 35. Berechnung der Primzahlen mit 10000 Thread(s) ist korrekt.
		36. Berechnung: 4.364202 s. Die 36. Berechnung der Primzahlen mit 10000 Thread(s) ist korrekt.
		37. Berechnung: 4.389699 s. Die 37. Berechnung der Primzahlen mit 10000 Thread(s) ist korrekt.
		38. Berechnung: 4.371814 s. Die 38. Berechnung der Primzahlen mit 10000 Thread(s) ist korrekt.
		39. Berechnung: 4.383899 s. Die 39. Berechnung der Primzahlen mit 10000 Thread(s) ist korrekt.
		40. Berechnung: 4.371242 s. Die 40. Berechnung der Primzahlen mit 10000 Thread(s) ist korrekt.
		41. Berechnung: 4.422336 s. Die 41. Berechnung der Primzahlen mit 10000 Thread(s) ist korrekt.
		42. Berechnung: 4.362998 s. Die 42. Berechnung der Primzahlen mit 10000 Thread(s) ist korrekt.
		43. Berechnung: 4.372233 s. Die 43. Berechnung der Primzahlen mit 10000 Thread(s) ist korrekt.
		44. Berechnung: 4.399321 s. Die 44. Berechnung der Primzahlen mit 10000 Thread(s) ist korrekt.
		45. Berechnung: 4.393690 s. Die 45. Berechnung der Primzahlen mit 10000 Thread(s) ist korrekt.
		46. Berechnung: 4.393777 s. Die 46. Berechnung der Primzahlen mit 10000 Thread(s) ist korrekt.
		47. Berechnung: 4.371762 s. Die 47. Berechnung der Primzahlen mit 10000 Thread(s) ist korrekt.
		48. Berechnung: 4.348968 s. Die 48. Berechnung der Primzahlen mit 10000 Thread(s) ist korrekt.
		49. Berechnung: 4.363980 s. Die 49. Berechnung der Primzahlen mit 10000 Thread(s) ist korrekt.
		50. Berechnung: 4.409217 s. Die 50. Berechnung der Primzahlen mit 10000 Thread(s) ist korrekt.
		Durchschnittliche Ausfuehrungszeit des Programmes bei 50 Durchlaeufen mit 10000 Thread(s): 4.390717 s. Alle berechneten Primzahlen mit 10000 Thread(s) sind korrekt.
	Berechnung mittels 11000 Thread(s):
		1. Berechnung: 4.704332 s. Die 1. Berechnung der Primzahlen mit 11000 Thread(s) ist korrekt.
		2. Berechnung: 4.729403 s. Die 2. Berechnung der Primzahlen mit 11000 Thread(s) ist korrekt.
		3. Berechnung: 4.779503 s. Die 3. Berechnung der Primzahlen mit 11000 Thread(s) ist korrekt.
		4. Berechnung: 4.751348 s. Die 4. Berechnung der Primzahlen mit 11000 Thread(s) ist korrekt.
		5. Berechnung: 4.717795 s. Die 5. Berechnung der Primzahlen mit 11000 Thread(s) ist korrekt.
		6. Berechnung: 4.724923 s. Die 6. Berechnung der Primzahlen mit 11000 Thread(s) ist korrekt.
		7. Berechnung: 4.764093 s. Die 7. Berechnung der Primzahlen mit 11000 Thread(s) ist korrekt.
		8. Berechnung: 4.688243 s. Die 8. Berechnung der Primzahlen mit 11000 Thread(s) ist korrekt.
		9. Berechnung: 4.759943 s. Die 9. Berechnung der Primzahlen mit 11000 Thread(s) ist korrekt.
		10. Berechnung: 4.708829 s. Die 10. Berechnung der Primzahlen mit 11000 Thread(s) ist korrekt.
		11. Berechnung: 4.711846 s. Die 11. Berechnung der Primzahlen mit 11000 Thread(s) ist korrekt.
		12. Berechnung: 4.711549 s. Die 12. Berechnung der Primzahlen mit 11000 Thread(s) ist korrekt.
		13. Berechnung: 4.701882 s. Die 13. Berechnung der Primzahlen mit 11000 Thread(s) ist korrekt.
		14. Berechnung: 4.671612 s. Die 14. Berechnung der Primzahlen mit 11000 Thread(s) ist korrekt.
		15. Berechnung: 4.716559 s. Die 15. Berechnung der Primzahlen mit 11000 Thread(s) ist korrekt.
		16. Berechnung: 4.718034 s. Die 16. Berechnung der Primzahlen mit 11000 Thread(s) ist korrekt.
		17. Berechnung: 4.774050 s. Die 17. Berechnung der Primzahlen mit 11000 Thread(s) ist korrekt.
		18. Berechnung: 6.004779 s. Die 18. Berechnung der Primzahlen mit 11000 Thread(s) ist korrekt.
		19. Berechnung: 5.900560 s. Die 19. Berechnung der Primzahlen mit 11000 Thread(s) ist korrekt.
		20. Berechnung: 4.999858 s. Die 20. Berechnung der Primzahlen mit 11000 Thread(s) ist korrekt.
		21. Berechnung: 4.620417 s. Die 21. Berechnung der Primzahlen mit 11000 Thread(s) ist korrekt.
		22. Berechnung: 4.706951 s. Die 22. Berechnung der Primzahlen mit 11000 Thread(s) ist korrekt.
		23. Berechnung: 4.740192 s. Die 23. Berechnung der Primzahlen mit 11000 Thread(s) ist korrekt.
		24. Berechnung: 4.755661 s. Die 24. Berechnung der Primzahlen mit 11000 Thread(s) ist korrekt.
		25. Berechnung: 4.783977 s. Die 25. Berechnung der Primzahlen mit 11000 Thread(s) ist korrekt.
		26. Berechnung: 4.693644 s. Die 26. Berechnung der Primzahlen mit 11000 Thread(s) ist korrekt.
		27. Berechnung: 4.742139 s. Die 27. Berechnung der Primzahlen mit 11000 Thread(s) ist korrekt.
		28. Berechnung: 4.651991 s. Die 28. Berechnung der Primzahlen mit 11000 Thread(s) ist korrekt.
		29. Berechnung: 4.629308 s. Die 29. Berechnung der Primzahlen mit 11000 Thread(s) ist korrekt.
		30. Berechnung: 4.732958 s. Die 30. Berechnung der Primzahlen mit 11000 Thread(s) ist korrekt.
		31. Berechnung: 4.705415 s. Die 31. Berechnung der Primzahlen mit 11000 Thread(s) ist korrekt.
		32. Berechnung: 4.722162 s. Die 32. Berechnung der Primzahlen mit 11000 Thread(s) ist korrekt.
		33. Berechnung: 4.682663 s. Die 33. Berechnung der Primzahlen mit 11000 Thread(s) ist korrekt.
		34. Berechnung: 4.712547 s. Die 34. Berechnung der Primzahlen mit 11000 Thread(s) ist korrekt.
		35. Berechnung: 4.861556 s. Die 35. Berechnung der Primzahlen mit 11000 Thread(s) ist korrekt.
		36. Berechnung: 4.711378 s. Die 36. Berechnung der Primzahlen mit 11000 Thread(s) ist korrekt.
		37. Berechnung: 4.744300 s. Die 37. Berechnung der Primzahlen mit 11000 Thread(s) ist korrekt.
		38. Berechnung: 4.721530 s. Die 38. Berechnung der Primzahlen mit 11000 Thread(s) ist korrekt.
		39. Berechnung: 4.685088 s. Die 39. Berechnung der Primzahlen mit 11000 Thread(s) ist korrekt.
		40. Berechnung: 4.746425 s. Die 40. Berechnung der Primzahlen mit 11000 Thread(s) ist korrekt.
		41. Berechnung: 4.750306 s. Die 41. Berechnung der Primzahlen mit 11000 Thread(s) ist korrekt.
		42. Berechnung: 4.718859 s. Die 42. Berechnung der Primzahlen mit 11000 Thread(s) ist korrekt.
		43. Berechnung: 4.735457 s. Die 43. Berechnung der Primzahlen mit 11000 Thread(s) ist korrekt.
		44. Berechnung: 4.707452 s. Die 44. Berechnung der Primzahlen mit 11000 Thread(s) ist korrekt.
		45. Berechnung: 4.856215 s. Die 45. Berechnung der Primzahlen mit 11000 Thread(s) ist korrekt.
		46. Berechnung: 4.714042 s. Die 46. Berechnung der Primzahlen mit 11000 Thread(s) ist korrekt.
		47. Berechnung: 4.741452 s. Die 47. Berechnung der Primzahlen mit 11000 Thread(s) ist korrekt.
		48. Berechnung: 4.725873 s. Die 48. Berechnung der Primzahlen mit 11000 Thread(s) ist korrekt.
		49. Berechnung: 4.729825 s. Die 49. Berechnung der Primzahlen mit 11000 Thread(s) ist korrekt.
		50. Berechnung: 4.661800 s. Die 50. Berechnung der Primzahlen mit 11000 Thread(s) ist korrekt.
		Durchschnittliche Ausfuehrungszeit des Programmes bei 50 Durchlaeufen mit 11000 Thread(s): 4.778614 s. Alle berechneten Primzahlen mit 11000 Thread(s) sind korrekt.
	Berechnung mittels 12000 Thread(s):
		1. Berechnung: 5.508008 s. Die 1. Berechnung der Primzahlen mit 12000 Thread(s) ist korrekt.
		2. Berechnung: 5.429342 s. Die 2. Berechnung der Primzahlen mit 12000 Thread(s) ist korrekt.
		3. Berechnung: 5.488857 s. Die 3. Berechnung der Primzahlen mit 12000 Thread(s) ist korrekt.
		4. Berechnung: 5.392186 s. Die 4. Berechnung der Primzahlen mit 12000 Thread(s) ist korrekt.
		5. Berechnung: 5.457823 s. Die 5. Berechnung der Primzahlen mit 12000 Thread(s) ist korrekt.
		6. Berechnung: 5.421866 s. Die 6. Berechnung der Primzahlen mit 12000 Thread(s) ist korrekt.
		7. Berechnung: 5.469256 s. Die 7. Berechnung der Primzahlen mit 12000 Thread(s) ist korrekt.
		8. Berechnung: 5.353184 s. Die 8. Berechnung der Primzahlen mit 12000 Thread(s) ist korrekt.
		9. Berechnung: 5.542599 s. Die 9. Berechnung der Primzahlen mit 12000 Thread(s) ist korrekt.
		10. Berechnung: 5.419082 s. Die 10. Berechnung der Primzahlen mit 12000 Thread(s) ist korrekt.
		11. Berechnung: 5.487543 s. Die 11. Berechnung der Primzahlen mit 12000 Thread(s) ist korrekt.
		12. Berechnung: 5.457730 s. Die 12. Berechnung der Primzahlen mit 12000 Thread(s) ist korrekt.
		13. Berechnung: 5.480764 s. Die 13. Berechnung der Primzahlen mit 12000 Thread(s) ist korrekt.
		14. Berechnung: 5.447038 s. Die 14. Berechnung der Primzahlen mit 12000 Thread(s) ist korrekt.
		15. Berechnung: 5.417061 s. Die 15. Berechnung der Primzahlen mit 12000 Thread(s) ist korrekt.
		16. Berechnung: 5.470418 s. Die 16. Berechnung der Primzahlen mit 12000 Thread(s) ist korrekt.
		17. Berechnung: 5.462768 s. Die 17. Berechnung der Primzahlen mit 12000 Thread(s) ist korrekt.
		18. Berechnung: 5.470623 s. Die 18. Berechnung der Primzahlen mit 12000 Thread(s) ist korrekt.
		19. Berechnung: 5.375725 s. Die 19. Berechnung der Primzahlen mit 12000 Thread(s) ist korrekt.
		20. Berechnung: 5.504133 s. Die 20. Berechnung der Primzahlen mit 12000 Thread(s) ist korrekt.
		21. Berechnung: 5.446239 s. Die 21. Berechnung der Primzahlen mit 12000 Thread(s) ist korrekt.
		22. Berechnung: 5.435590 s. Die 22. Berechnung der Primzahlen mit 12000 Thread(s) ist korrekt.
		23. Berechnung: 5.475371 s. Die 23. Berechnung der Primzahlen mit 12000 Thread(s) ist korrekt.
		24. Berechnung: 5.432687 s. Die 24. Berechnung der Primzahlen mit 12000 Thread(s) ist korrekt.
		25. Berechnung: 5.438978 s. Die 25. Berechnung der Primzahlen mit 12000 Thread(s) ist korrekt.
		26. Berechnung: 5.503310 s. Die 26. Berechnung der Primzahlen mit 12000 Thread(s) ist korrekt.
		27. Berechnung: 5.476306 s. Die 27. Berechnung der Primzahlen mit 12000 Thread(s) ist korrekt.
		28. Berechnung: 5.392419 s. Die 28. Berechnung der Primzahlen mit 12000 Thread(s) ist korrekt.
		29. Berechnung: 5.413043 s. Die 29. Berechnung der Primzahlen mit 12000 Thread(s) ist korrekt.
		30. Berechnung: 5.429325 s. Die 30. Berechnung der Primzahlen mit 12000 Thread(s) ist korrekt.
		31. Berechnung: 5.464732 s. Die 31. Berechnung der Primzahlen mit 12000 Thread(s) ist korrekt.
		32. Berechnung: 5.558164 s. Die 32. Berechnung der Primzahlen mit 12000 Thread(s) ist korrekt.
		33. Berechnung: 5.472523 s. Die 33. Berechnung der Primzahlen mit 12000 Thread(s) ist korrekt.
		34. Berechnung: 5.379255 s. Die 34. Berechnung der Primzahlen mit 12000 Thread(s) ist korrekt.
		35. Berechnung: 5.456851 s. Die 35. Berechnung der Primzahlen mit 12000 Thread(s) ist korrekt.
		36. Berechnung: 5.502550 s. Die 36. Berechnung der Primzahlen mit 12000 Thread(s) ist korrekt.
		37. Berechnung: 5.387579 s. Die 37. Berechnung der Primzahlen mit 12000 Thread(s) ist korrekt.
		38. Berechnung: 5.460854 s. Die 38. Berechnung der Primzahlen mit 12000 Thread(s) ist korrekt.
		39. Berechnung: 5.369335 s. Die 39. Berechnung der Primzahlen mit 12000 Thread(s) ist korrekt.
		40. Berechnung: 5.451939 s. Die 40. Berechnung der Primzahlen mit 12000 Thread(s) ist korrekt.
		41. Berechnung: 5.503287 s. Die 41. Berechnung der Primzahlen mit 12000 Thread(s) ist korrekt.
		42. Berechnung: 5.464294 s. Die 42. Berechnung der Primzahlen mit 12000 Thread(s) ist korrekt.
		43. Berechnung: 5.468118 s. Die 43. Berechnung der Primzahlen mit 12000 Thread(s) ist korrekt.
		44. Berechnung: 5.423303 s. Die 44. Berechnung der Primzahlen mit 12000 Thread(s) ist korrekt.
		45. Berechnung: 5.481057 s. Die 45. Berechnung der Primzahlen mit 12000 Thread(s) ist korrekt.
		46. Berechnung: 5.477393 s. Die 46. Berechnung der Primzahlen mit 12000 Thread(s) ist korrekt.
		47. Berechnung: 5.522103 s. Die 47. Berechnung der Primzahlen mit 12000 Thread(s) ist korrekt.
		48. Berechnung: 5.462707 s. Die 48. Berechnung der Primzahlen mit 12000 Thread(s) ist korrekt.
		49. Berechnung: 5.456218 s. Die 49. Berechnung der Primzahlen mit 12000 Thread(s) ist korrekt.
		50. Berechnung: 5.260302 s. Die 50. Berechnung der Primzahlen mit 12000 Thread(s) ist korrekt.
		Durchschnittliche Ausfuehrungszeit des Programmes bei 50 Durchlaeufen mit 12000 Thread(s): 5.450437 s. Alle berechneten Primzahlen mit 12000 Thread(s) sind korrekt.
	Berechnung mittels 13000 Thread(s):
		1. Berechnung: 6.538098 s. Die 1. Berechnung der Primzahlen mit 13000 Thread(s) ist korrekt.
		2. Berechnung: 6.579281 s. Die 2. Berechnung der Primzahlen mit 13000 Thread(s) ist korrekt.
		3. Berechnung: 6.619606 s. Die 3. Berechnung der Primzahlen mit 13000 Thread(s) ist korrekt.
		4. Berechnung: 6.616912 s. Die 4. Berechnung der Primzahlen mit 13000 Thread(s) ist korrekt.
		5. Berechnung: 6.440529 s. Die 5. Berechnung der Primzahlen mit 13000 Thread(s) ist korrekt.
		6. Berechnung: 6.409679 s. Die 6. Berechnung der Primzahlen mit 13000 Thread(s) ist korrekt.
		7. Berechnung: 6.428886 s. Die 7. Berechnung der Primzahlen mit 13000 Thread(s) ist korrekt.
		8. Berechnung: 6.605006 s. Die 8. Berechnung der Primzahlen mit 13000 Thread(s) ist korrekt.
		9. Berechnung: 6.413855 s. Die 9. Berechnung der Primzahlen mit 13000 Thread(s) ist korrekt.
		10. Berechnung: 6.638617 s. Die 10. Berechnung der Primzahlen mit 13000 Thread(s) ist korrekt.
		11. Berechnung: 6.462603 s. Die 11. Berechnung der Primzahlen mit 13000 Thread(s) ist korrekt.
		12. Berechnung: 6.653570 s. Die 12. Berechnung der Primzahlen mit 13000 Thread(s) ist korrekt.
		13. Berechnung: 6.643552 s. Die 13. Berechnung der Primzahlen mit 13000 Thread(s) ist korrekt.
		14. Berechnung: 6.620526 s. Die 14. Berechnung der Primzahlen mit 13000 Thread(s) ist korrekt.
		15. Berechnung: 6.611336 s. Die 15. Berechnung der Primzahlen mit 13000 Thread(s) ist korrekt.
		16. Berechnung: 6.638133 s. Die 16. Berechnung der Primzahlen mit 13000 Thread(s) ist korrekt.
		17. Berechnung: 6.458527 s. Die 17. Berechnung der Primzahlen mit 13000 Thread(s) ist korrekt.
		18. Berechnung: 6.622007 s. Die 18. Berechnung der Primzahlen mit 13000 Thread(s) ist korrekt.
		19. Berechnung: 6.655968 s. Die 19. Berechnung der Primzahlen mit 13000 Thread(s) ist korrekt.
		20. Berechnung: 6.625106 s. Die 20. Berechnung der Primzahlen mit 13000 Thread(s) ist korrekt.
		21. Berechnung: 6.628395 s. Die 21. Berechnung der Primzahlen mit 13000 Thread(s) ist korrekt.
		22. Berechnung: 6.621509 s. Die 22. Berechnung der Primzahlen mit 13000 Thread(s) ist korrekt.
		23. Berechnung: 6.610822 s. Die 23. Berechnung der Primzahlen mit 13000 Thread(s) ist korrekt.
		24. Berechnung: 6.599885 s. Die 24. Berechnung der Primzahlen mit 13000 Thread(s) ist korrekt.
		25. Berechnung: 6.653252 s. Die 25. Berechnung der Primzahlen mit 13000 Thread(s) ist korrekt.
		26. Berechnung: 6.596849 s. Die 26. Berechnung der Primzahlen mit 13000 Thread(s) ist korrekt.
		27. Berechnung: 6.567148 s. Die 27. Berechnung der Primzahlen mit 13000 Thread(s) ist korrekt.
		28. Berechnung: 6.605083 s. Die 28. Berechnung der Primzahlen mit 13000 Thread(s) ist korrekt.
		29. Berechnung: 6.586887 s. Die 29. Berechnung der Primzahlen mit 13000 Thread(s) ist korrekt.
		30. Berechnung: 6.674339 s. Die 30. Berechnung der Primzahlen mit 13000 Thread(s) ist korrekt.
		31. Berechnung: 6.599760 s. Die 31. Berechnung der Primzahlen mit 13000 Thread(s) ist korrekt.
		32. Berechnung: 6.591616 s. Die 32. Berechnung der Primzahlen mit 13000 Thread(s) ist korrekt.
		33. Berechnung: 6.588741 s. Die 33. Berechnung der Primzahlen mit 13000 Thread(s) ist korrekt.
		34. Berechnung: 6.451633 s. Die 34. Berechnung der Primzahlen mit 13000 Thread(s) ist korrekt.
		35. Berechnung: 6.592376 s. Die 35. Berechnung der Primzahlen mit 13000 Thread(s) ist korrekt.
		36. Berechnung: 6.595313 s. Die 36. Berechnung der Primzahlen mit 13000 Thread(s) ist korrekt.
		37. Berechnung: 6.621530 s. Die 37. Berechnung der Primzahlen mit 13000 Thread(s) ist korrekt.
		38. Berechnung: 6.615442 s. Die 38. Berechnung der Primzahlen mit 13000 Thread(s) ist korrekt.
		39. Berechnung: 6.572804 s. Die 39. Berechnung der Primzahlen mit 13000 Thread(s) ist korrekt.
		40. Berechnung: 6.652448 s. Die 40. Berechnung der Primzahlen mit 13000 Thread(s) ist korrekt.
		41. Berechnung: 6.591749 s. Die 41. Berechnung der Primzahlen mit 13000 Thread(s) ist korrekt.
		42. Berechnung: 6.621069 s. Die 42. Berechnung der Primzahlen mit 13000 Thread(s) ist korrekt.
		43. Berechnung: 6.571289 s. Die 43. Berechnung der Primzahlen mit 13000 Thread(s) ist korrekt.
		44. Berechnung: 6.425365 s. Die 44. Berechnung der Primzahlen mit 13000 Thread(s) ist korrekt.
		45. Berechnung: 6.599938 s. Die 45. Berechnung der Primzahlen mit 13000 Thread(s) ist korrekt.
		46. Berechnung: 6.627443 s. Die 46. Berechnung der Primzahlen mit 13000 Thread(s) ist korrekt.
		47. Berechnung: 6.574696 s. Die 47. Berechnung der Primzahlen mit 13000 Thread(s) ist korrekt.
		48. Berechnung: 6.616681 s. Die 48. Berechnung der Primzahlen mit 13000 Thread(s) ist korrekt.
		49. Berechnung: 6.423336 s. Die 49. Berechnung der Primzahlen mit 13000 Thread(s) ist korrekt.
		50. Berechnung: 6.622863 s. Die 50. Berechnung der Primzahlen mit 13000 Thread(s) ist korrekt.
		Durchschnittliche Ausfuehrungszeit des Programmes bei 50 Durchlaeufen mit 13000 Thread(s): 6.579641 s. Alle berechneten Primzahlen mit 13000 Thread(s) sind korrekt.
	Berechnung mittels 14000 Thread(s):
		1. Berechnung: 5.113576 s. Die 1. Berechnung der Primzahlen mit 14000 Thread(s) ist korrekt.
		2. Berechnung: 5.128705 s. Die 2. Berechnung der Primzahlen mit 14000 Thread(s) ist korrekt.
		3. Berechnung: 5.099845 s. Die 3. Berechnung der Primzahlen mit 14000 Thread(s) ist korrekt.
		4. Berechnung: 5.051494 s. Die 4. Berechnung der Primzahlen mit 14000 Thread(s) ist korrekt.
		5. Berechnung: 5.124807 s. Die 5. Berechnung der Primzahlen mit 14000 Thread(s) ist korrekt.
		6. Berechnung: 5.129956 s. Die 6. Berechnung der Primzahlen mit 14000 Thread(s) ist korrekt.
		7. Berechnung: 5.155582 s. Die 7. Berechnung der Primzahlen mit 14000 Thread(s) ist korrekt.
		8. Berechnung: 5.136948 s. Die 8. Berechnung der Primzahlen mit 14000 Thread(s) ist korrekt.
		9. Berechnung: 5.084294 s. Die 9. Berechnung der Primzahlen mit 14000 Thread(s) ist korrekt.
		10. Berechnung: 5.037663 s. Die 10. Berechnung der Primzahlen mit 14000 Thread(s) ist korrekt.
		11. Berechnung: 5.137894 s. Die 11. Berechnung der Primzahlen mit 14000 Thread(s) ist korrekt.
		12. Berechnung: 5.150613 s. Die 12. Berechnung der Primzahlen mit 14000 Thread(s) ist korrekt.
		13. Berechnung: 5.032572 s. Die 13. Berechnung der Primzahlen mit 14000 Thread(s) ist korrekt.
		14. Berechnung: 5.081748 s. Die 14. Berechnung der Primzahlen mit 14000 Thread(s) ist korrekt.
		15. Berechnung: 5.091474 s. Die 15. Berechnung der Primzahlen mit 14000 Thread(s) ist korrekt.
		16. Berechnung: 5.072276 s. Die 16. Berechnung der Primzahlen mit 14000 Thread(s) ist korrekt.
		17. Berechnung: 5.126929 s. Die 17. Berechnung der Primzahlen mit 14000 Thread(s) ist korrekt.
		18. Berechnung: 5.120062 s. Die 18. Berechnung der Primzahlen mit 14000 Thread(s) ist korrekt.
		19. Berechnung: 5.200653 s. Die 19. Berechnung der Primzahlen mit 14000 Thread(s) ist korrekt.
		20. Berechnung: 5.103722 s. Die 20. Berechnung der Primzahlen mit 14000 Thread(s) ist korrekt.
		21. Berechnung: 5.153867 s. Die 21. Berechnung der Primzahlen mit 14000 Thread(s) ist korrekt.
		22. Berechnung: 5.059739 s. Die 22. Berechnung der Primzahlen mit 14000 Thread(s) ist korrekt.
		23. Berechnung: 5.109265 s. Die 23. Berechnung der Primzahlen mit 14000 Thread(s) ist korrekt.
		24. Berechnung: 5.098843 s. Die 24. Berechnung der Primzahlen mit 14000 Thread(s) ist korrekt.
		25. Berechnung: 5.070207 s. Die 25. Berechnung der Primzahlen mit 14000 Thread(s) ist korrekt.
		26. Berechnung: 5.126663 s. Die 26. Berechnung der Primzahlen mit 14000 Thread(s) ist korrekt.
		27. Berechnung: 5.142829 s. Die 27. Berechnung der Primzahlen mit 14000 Thread(s) ist korrekt.
		28. Berechnung: 5.090620 s. Die 28. Berechnung der Primzahlen mit 14000 Thread(s) ist korrekt.
		29. Berechnung: 5.114168 s. Die 29. Berechnung der Primzahlen mit 14000 Thread(s) ist korrekt.
		30. Berechnung: 5.133264 s. Die 30. Berechnung der Primzahlen mit 14000 Thread(s) ist korrekt.
		31. Berechnung: 5.061606 s. Die 31. Berechnung der Primzahlen mit 14000 Thread(s) ist korrekt.
		32. Berechnung: 5.090408 s. Die 32. Berechnung der Primzahlen mit 14000 Thread(s) ist korrekt.
		33. Berechnung: 5.128128 s. Die 33. Berechnung der Primzahlen mit 14000 Thread(s) ist korrekt.
		34. Berechnung: 5.209492 s. Die 34. Berechnung der Primzahlen mit 14000 Thread(s) ist korrekt.
		35. Berechnung: 5.107620 s. Die 35. Berechnung der Primzahlen mit 14000 Thread(s) ist korrekt.
		36. Berechnung: 5.181332 s. Die 36. Berechnung der Primzahlen mit 14000 Thread(s) ist korrekt.
		37. Berechnung: 5.068357 s. Die 37. Berechnung der Primzahlen mit 14000 Thread(s) ist korrekt.
		38. Berechnung: 5.164040 s. Die 38. Berechnung der Primzahlen mit 14000 Thread(s) ist korrekt.
		39. Berechnung: 5.108798 s. Die 39. Berechnung der Primzahlen mit 14000 Thread(s) ist korrekt.
		40. Berechnung: 5.113812 s. Die 40. Berechnung der Primzahlen mit 14000 Thread(s) ist korrekt.
		41. Berechnung: 5.083268 s. Die 41. Berechnung der Primzahlen mit 14000 Thread(s) ist korrekt.
		42. Berechnung: 5.118482 s. Die 42. Berechnung der Primzahlen mit 14000 Thread(s) ist korrekt.
		43. Berechnung: 5.159659 s. Die 43. Berechnung der Primzahlen mit 14000 Thread(s) ist korrekt.
		44. Berechnung: 5.147098 s. Die 44. Berechnung der Primzahlen mit 14000 Thread(s) ist korrekt.
		45. Berechnung: 5.105989 s. Die 45. Berechnung der Primzahlen mit 14000 Thread(s) ist korrekt.
		46. Berechnung: 5.077780 s. Die 46. Berechnung der Primzahlen mit 14000 Thread(s) ist korrekt.
		47. Berechnung: 5.157344 s. Die 47. Berechnung der Primzahlen mit 14000 Thread(s) ist korrekt.
		48. Berechnung: 5.150512 s. Die 48. Berechnung der Primzahlen mit 14000 Thread(s) ist korrekt.
		49. Berechnung: 5.124214 s. Die 49. Berechnung der Primzahlen mit 14000 Thread(s) ist korrekt.
		50. Berechnung: 5.123827 s. Die 50. Berechnung der Primzahlen mit 14000 Thread(s) ist korrekt.
		Durchschnittliche Ausfuehrungszeit des Programmes bei 50 Durchlaeufen mit 14000 Thread(s): 5.115241 s. Alle berechneten Primzahlen mit 14000 Thread(s) sind korrekt.
	Berechnung mittels 15000 Thread(s):
		1. Berechnung: 6.969681 s. Die 1. Berechnung der Primzahlen mit 15000 Thread(s) ist korrekt.
		2. Berechnung: 6.950358 s. Die 2. Berechnung der Primzahlen mit 15000 Thread(s) ist korrekt.
		3. Berechnung: 6.743826 s. Die 3. Berechnung der Primzahlen mit 15000 Thread(s) ist korrekt.
		4. Berechnung: 6.962651 s. Die 4. Berechnung der Primzahlen mit 15000 Thread(s) ist korrekt.
		5. Berechnung: 6.975755 s. Die 5. Berechnung der Primzahlen mit 15000 Thread(s) ist korrekt.
		6. Berechnung: 6.982499 s. Die 6. Berechnung der Primzahlen mit 15000 Thread(s) ist korrekt.
		7. Berechnung: 6.891736 s. Die 7. Berechnung der Primzahlen mit 15000 Thread(s) ist korrekt.
		8. Berechnung: 6.889906 s. Die 8. Berechnung der Primzahlen mit 15000 Thread(s) ist korrekt.
		9. Berechnung: 6.945435 s. Die 9. Berechnung der Primzahlen mit 15000 Thread(s) ist korrekt.
		10. Berechnung: 6.922644 s. Die 10. Berechnung der Primzahlen mit 15000 Thread(s) ist korrekt.
		11. Berechnung: 6.826260 s. Die 11. Berechnung der Primzahlen mit 15000 Thread(s) ist korrekt.
		12. Berechnung: 6.966262 s. Die 12. Berechnung der Primzahlen mit 15000 Thread(s) ist korrekt.
		13. Berechnung: 6.934326 s. Die 13. Berechnung der Primzahlen mit 15000 Thread(s) ist korrekt.
		14. Berechnung: 6.832328 s. Die 14. Berechnung der Primzahlen mit 15000 Thread(s) ist korrekt.
		15. Berechnung: 6.915665 s. Die 15. Berechnung der Primzahlen mit 15000 Thread(s) ist korrekt.
		16. Berechnung: 6.821878 s. Die 16. Berechnung der Primzahlen mit 15000 Thread(s) ist korrekt.
		17. Berechnung: 6.945638 s. Die 17. Berechnung der Primzahlen mit 15000 Thread(s) ist korrekt.
		18. Berechnung: 6.946983 s. Die 18. Berechnung der Primzahlen mit 15000 Thread(s) ist korrekt.
		19. Berechnung: 6.726610 s. Die 19. Berechnung der Primzahlen mit 15000 Thread(s) ist korrekt.
		20. Berechnung: 6.921106 s. Die 20. Berechnung der Primzahlen mit 15000 Thread(s) ist korrekt.
		21. Berechnung: 6.975216 s. Die 21. Berechnung der Primzahlen mit 15000 Thread(s) ist korrekt.
		22. Berechnung: 6.934599 s. Die 22. Berechnung der Primzahlen mit 15000 Thread(s) ist korrekt.
		23. Berechnung: 6.923463 s. Die 23. Berechnung der Primzahlen mit 15000 Thread(s) ist korrekt.
		24. Berechnung: 6.955019 s. Die 24. Berechnung der Primzahlen mit 15000 Thread(s) ist korrekt.
		25. Berechnung: 6.963765 s. Die 25. Berechnung der Primzahlen mit 15000 Thread(s) ist korrekt.
		26. Berechnung: 6.973768 s. Die 26. Berechnung der Primzahlen mit 15000 Thread(s) ist korrekt.
		27. Berechnung: 8.373200 s. Die 27. Berechnung der Primzahlen mit 15000 Thread(s) ist korrekt.
		28. Berechnung: 7.935386 s. Die 28. Berechnung der Primzahlen mit 15000 Thread(s) ist korrekt.
		29. Berechnung: 6.917119 s. Die 29. Berechnung der Primzahlen mit 15000 Thread(s) ist korrekt.
		30. Berechnung: 6.959768 s. Die 30. Berechnung der Primzahlen mit 15000 Thread(s) ist korrekt.
		31. Berechnung: 6.743931 s. Die 31. Berechnung der Primzahlen mit 15000 Thread(s) ist korrekt.
		32. Berechnung: 6.765757 s. Die 32. Berechnung der Primzahlen mit 15000 Thread(s) ist korrekt.
		33. Berechnung: 6.716677 s. Die 33. Berechnung der Primzahlen mit 15000 Thread(s) ist korrekt.
		34. Berechnung: 6.935341 s. Die 34. Berechnung der Primzahlen mit 15000 Thread(s) ist korrekt.
		35. Berechnung: 6.942654 s. Die 35. Berechnung der Primzahlen mit 15000 Thread(s) ist korrekt.
		36. Berechnung: 6.767836 s. Die 36. Berechnung der Primzahlen mit 15000 Thread(s) ist korrekt.
		37. Berechnung: 6.978114 s. Die 37. Berechnung der Primzahlen mit 15000 Thread(s) ist korrekt.
		38. Berechnung: 6.803332 s. Die 38. Berechnung der Primzahlen mit 15000 Thread(s) ist korrekt.
		39. Berechnung: 7.059495 s. Die 39. Berechnung der Primzahlen mit 15000 Thread(s) ist korrekt.
		40. Berechnung: 6.925586 s. Die 40. Berechnung der Primzahlen mit 15000 Thread(s) ist korrekt.
		41. Berechnung: 6.956973 s. Die 41. Berechnung der Primzahlen mit 15000 Thread(s) ist korrekt.
		42. Berechnung: 6.984790 s. Die 42. Berechnung der Primzahlen mit 15000 Thread(s) ist korrekt.
		43. Berechnung: 6.743677 s. Die 43. Berechnung der Primzahlen mit 15000 Thread(s) ist korrekt.
		44. Berechnung: 6.939640 s. Die 44. Berechnung der Primzahlen mit 15000 Thread(s) ist korrekt.
		45. Berechnung: 6.979999 s. Die 45. Berechnung der Primzahlen mit 15000 Thread(s) ist korrekt.
		46. Berechnung: 6.922431 s. Die 46. Berechnung der Primzahlen mit 15000 Thread(s) ist korrekt.
		47. Berechnung: 6.903102 s. Die 47. Berechnung der Primzahlen mit 15000 Thread(s) ist korrekt.
		48. Berechnung: 6.962904 s. Die 48. Berechnung der Primzahlen mit 15000 Thread(s) ist korrekt.
		49. Berechnung: 6.827138 s. Die 49. Berechnung der Primzahlen mit 15000 Thread(s) ist korrekt.
		50. Berechnung: 6.931078 s. Die 50. Berechnung der Primzahlen mit 15000 Thread(s) ist korrekt.
		Durchschnittliche Ausfuehrungszeit des Programmes bei 50 Durchlaeufen mit 15000 Thread(s): 6.955466 s. Alle berechneten Primzahlen mit 15000 Thread(s) sind korrekt.
	Berechnung mittels 16000 Thread(s):
		1. Berechnung: 5.697596 s. Die 1. Berechnung der Primzahlen mit 16000 Thread(s) ist korrekt.
		2. Berechnung: 5.658974 s. Die 2. Berechnung der Primzahlen mit 16000 Thread(s) ist korrekt.
		3. Berechnung: 5.690658 s. Die 3. Berechnung der Primzahlen mit 16000 Thread(s) ist korrekt.
		4. Berechnung: 5.569901 s. Die 4. Berechnung der Primzahlen mit 16000 Thread(s) ist korrekt.
		5. Berechnung: 5.659053 s. Die 5. Berechnung der Primzahlen mit 16000 Thread(s) ist korrekt.
		6. Berechnung: 5.737834 s. Die 6. Berechnung der Primzahlen mit 16000 Thread(s) ist korrekt.
		7. Berechnung: 5.706835 s. Die 7. Berechnung der Primzahlen mit 16000 Thread(s) ist korrekt.
		8. Berechnung: 5.669833 s. Die 8. Berechnung der Primzahlen mit 16000 Thread(s) ist korrekt.
		9. Berechnung: 5.652506 s. Die 9. Berechnung der Primzahlen mit 16000 Thread(s) ist korrekt.
		10. Berechnung: 5.663514 s. Die 10. Berechnung der Primzahlen mit 16000 Thread(s) ist korrekt.
		11. Berechnung: 5.731686 s. Die 11. Berechnung der Primzahlen mit 16000 Thread(s) ist korrekt.
		12. Berechnung: 5.617908 s. Die 12. Berechnung der Primzahlen mit 16000 Thread(s) ist korrekt.
		13. Berechnung: 5.713499 s. Die 13. Berechnung der Primzahlen mit 16000 Thread(s) ist korrekt.
		14. Berechnung: 5.675123 s. Die 14. Berechnung der Primzahlen mit 16000 Thread(s) ist korrekt.
		15. Berechnung: 5.710252 s. Die 15. Berechnung der Primzahlen mit 16000 Thread(s) ist korrekt.
		16. Berechnung: 5.721501 s. Die 16. Berechnung der Primzahlen mit 16000 Thread(s) ist korrekt.
		17. Berechnung: 5.668929 s. Die 17. Berechnung der Primzahlen mit 16000 Thread(s) ist korrekt.
		18. Berechnung: 5.659739 s. Die 18. Berechnung der Primzahlen mit 16000 Thread(s) ist korrekt.
		19. Berechnung: 5.704163 s. Die 19. Berechnung der Primzahlen mit 16000 Thread(s) ist korrekt.
		20. Berechnung: 5.705007 s. Die 20. Berechnung der Primzahlen mit 16000 Thread(s) ist korrekt.
		21. Berechnung: 5.687384 s. Die 21. Berechnung der Primzahlen mit 16000 Thread(s) ist korrekt.
		22. Berechnung: 5.593810 s. Die 22. Berechnung der Primzahlen mit 16000 Thread(s) ist korrekt.
		23. Berechnung: 5.707171 s. Die 23. Berechnung der Primzahlen mit 16000 Thread(s) ist korrekt.
		24. Berechnung: 5.620262 s. Die 24. Berechnung der Primzahlen mit 16000 Thread(s) ist korrekt.
		25. Berechnung: 5.685143 s. Die 25. Berechnung der Primzahlen mit 16000 Thread(s) ist korrekt.
		26. Berechnung: 5.644967 s. Die 26. Berechnung der Primzahlen mit 16000 Thread(s) ist korrekt.
		27. Berechnung: 5.688418 s. Die 27. Berechnung der Primzahlen mit 16000 Thread(s) ist korrekt.
		28. Berechnung: 5.710594 s. Die 28. Berechnung der Primzahlen mit 16000 Thread(s) ist korrekt.
		29. Berechnung: 5.590626 s. Die 29. Berechnung der Primzahlen mit 16000 Thread(s) ist korrekt.
		30. Berechnung: 5.821866 s. Die 30. Berechnung der Primzahlen mit 16000 Thread(s) ist korrekt.
		31. Berechnung: 5.713055 s. Die 31. Berechnung der Primzahlen mit 16000 Thread(s) ist korrekt.
		32. Berechnung: 5.645584 s. Die 32. Berechnung der Primzahlen mit 16000 Thread(s) ist korrekt.
		33. Berechnung: 5.728821 s. Die 33. Berechnung der Primzahlen mit 16000 Thread(s) ist korrekt.
		34. Berechnung: 5.707215 s. Die 34. Berechnung der Primzahlen mit 16000 Thread(s) ist korrekt.
		35. Berechnung: 5.649256 s. Die 35. Berechnung der Primzahlen mit 16000 Thread(s) ist korrekt.
		36. Berechnung: 5.686273 s. Die 36. Berechnung der Primzahlen mit 16000 Thread(s) ist korrekt.
		37. Berechnung: 5.701256 s. Die 37. Berechnung der Primzahlen mit 16000 Thread(s) ist korrekt.
		38. Berechnung: 5.719602 s. Die 38. Berechnung der Primzahlen mit 16000 Thread(s) ist korrekt.
		39. Berechnung: 5.669325 s. Die 39. Berechnung der Primzahlen mit 16000 Thread(s) ist korrekt.
		40. Berechnung: 5.706792 s. Die 40. Berechnung der Primzahlen mit 16000 Thread(s) ist korrekt.
		41. Berechnung: 5.616076 s. Die 41. Berechnung der Primzahlen mit 16000 Thread(s) ist korrekt.
		42. Berechnung: 5.599638 s. Die 42. Berechnung der Primzahlen mit 16000 Thread(s) ist korrekt.
		43. Berechnung: 5.619271 s. Die 43. Berechnung der Primzahlen mit 16000 Thread(s) ist korrekt.
		44. Berechnung: 5.723863 s. Die 44. Berechnung der Primzahlen mit 16000 Thread(s) ist korrekt.
		45. Berechnung: 5.664923 s. Die 45. Berechnung der Primzahlen mit 16000 Thread(s) ist korrekt.
		46. Berechnung: 5.628620 s. Die 46. Berechnung der Primzahlen mit 16000 Thread(s) ist korrekt.
		47. Berechnung: 5.668347 s. Die 47. Berechnung der Primzahlen mit 16000 Thread(s) ist korrekt.
		48. Berechnung: 5.651501 s. Die 48. Berechnung der Primzahlen mit 16000 Thread(s) ist korrekt.
		49. Berechnung: 5.697237 s. Die 49. Berechnung der Primzahlen mit 16000 Thread(s) ist korrekt.
		50. Berechnung: 5.692252 s. Die 50. Berechnung der Primzahlen mit 16000 Thread(s) ist korrekt.
		Durchschnittliche Ausfuehrungszeit des Programmes bei 50 Durchlaeufen mit 16000 Thread(s): 5.677073 s. Alle berechneten Primzahlen mit 16000 Thread(s) sind korrekt.
	Berechnung mittels 17000 Thread(s):
		1. Berechnung: 8.060917 s. Die 1. Berechnung der Primzahlen mit 17000 Thread(s) ist korrekt.
		2. Berechnung: 8.119672 s. Die 2. Berechnung der Primzahlen mit 17000 Thread(s) ist korrekt.
		3. Berechnung: 8.031716 s. Die 3. Berechnung der Primzahlen mit 17000 Thread(s) ist korrekt.
		4. Berechnung: 8.054232 s. Die 4. Berechnung der Primzahlen mit 17000 Thread(s) ist korrekt.
		5. Berechnung: 8.040491 s. Die 5. Berechnung der Primzahlen mit 17000 Thread(s) ist korrekt.
		6. Berechnung: 8.095627 s. Die 6. Berechnung der Primzahlen mit 17000 Thread(s) ist korrekt.
		7. Berechnung: 7.740793 s. Die 7. Berechnung der Primzahlen mit 17000 Thread(s) ist korrekt.
		8. Berechnung: 8.115951 s. Die 8. Berechnung der Primzahlen mit 17000 Thread(s) ist korrekt.
		9. Berechnung: 8.041541 s. Die 9. Berechnung der Primzahlen mit 17000 Thread(s) ist korrekt.
		10. Berechnung: 8.132283 s. Die 10. Berechnung der Primzahlen mit 17000 Thread(s) ist korrekt.
		11. Berechnung: 8.045879 s. Die 11. Berechnung der Primzahlen mit 17000 Thread(s) ist korrekt.
		12. Berechnung: 8.060762 s. Die 12. Berechnung der Primzahlen mit 17000 Thread(s) ist korrekt.
		13. Berechnung: 8.075236 s. Die 13. Berechnung der Primzahlen mit 17000 Thread(s) ist korrekt.
		14. Berechnung: 8.371386 s. Die 14. Berechnung der Primzahlen mit 17000 Thread(s) ist korrekt.
		15. Berechnung: 8.063287 s. Die 15. Berechnung der Primzahlen mit 17000 Thread(s) ist korrekt.
		16. Berechnung: 8.006148 s. Die 16. Berechnung der Primzahlen mit 17000 Thread(s) ist korrekt.
		17. Berechnung: 8.089759 s. Die 17. Berechnung der Primzahlen mit 17000 Thread(s) ist korrekt.
		18. Berechnung: 8.044288 s. Die 18. Berechnung der Primzahlen mit 17000 Thread(s) ist korrekt.
		19. Berechnung: 8.070695 s. Die 19. Berechnung der Primzahlen mit 17000 Thread(s) ist korrekt.
		20. Berechnung: 8.124511 s. Die 20. Berechnung der Primzahlen mit 17000 Thread(s) ist korrekt.
		21. Berechnung: 7.959047 s. Die 21. Berechnung der Primzahlen mit 17000 Thread(s) ist korrekt.
		22. Berechnung: 8.067599 s. Die 22. Berechnung der Primzahlen mit 17000 Thread(s) ist korrekt.
		23. Berechnung: 7.846438 s. Die 23. Berechnung der Primzahlen mit 17000 Thread(s) ist korrekt.
		24. Berechnung: 7.841273 s. Die 24. Berechnung der Primzahlen mit 17000 Thread(s) ist korrekt.
		25. Berechnung: 7.825168 s. Die 25. Berechnung der Primzahlen mit 17000 Thread(s) ist korrekt.
		26. Berechnung: 8.016325 s. Die 26. Berechnung der Primzahlen mit 17000 Thread(s) ist korrekt.
		27. Berechnung: 7.864971 s. Die 27. Berechnung der Primzahlen mit 17000 Thread(s) ist korrekt.
		28. Berechnung: 8.089084 s. Die 28. Berechnung der Primzahlen mit 17000 Thread(s) ist korrekt.
		29. Berechnung: 8.081556 s. Die 29. Berechnung der Primzahlen mit 17000 Thread(s) ist korrekt.
		30. Berechnung: 7.831639 s. Die 30. Berechnung der Primzahlen mit 17000 Thread(s) ist korrekt.
		31. Berechnung: 8.066446 s. Die 31. Berechnung der Primzahlen mit 17000 Thread(s) ist korrekt.
		32. Berechnung: 7.810600 s. Die 32. Berechnung der Primzahlen mit 17000 Thread(s) ist korrekt.
		33. Berechnung: 8.072038 s. Die 33. Berechnung der Primzahlen mit 17000 Thread(s) ist korrekt.
		34. Berechnung: 8.050741 s. Die 34. Berechnung der Primzahlen mit 17000 Thread(s) ist korrekt.
		35. Berechnung: 8.006635 s. Die 35. Berechnung der Primzahlen mit 17000 Thread(s) ist korrekt.
		36. Berechnung: 7.929612 s. Die 36. Berechnung der Primzahlen mit 17000 Thread(s) ist korrekt.
		37. Berechnung: 8.087123 s. Die 37. Berechnung der Primzahlen mit 17000 Thread(s) ist korrekt.
		38. Berechnung: 7.901255 s. Die 38. Berechnung der Primzahlen mit 17000 Thread(s) ist korrekt.
		39. Berechnung: 7.757691 s. Die 39. Berechnung der Primzahlen mit 17000 Thread(s) ist korrekt.
		40. Berechnung: 8.132465 s. Die 40. Berechnung der Primzahlen mit 17000 Thread(s) ist korrekt.
		41. Berechnung: 8.055506 s. Die 41. Berechnung der Primzahlen mit 17000 Thread(s) ist korrekt.
		42. Berechnung: 8.009985 s. Die 42. Berechnung der Primzahlen mit 17000 Thread(s) ist korrekt.
		43. Berechnung: 7.851950 s. Die 43. Berechnung der Primzahlen mit 17000 Thread(s) ist korrekt.
		44. Berechnung: 8.056849 s. Die 44. Berechnung der Primzahlen mit 17000 Thread(s) ist korrekt.
		45. Berechnung: 7.990143 s. Die 45. Berechnung der Primzahlen mit 17000 Thread(s) ist korrekt.
		46. Berechnung: 7.971168 s. Die 46. Berechnung der Primzahlen mit 17000 Thread(s) ist korrekt.
		47. Berechnung: 8.031916 s. Die 47. Berechnung der Primzahlen mit 17000 Thread(s) ist korrekt.
		48. Berechnung: 8.084742 s. Die 48. Berechnung der Primzahlen mit 17000 Thread(s) ist korrekt.
		49. Berechnung: 8.044435 s. Die 49. Berechnung der Primzahlen mit 17000 Thread(s) ist korrekt.
		50. Berechnung: 7.993204 s. Die 50. Berechnung der Primzahlen mit 17000 Thread(s) ist korrekt.
		Durchschnittliche Ausfuehrungszeit des Programmes bei 50 Durchlaeufen mit 17000 Thread(s): 8.014256 s. Alle berechneten Primzahlen mit 17000 Thread(s) sind korrekt.
	Berechnung mittels 18000 Thread(s):
		1. Berechnung: 7.123577 s. Die 1. Berechnung der Primzahlen mit 18000 Thread(s) ist korrekt.
		2. Berechnung: 7.068321 s. Die 2. Berechnung der Primzahlen mit 18000 Thread(s) ist korrekt.
		3. Berechnung: 6.930758 s. Die 3. Berechnung der Primzahlen mit 18000 Thread(s) ist korrekt.
		4. Berechnung: 7.115020 s. Die 4. Berechnung der Primzahlen mit 18000 Thread(s) ist korrekt.
		5. Berechnung: 7.132879 s. Die 5. Berechnung der Primzahlen mit 18000 Thread(s) ist korrekt.
		6. Berechnung: 6.905748 s. Die 6. Berechnung der Primzahlen mit 18000 Thread(s) ist korrekt.
		7. Berechnung: 7.081467 s. Die 7. Berechnung der Primzahlen mit 18000 Thread(s) ist korrekt.
		8. Berechnung: 7.057313 s. Die 8. Berechnung der Primzahlen mit 18000 Thread(s) ist korrekt.
		9. Berechnung: 6.987588 s. Die 9. Berechnung der Primzahlen mit 18000 Thread(s) ist korrekt.
		10. Berechnung: 7.119307 s. Die 10. Berechnung der Primzahlen mit 18000 Thread(s) ist korrekt.
		11. Berechnung: 7.066072 s. Die 11. Berechnung der Primzahlen mit 18000 Thread(s) ist korrekt.
		12. Berechnung: 7.262430 s. Die 12. Berechnung der Primzahlen mit 18000 Thread(s) ist korrekt.
		13. Berechnung: 7.142783 s. Die 13. Berechnung der Primzahlen mit 18000 Thread(s) ist korrekt.
		14. Berechnung: 7.174731 s. Die 14. Berechnung der Primzahlen mit 18000 Thread(s) ist korrekt.
		15. Berechnung: 7.125297 s. Die 15. Berechnung der Primzahlen mit 18000 Thread(s) ist korrekt.
		16. Berechnung: 7.140089 s. Die 16. Berechnung der Primzahlen mit 18000 Thread(s) ist korrekt.
		17. Berechnung: 6.977525 s. Die 17. Berechnung der Primzahlen mit 18000 Thread(s) ist korrekt.
		18. Berechnung: 7.035529 s. Die 18. Berechnung der Primzahlen mit 18000 Thread(s) ist korrekt.
		19. Berechnung: 7.085056 s. Die 19. Berechnung der Primzahlen mit 18000 Thread(s) ist korrekt.
		20. Berechnung: 7.137751 s. Die 20. Berechnung der Primzahlen mit 18000 Thread(s) ist korrekt.
		21. Berechnung: 7.106611 s. Die 21. Berechnung der Primzahlen mit 18000 Thread(s) ist korrekt.
		22. Berechnung: 6.962214 s. Die 22. Berechnung der Primzahlen mit 18000 Thread(s) ist korrekt.
		23. Berechnung: 7.079436 s. Die 23. Berechnung der Primzahlen mit 18000 Thread(s) ist korrekt.
		24. Berechnung: 7.086512 s. Die 24. Berechnung der Primzahlen mit 18000 Thread(s) ist korrekt.
		25. Berechnung: 7.043085 s. Die 25. Berechnung der Primzahlen mit 18000 Thread(s) ist korrekt.
		26. Berechnung: 6.990204 s. Die 26. Berechnung der Primzahlen mit 18000 Thread(s) ist korrekt.
		27. Berechnung: 7.119208 s. Die 27. Berechnung der Primzahlen mit 18000 Thread(s) ist korrekt.
		28. Berechnung: 7.113237 s. Die 28. Berechnung der Primzahlen mit 18000 Thread(s) ist korrekt.
		29. Berechnung: 7.058279 s. Die 29. Berechnung der Primzahlen mit 18000 Thread(s) ist korrekt.
		30. Berechnung: 6.959887 s. Die 30. Berechnung der Primzahlen mit 18000 Thread(s) ist korrekt.
		31. Berechnung: 7.012184 s. Die 31. Berechnung der Primzahlen mit 18000 Thread(s) ist korrekt.
		32. Berechnung: 6.910944 s. Die 32. Berechnung der Primzahlen mit 18000 Thread(s) ist korrekt.
		33. Berechnung: 7.082985 s. Die 33. Berechnung der Primzahlen mit 18000 Thread(s) ist korrekt.
		34. Berechnung: 6.917283 s. Die 34. Berechnung der Primzahlen mit 18000 Thread(s) ist korrekt.
		35. Berechnung: 7.098312 s. Die 35. Berechnung der Primzahlen mit 18000 Thread(s) ist korrekt.
		36. Berechnung: 6.966771 s. Die 36. Berechnung der Primzahlen mit 18000 Thread(s) ist korrekt.
		37. Berechnung: 7.050146 s. Die 37. Berechnung der Primzahlen mit 18000 Thread(s) ist korrekt.
		38. Berechnung: 7.094170 s. Die 38. Berechnung der Primzahlen mit 18000 Thread(s) ist korrekt.
		39. Berechnung: 6.906396 s. Die 39. Berechnung der Primzahlen mit 18000 Thread(s) ist korrekt.
		40. Berechnung: 7.147232 s. Die 40. Berechnung der Primzahlen mit 18000 Thread(s) ist korrekt.
		41. Berechnung: 7.050791 s. Die 41. Berechnung der Primzahlen mit 18000 Thread(s) ist korrekt.
		42. Berechnung: 7.272028 s. Die 42. Berechnung der Primzahlen mit 18000 Thread(s) ist korrekt.
		43. Berechnung: 7.072626 s. Die 43. Berechnung der Primzahlen mit 18000 Thread(s) ist korrekt.
		44. Berechnung: 7.088952 s. Die 44. Berechnung der Primzahlen mit 18000 Thread(s) ist korrekt.
		45. Berechnung: 6.999267 s. Die 45. Berechnung der Primzahlen mit 18000 Thread(s) ist korrekt.
		46. Berechnung: 7.185695 s. Die 46. Berechnung der Primzahlen mit 18000 Thread(s) ist korrekt.
		47. Berechnung: 7.076109 s. Die 47. Berechnung der Primzahlen mit 18000 Thread(s) ist korrekt.
		48. Berechnung: 7.163167 s. Die 48. Berechnung der Primzahlen mit 18000 Thread(s) ist korrekt.
		49. Berechnung: 7.731105 s. Die 49. Berechnung der Primzahlen mit 18000 Thread(s) ist korrekt.
		50. Berechnung: 8.361732 s. Die 50. Berechnung der Primzahlen mit 18000 Thread(s) ist korrekt.
		Durchschnittliche Ausfuehrungszeit des Programmes bei 50 Durchlaeufen mit 18000 Thread(s): 7.107516 s. Alle berechneten Primzahlen mit 18000 Thread(s) sind korrekt.
	Berechnung mittels 19000 Thread(s):
		1. Berechnung: 6.164849 s. Die 1. Berechnung der Primzahlen mit 19000 Thread(s) ist korrekt.
		2. Berechnung: 6.111472 s. Die 2. Berechnung der Primzahlen mit 19000 Thread(s) ist korrekt.
		3. Berechnung: 6.118585 s. Die 3. Berechnung der Primzahlen mit 19000 Thread(s) ist korrekt.
		4. Berechnung: 5.938928 s. Die 4. Berechnung der Primzahlen mit 19000 Thread(s) ist korrekt.
		5. Berechnung: 6.104554 s. Die 5. Berechnung der Primzahlen mit 19000 Thread(s) ist korrekt.
		6. Berechnung: 5.943527 s. Die 6. Berechnung der Primzahlen mit 19000 Thread(s) ist korrekt.
		7. Berechnung: 6.010162 s. Die 7. Berechnung der Primzahlen mit 19000 Thread(s) ist korrekt.
		8. Berechnung: 6.132617 s. Die 8. Berechnung der Primzahlen mit 19000 Thread(s) ist korrekt.
		9. Berechnung: 6.106504 s. Die 9. Berechnung der Primzahlen mit 19000 Thread(s) ist korrekt.
		10. Berechnung: 6.105749 s. Die 10. Berechnung der Primzahlen mit 19000 Thread(s) ist korrekt.
		11. Berechnung: 6.064100 s. Die 11. Berechnung der Primzahlen mit 19000 Thread(s) ist korrekt.
		12. Berechnung: 6.163226 s. Die 12. Berechnung der Primzahlen mit 19000 Thread(s) ist korrekt.
		13. Berechnung: 6.159975 s. Die 13. Berechnung der Primzahlen mit 19000 Thread(s) ist korrekt.
		14. Berechnung: 6.034041 s. Die 14. Berechnung der Primzahlen mit 19000 Thread(s) ist korrekt.
		15. Berechnung: 6.047169 s. Die 15. Berechnung der Primzahlen mit 19000 Thread(s) ist korrekt.
		16. Berechnung: 6.070046 s. Die 16. Berechnung der Primzahlen mit 19000 Thread(s) ist korrekt.
		17. Berechnung: 6.064036 s. Die 17. Berechnung der Primzahlen mit 19000 Thread(s) ist korrekt.
		18. Berechnung: 6.140619 s. Die 18. Berechnung der Primzahlen mit 19000 Thread(s) ist korrekt.
		19. Berechnung: 5.958252 s. Die 19. Berechnung der Primzahlen mit 19000 Thread(s) ist korrekt.
		20. Berechnung: 6.056975 s. Die 20. Berechnung der Primzahlen mit 19000 Thread(s) ist korrekt.
		21. Berechnung: 6.087807 s. Die 21. Berechnung der Primzahlen mit 19000 Thread(s) ist korrekt.
		22. Berechnung: 6.087430 s. Die 22. Berechnung der Primzahlen mit 19000 Thread(s) ist korrekt.
		23. Berechnung: 6.112671 s. Die 23. Berechnung der Primzahlen mit 19000 Thread(s) ist korrekt.
		24. Berechnung: 6.077458 s. Die 24. Berechnung der Primzahlen mit 19000 Thread(s) ist korrekt.
		25. Berechnung: 6.053820 s. Die 25. Berechnung der Primzahlen mit 19000 Thread(s) ist korrekt.
		26. Berechnung: 6.079565 s. Die 26. Berechnung der Primzahlen mit 19000 Thread(s) ist korrekt.
		27. Berechnung: 5.930100 s. Die 27. Berechnung der Primzahlen mit 19000 Thread(s) ist korrekt.
		28. Berechnung: 6.085917 s. Die 28. Berechnung der Primzahlen mit 19000 Thread(s) ist korrekt.
		29. Berechnung: 6.027821 s. Die 29. Berechnung der Primzahlen mit 19000 Thread(s) ist korrekt.
		30. Berechnung: 6.070203 s. Die 30. Berechnung der Primzahlen mit 19000 Thread(s) ist korrekt.
		31. Berechnung: 6.056546 s. Die 31. Berechnung der Primzahlen mit 19000 Thread(s) ist korrekt.
		32. Berechnung: 6.076219 s. Die 32. Berechnung der Primzahlen mit 19000 Thread(s) ist korrekt.
		33. Berechnung: 6.061952 s. Die 33. Berechnung der Primzahlen mit 19000 Thread(s) ist korrekt.
		34. Berechnung: 6.041709 s. Die 34. Berechnung der Primzahlen mit 19000 Thread(s) ist korrekt.
		35. Berechnung: 5.998953 s. Die 35. Berechnung der Primzahlen mit 19000 Thread(s) ist korrekt.
		36. Berechnung: 5.986989 s. Die 36. Berechnung der Primzahlen mit 19000 Thread(s) ist korrekt.
		37. Berechnung: 6.057364 s. Die 37. Berechnung der Primzahlen mit 19000 Thread(s) ist korrekt.
		38. Berechnung: 6.094696 s. Die 38. Berechnung der Primzahlen mit 19000 Thread(s) ist korrekt.
		39. Berechnung: 5.967178 s. Die 39. Berechnung der Primzahlen mit 19000 Thread(s) ist korrekt.
		40. Berechnung: 6.048359 s. Die 40. Berechnung der Primzahlen mit 19000 Thread(s) ist korrekt.
		41. Berechnung: 6.043567 s. Die 41. Berechnung der Primzahlen mit 19000 Thread(s) ist korrekt.
		42. Berechnung: 6.076347 s. Die 42. Berechnung der Primzahlen mit 19000 Thread(s) ist korrekt.
		43. Berechnung: 6.076658 s. Die 43. Berechnung der Primzahlen mit 19000 Thread(s) ist korrekt.
		44. Berechnung: 5.962588 s. Die 44. Berechnung der Primzahlen mit 19000 Thread(s) ist korrekt.
		45. Berechnung: 6.108918 s. Die 45. Berechnung der Primzahlen mit 19000 Thread(s) ist korrekt.
		46. Berechnung: 5.986679 s. Die 46. Berechnung der Primzahlen mit 19000 Thread(s) ist korrekt.
		47. Berechnung: 6.047589 s. Die 47. Berechnung der Primzahlen mit 19000 Thread(s) ist korrekt.
		48. Berechnung: 6.062534 s. Die 48. Berechnung der Primzahlen mit 19000 Thread(s) ist korrekt.
		49. Berechnung: 5.991327 s. Die 49. Berechnung der Primzahlen mit 19000 Thread(s) ist korrekt.
		50. Berechnung: 6.097339 s. Die 50. Berechnung der Primzahlen mit 19000 Thread(s) ist korrekt.
		Durchschnittliche Ausfuehrungszeit des Programmes bei 50 Durchlaeufen mit 19000 Thread(s): 6.059034 s. Alle berechneten Primzahlen mit 19000 Thread(s) sind korrekt.
	Berechnung mittels 20000 Thread(s):
		1. Berechnung: 4.836375 s. Die 1. Berechnung der Primzahlen mit 20000 Thread(s) ist korrekt.
		2. Berechnung: 4.870407 s. Die 2. Berechnung der Primzahlen mit 20000 Thread(s) ist korrekt.
		3. Berechnung: 4.848381 s. Die 3. Berechnung der Primzahlen mit 20000 Thread(s) ist korrekt.
		4. Berechnung: 4.831939 s. Die 4. Berechnung der Primzahlen mit 20000 Thread(s) ist korrekt.
		5. Berechnung: 4.962618 s. Die 5. Berechnung der Primzahlen mit 20000 Thread(s) ist korrekt.
		6. Berechnung: 4.821299 s. Die 6. Berechnung der Primzahlen mit 20000 Thread(s) ist korrekt.
		7. Berechnung: 4.837779 s. Die 7. Berechnung der Primzahlen mit 20000 Thread(s) ist korrekt.
		8. Berechnung: 4.823972 s. Die 8. Berechnung der Primzahlen mit 20000 Thread(s) ist korrekt.
		9. Berechnung: 4.822645 s. Die 9. Berechnung der Primzahlen mit 20000 Thread(s) ist korrekt.
		10. Berechnung: 4.863732 s. Die 10. Berechnung der Primzahlen mit 20000 Thread(s) ist korrekt.
		11. Berechnung: 4.815202 s. Die 11. Berechnung der Primzahlen mit 20000 Thread(s) ist korrekt.
		12. Berechnung: 4.741675 s. Die 12. Berechnung der Primzahlen mit 20000 Thread(s) ist korrekt.
		13. Berechnung: 4.823532 s. Die 13. Berechnung der Primzahlen mit 20000 Thread(s) ist korrekt.
		14. Berechnung: 4.895391 s. Die 14. Berechnung der Primzahlen mit 20000 Thread(s) ist korrekt.
		15. Berechnung: 4.780562 s. Die 15. Berechnung der Primzahlen mit 20000 Thread(s) ist korrekt.
		16. Berechnung: 4.822498 s. Die 16. Berechnung der Primzahlen mit 20000 Thread(s) ist korrekt.
		17. Berechnung: 4.815223 s. Die 17. Berechnung der Primzahlen mit 20000 Thread(s) ist korrekt.
		18. Berechnung: 4.781621 s. Die 18. Berechnung der Primzahlen mit 20000 Thread(s) ist korrekt.
		19. Berechnung: 4.831346 s. Die 19. Berechnung der Primzahlen mit 20000 Thread(s) ist korrekt.
		20. Berechnung: 4.824636 s. Die 20. Berechnung der Primzahlen mit 20000 Thread(s) ist korrekt.
		21. Berechnung: 4.844655 s. Die 21. Berechnung der Primzahlen mit 20000 Thread(s) ist korrekt.
		22. Berechnung: 4.849479 s. Die 22. Berechnung der Primzahlen mit 20000 Thread(s) ist korrekt.
		23. Berechnung: 4.893730 s. Die 23. Berechnung der Primzahlen mit 20000 Thread(s) ist korrekt.
		24. Berechnung: 4.813509 s. Die 24. Berechnung der Primzahlen mit 20000 Thread(s) ist korrekt.
		25. Berechnung: 4.819610 s. Die 25. Berechnung der Primzahlen mit 20000 Thread(s) ist korrekt.
		26. Berechnung: 4.869603 s. Die 26. Berechnung der Primzahlen mit 20000 Thread(s) ist korrekt.
		27. Berechnung: 4.883811 s. Die 27. Berechnung der Primzahlen mit 20000 Thread(s) ist korrekt.
		28. Berechnung: 4.768824 s. Die 28. Berechnung der Primzahlen mit 20000 Thread(s) ist korrekt.
		29. Berechnung: 4.837084 s. Die 29. Berechnung der Primzahlen mit 20000 Thread(s) ist korrekt.
		30. Berechnung: 4.806170 s. Die 30. Berechnung der Primzahlen mit 20000 Thread(s) ist korrekt.
		31. Berechnung: 4.778394 s. Die 31. Berechnung der Primzahlen mit 20000 Thread(s) ist korrekt.
		32. Berechnung: 4.829841 s. Die 32. Berechnung der Primzahlen mit 20000 Thread(s) ist korrekt.
		33. Berechnung: 4.855655 s. Die 33. Berechnung der Primzahlen mit 20000 Thread(s) ist korrekt.
		34. Berechnung: 4.802087 s. Die 34. Berechnung der Primzahlen mit 20000 Thread(s) ist korrekt.
		35. Berechnung: 4.882693 s. Die 35. Berechnung der Primzahlen mit 20000 Thread(s) ist korrekt.
		36. Berechnung: 4.805925 s. Die 36. Berechnung der Primzahlen mit 20000 Thread(s) ist korrekt.
		37. Berechnung: 4.803014 s. Die 37. Berechnung der Primzahlen mit 20000 Thread(s) ist korrekt.
		38. Berechnung: 4.876293 s. Die 38. Berechnung der Primzahlen mit 20000 Thread(s) ist korrekt.
		39. Berechnung: 4.821943 s. Die 39. Berechnung der Primzahlen mit 20000 Thread(s) ist korrekt.
		40. Berechnung: 4.807357 s. Die 40. Berechnung der Primzahlen mit 20000 Thread(s) ist korrekt.
		41. Berechnung: 4.837539 s. Die 41. Berechnung der Primzahlen mit 20000 Thread(s) ist korrekt.
		42. Berechnung: 4.843264 s. Die 42. Berechnung der Primzahlen mit 20000 Thread(s) ist korrekt.
		43. Berechnung: 4.815829 s. Die 43. Berechnung der Primzahlen mit 20000 Thread(s) ist korrekt.
		44. Berechnung: 4.884438 s. Die 44. Berechnung der Primzahlen mit 20000 Thread(s) ist korrekt.
		45. Berechnung: 4.831731 s. Die 45. Berechnung der Primzahlen mit 20000 Thread(s) ist korrekt.
		46. Berechnung: 4.813976 s. Die 46. Berechnung der Primzahlen mit 20000 Thread(s) ist korrekt.
		47. Berechnung: 4.854057 s. Die 47. Berechnung der Primzahlen mit 20000 Thread(s) ist korrekt.
		48. Berechnung: 4.828573 s. Die 48. Berechnung der Primzahlen mit 20000 Thread(s) ist korrekt.
		49. Berechnung: 4.805645 s. Die 49. Berechnung der Primzahlen mit 20000 Thread(s) ist korrekt.
		50. Berechnung: 4.811717 s. Die 50. Berechnung der Primzahlen mit 20000 Thread(s) ist korrekt.
		Durchschnittliche Ausfuehrungszeit des Programmes bei 50 Durchlaeufen mit 20000 Thread(s): 4.832546 s. Alle berechneten Primzahlen mit 20000 Thread(s) sind korrekt.
	Berechnung mittels 21000 Thread(s):
		1. Berechnung: 8.501959 s. Die 1. Berechnung der Primzahlen mit 21000 Thread(s) ist korrekt.
		2. Berechnung: 8.487411 s. Die 2. Berechnung der Primzahlen mit 21000 Thread(s) ist korrekt.
		3. Berechnung: 8.408225 s. Die 3. Berechnung der Primzahlen mit 21000 Thread(s) ist korrekt.
		4. Berechnung: 8.471616 s. Die 4. Berechnung der Primzahlen mit 21000 Thread(s) ist korrekt.
		5. Berechnung: 8.439325 s. Die 5. Berechnung der Primzahlen mit 21000 Thread(s) ist korrekt.
		6. Berechnung: 8.429854 s. Die 6. Berechnung der Primzahlen mit 21000 Thread(s) ist korrekt.
		7. Berechnung: 8.445345 s. Die 7. Berechnung der Primzahlen mit 21000 Thread(s) ist korrekt.
		8. Berechnung: 8.478172 s. Die 8. Berechnung der Primzahlen mit 21000 Thread(s) ist korrekt.
		9. Berechnung: 8.473134 s. Die 9. Berechnung der Primzahlen mit 21000 Thread(s) ist korrekt.
		10. Berechnung: 8.446928 s. Die 10. Berechnung der Primzahlen mit 21000 Thread(s) ist korrekt.
		11. Berechnung: 8.467094 s. Die 11. Berechnung der Primzahlen mit 21000 Thread(s) ist korrekt.
		12. Berechnung: 8.430578 s. Die 12. Berechnung der Primzahlen mit 21000 Thread(s) ist korrekt.
		13. Berechnung: 8.423924 s. Die 13. Berechnung der Primzahlen mit 21000 Thread(s) ist korrekt.
		14. Berechnung: 8.454885 s. Die 14. Berechnung der Primzahlen mit 21000 Thread(s) ist korrekt.
		15. Berechnung: 8.522978 s. Die 15. Berechnung der Primzahlen mit 21000 Thread(s) ist korrekt.
		16. Berechnung: 8.426736 s. Die 16. Berechnung der Primzahlen mit 21000 Thread(s) ist korrekt.
		17. Berechnung: 8.150611 s. Die 17. Berechnung der Primzahlen mit 21000 Thread(s) ist korrekt.
		18. Berechnung: 8.500173 s. Die 18. Berechnung der Primzahlen mit 21000 Thread(s) ist korrekt.
		19. Berechnung: 8.439111 s. Die 19. Berechnung der Primzahlen mit 21000 Thread(s) ist korrekt.
		20. Berechnung: 8.303921 s. Die 20. Berechnung der Primzahlen mit 21000 Thread(s) ist korrekt.
		21. Berechnung: 8.155008 s. Die 21. Berechnung der Primzahlen mit 21000 Thread(s) ist korrekt.
		22. Berechnung: 8.351699 s. Die 22. Berechnung der Primzahlen mit 21000 Thread(s) ist korrekt.
		23. Berechnung: 8.470111 s. Die 23. Berechnung der Primzahlen mit 21000 Thread(s) ist korrekt.
		24. Berechnung: 8.184614 s. Die 24. Berechnung der Primzahlen mit 21000 Thread(s) ist korrekt.
		25. Berechnung: 8.208140 s. Die 25. Berechnung der Primzahlen mit 21000 Thread(s) ist korrekt.
		26. Berechnung: 8.221814 s. Die 26. Berechnung der Primzahlen mit 21000 Thread(s) ist korrekt.
		27. Berechnung: 8.481470 s. Die 27. Berechnung der Primzahlen mit 21000 Thread(s) ist korrekt.
		28. Berechnung: 8.153424 s. Die 28. Berechnung der Primzahlen mit 21000 Thread(s) ist korrekt.
		29. Berechnung: 8.472691 s. Die 29. Berechnung der Primzahlen mit 21000 Thread(s) ist korrekt.
		30. Berechnung: 8.333720 s. Die 30. Berechnung der Primzahlen mit 21000 Thread(s) ist korrekt.
		31. Berechnung: 8.479183 s. Die 31. Berechnung der Primzahlen mit 21000 Thread(s) ist korrekt.
		32. Berechnung: 8.527442 s. Die 32. Berechnung der Primzahlen mit 21000 Thread(s) ist korrekt.
		33. Berechnung: 8.445215 s. Die 33. Berechnung der Primzahlen mit 21000 Thread(s) ist korrekt.
		34. Berechnung: 8.542258 s. Die 34. Berechnung der Primzahlen mit 21000 Thread(s) ist korrekt.
		35. Berechnung: 8.360850 s. Die 35. Berechnung der Primzahlen mit 21000 Thread(s) ist korrekt.
		36. Berechnung: 8.458553 s. Die 36. Berechnung der Primzahlen mit 21000 Thread(s) ist korrekt.
		37. Berechnung: 8.467409 s. Die 37. Berechnung der Primzahlen mit 21000 Thread(s) ist korrekt.
		38. Berechnung: 8.516700 s. Die 38. Berechnung der Primzahlen mit 21000 Thread(s) ist korrekt.
		39. Berechnung: 8.467480 s. Die 39. Berechnung der Primzahlen mit 21000 Thread(s) ist korrekt.
		40. Berechnung: 8.473025 s. Die 40. Berechnung der Primzahlen mit 21000 Thread(s) ist korrekt.
		41. Berechnung: 8.349727 s. Die 41. Berechnung der Primzahlen mit 21000 Thread(s) ist korrekt.
		42. Berechnung: 8.545336 s. Die 42. Berechnung der Primzahlen mit 21000 Thread(s) ist korrekt.
		43. Berechnung: 8.455022 s. Die 43. Berechnung der Primzahlen mit 21000 Thread(s) ist korrekt.
		44. Berechnung: 8.497219 s. Die 44. Berechnung der Primzahlen mit 21000 Thread(s) ist korrekt.
		45. Berechnung: 8.515125 s. Die 45. Berechnung der Primzahlen mit 21000 Thread(s) ist korrekt.
		46. Berechnung: 8.510963 s. Die 46. Berechnung der Primzahlen mit 21000 Thread(s) ist korrekt.
		47. Berechnung: 8.441694 s. Die 47. Berechnung der Primzahlen mit 21000 Thread(s) ist korrekt.
		48. Berechnung: 8.497630 s. Die 48. Berechnung der Primzahlen mit 21000 Thread(s) ist korrekt.
		49. Berechnung: 8.797423 s. Die 49. Berechnung der Primzahlen mit 21000 Thread(s) ist korrekt.
		50. Berechnung: 8.244030 s. Die 50. Berechnung der Primzahlen mit 21000 Thread(s) ist korrekt.
		Durchschnittliche Ausfuehrungszeit des Programmes bei 50 Durchlaeufen mit 21000 Thread(s): 8.426539 s. Alle berechneten Primzahlen mit 21000 Thread(s) sind korrekt.
	Berechnung mittels 22000 Thread(s):
		1. Berechnung: 7.723757 s. Die 1. Berechnung der Primzahlen mit 22000 Thread(s) ist korrekt.
		2. Berechnung: 7.751664 s. Die 2. Berechnung der Primzahlen mit 22000 Thread(s) ist korrekt.
		3. Berechnung: 7.500745 s. Die 3. Berechnung der Primzahlen mit 22000 Thread(s) ist korrekt.
		4. Berechnung: 7.660524 s. Die 4. Berechnung der Primzahlen mit 22000 Thread(s) ist korrekt.
		5. Berechnung: 7.724694 s. Die 5. Berechnung der Primzahlen mit 22000 Thread(s) ist korrekt.
		6. Berechnung: 7.759123 s. Die 6. Berechnung der Primzahlen mit 22000 Thread(s) ist korrekt.
		7. Berechnung: 7.718063 s. Die 7. Berechnung der Primzahlen mit 22000 Thread(s) ist korrekt.
		8. Berechnung: 7.689711 s. Die 8. Berechnung der Primzahlen mit 22000 Thread(s) ist korrekt.
		9. Berechnung: 7.715491 s. Die 9. Berechnung der Primzahlen mit 22000 Thread(s) ist korrekt.
		10. Berechnung: 7.717405 s. Die 10. Berechnung der Primzahlen mit 22000 Thread(s) ist korrekt.
		11. Berechnung: 7.500199 s. Die 11. Berechnung der Primzahlen mit 22000 Thread(s) ist korrekt.
		12. Berechnung: 7.727656 s. Die 12. Berechnung der Primzahlen mit 22000 Thread(s) ist korrekt.
		13. Berechnung: 7.647153 s. Die 13. Berechnung der Primzahlen mit 22000 Thread(s) ist korrekt.
		14. Berechnung: 7.771423 s. Die 14. Berechnung der Primzahlen mit 22000 Thread(s) ist korrekt.
		15. Berechnung: 7.458538 s. Die 15. Berechnung der Primzahlen mit 22000 Thread(s) ist korrekt.
		16. Berechnung: 7.737929 s. Die 16. Berechnung der Primzahlen mit 22000 Thread(s) ist korrekt.
		17. Berechnung: 7.755837 s. Die 17. Berechnung der Primzahlen mit 22000 Thread(s) ist korrekt.
		18. Berechnung: 7.739099 s. Die 18. Berechnung der Primzahlen mit 22000 Thread(s) ist korrekt.
		19. Berechnung: 7.711011 s. Die 19. Berechnung der Primzahlen mit 22000 Thread(s) ist korrekt.
		20. Berechnung: 7.784510 s. Die 20. Berechnung der Primzahlen mit 22000 Thread(s) ist korrekt.
		21. Berechnung: 7.520894 s. Die 21. Berechnung der Primzahlen mit 22000 Thread(s) ist korrekt.
		22. Berechnung: 7.830628 s. Die 22. Berechnung der Primzahlen mit 22000 Thread(s) ist korrekt.
		23. Berechnung: 7.474334 s. Die 23. Berechnung der Primzahlen mit 22000 Thread(s) ist korrekt.
		24. Berechnung: 7.763590 s. Die 24. Berechnung der Primzahlen mit 22000 Thread(s) ist korrekt.
		25. Berechnung: 7.498756 s. Die 25. Berechnung der Primzahlen mit 22000 Thread(s) ist korrekt.
		26. Berechnung: 7.715051 s. Die 26. Berechnung der Primzahlen mit 22000 Thread(s) ist korrekt.
		27. Berechnung: 7.436278 s. Die 27. Berechnung der Primzahlen mit 22000 Thread(s) ist korrekt.
		28. Berechnung: 7.704548 s. Die 28. Berechnung der Primzahlen mit 22000 Thread(s) ist korrekt.
		29. Berechnung: 8.730817 s. Die 29. Berechnung der Primzahlen mit 22000 Thread(s) ist korrekt.
		30. Berechnung: 8.911192 s. Die 30. Berechnung der Primzahlen mit 22000 Thread(s) ist korrekt.
		31. Berechnung: 7.636338 s. Die 31. Berechnung der Primzahlen mit 22000 Thread(s) ist korrekt.
		32. Berechnung: 7.770371 s. Die 32. Berechnung der Primzahlen mit 22000 Thread(s) ist korrekt.
		33. Berechnung: 7.777496 s. Die 33. Berechnung der Primzahlen mit 22000 Thread(s) ist korrekt.
		34. Berechnung: 7.548682 s. Die 34. Berechnung der Primzahlen mit 22000 Thread(s) ist korrekt.
		35. Berechnung: 7.750953 s. Die 35. Berechnung der Primzahlen mit 22000 Thread(s) ist korrekt.
		36. Berechnung: 7.779684 s. Die 36. Berechnung der Primzahlen mit 22000 Thread(s) ist korrekt.
		37. Berechnung: 7.499481 s. Die 37. Berechnung der Primzahlen mit 22000 Thread(s) ist korrekt.
		38. Berechnung: 7.775912 s. Die 38. Berechnung der Primzahlen mit 22000 Thread(s) ist korrekt.
		39. Berechnung: 7.800735 s. Die 39. Berechnung der Primzahlen mit 22000 Thread(s) ist korrekt.
		40. Berechnung: 7.823640 s. Die 40. Berechnung der Primzahlen mit 22000 Thread(s) ist korrekt.
		41. Berechnung: 7.689722 s. Die 41. Berechnung der Primzahlen mit 22000 Thread(s) ist korrekt.
		42. Berechnung: 7.707598 s. Die 42. Berechnung der Primzahlen mit 22000 Thread(s) ist korrekt.
		43. Berechnung: 7.747958 s. Die 43. Berechnung der Primzahlen mit 22000 Thread(s) ist korrekt.
		44. Berechnung: 7.748868 s. Die 44. Berechnung der Primzahlen mit 22000 Thread(s) ist korrekt.
		45. Berechnung: 7.549144 s. Die 45. Berechnung der Primzahlen mit 22000 Thread(s) ist korrekt.
		46. Berechnung: 7.906935 s. Die 46. Berechnung der Primzahlen mit 22000 Thread(s) ist korrekt.
		47. Berechnung: 7.774111 s. Die 47. Berechnung der Primzahlen mit 22000 Thread(s) ist korrekt.
		48. Berechnung: 7.750693 s. Die 48. Berechnung der Primzahlen mit 22000 Thread(s) ist korrekt.
		49. Berechnung: 7.471402 s. Die 49. Berechnung der Primzahlen mit 22000 Thread(s) ist korrekt.
		50. Berechnung: 7.773474 s. Die 50. Berechnung der Primzahlen mit 22000 Thread(s) ist korrekt.
		Durchschnittliche Ausfuehrungszeit des Programmes bei 50 Durchlaeufen mit 22000 Thread(s): 7.733276 s. Alle berechneten Primzahlen mit 22000 Thread(s) sind korrekt.
	Berechnung mittels 23000 Thread(s):
		1. Berechnung: 6.796288 s. Die 1. Berechnung der Primzahlen mit 23000 Thread(s) ist korrekt.
		2. Berechnung: 6.959364 s. Die 2. Berechnung der Primzahlen mit 23000 Thread(s) ist korrekt.
		3. Berechnung: 6.972459 s. Die 3. Berechnung der Primzahlen mit 23000 Thread(s) ist korrekt.
		4. Berechnung: 6.946860 s. Die 4. Berechnung der Primzahlen mit 23000 Thread(s) ist korrekt.
		5. Berechnung: 6.967234 s. Die 5. Berechnung der Primzahlen mit 23000 Thread(s) ist korrekt.
		6. Berechnung: 6.951914 s. Die 6. Berechnung der Primzahlen mit 23000 Thread(s) ist korrekt.
		7. Berechnung: 6.923990 s. Die 7. Berechnung der Primzahlen mit 23000 Thread(s) ist korrekt.
		8. Berechnung: 6.917040 s. Die 8. Berechnung der Primzahlen mit 23000 Thread(s) ist korrekt.
		9. Berechnung: 6.758591 s. Die 9. Berechnung der Primzahlen mit 23000 Thread(s) ist korrekt.
		10. Berechnung: 6.767532 s. Die 10. Berechnung der Primzahlen mit 23000 Thread(s) ist korrekt.
		11. Berechnung: 6.906928 s. Die 11. Berechnung der Primzahlen mit 23000 Thread(s) ist korrekt.
		12. Berechnung: 6.833247 s. Die 12. Berechnung der Primzahlen mit 23000 Thread(s) ist korrekt.
		13. Berechnung: 6.946277 s. Die 13. Berechnung der Primzahlen mit 23000 Thread(s) ist korrekt.
		14. Berechnung: 6.876332 s. Die 14. Berechnung der Primzahlen mit 23000 Thread(s) ist korrekt.
		15. Berechnung: 6.971591 s. Die 15. Berechnung der Primzahlen mit 23000 Thread(s) ist korrekt.
		16. Berechnung: 6.896444 s. Die 16. Berechnung der Primzahlen mit 23000 Thread(s) ist korrekt.
		17. Berechnung: 6.974764 s. Die 17. Berechnung der Primzahlen mit 23000 Thread(s) ist korrekt.
		18. Berechnung: 6.933665 s. Die 18. Berechnung der Primzahlen mit 23000 Thread(s) ist korrekt.
		19. Berechnung: 6.945952 s. Die 19. Berechnung der Primzahlen mit 23000 Thread(s) ist korrekt.
		20. Berechnung: 6.982474 s. Die 20. Berechnung der Primzahlen mit 23000 Thread(s) ist korrekt.
		21. Berechnung: 6.950191 s. Die 21. Berechnung der Primzahlen mit 23000 Thread(s) ist korrekt.
		22. Berechnung: 6.827780 s. Die 22. Berechnung der Primzahlen mit 23000 Thread(s) ist korrekt.
		23. Berechnung: 6.938958 s. Die 23. Berechnung der Primzahlen mit 23000 Thread(s) ist korrekt.
		24. Berechnung: 6.775707 s. Die 24. Berechnung der Primzahlen mit 23000 Thread(s) ist korrekt.
		25. Berechnung: 7.036165 s. Die 25. Berechnung der Primzahlen mit 23000 Thread(s) ist korrekt.
		26. Berechnung: 6.924314 s. Die 26. Berechnung der Primzahlen mit 23000 Thread(s) ist korrekt.
		27. Berechnung: 6.967508 s. Die 27. Berechnung der Primzahlen mit 23000 Thread(s) ist korrekt.
		28. Berechnung: 6.831913 s. Die 28. Berechnung der Primzahlen mit 23000 Thread(s) ist korrekt.
		29. Berechnung: 6.966947 s. Die 29. Berechnung der Primzahlen mit 23000 Thread(s) ist korrekt.
		30. Berechnung: 7.010276 s. Die 30. Berechnung der Primzahlen mit 23000 Thread(s) ist korrekt.
		31. Berechnung: 6.954363 s. Die 31. Berechnung der Primzahlen mit 23000 Thread(s) ist korrekt.
		32. Berechnung: 6.785881 s. Die 32. Berechnung der Primzahlen mit 23000 Thread(s) ist korrekt.
		33. Berechnung: 6.971800 s. Die 33. Berechnung der Primzahlen mit 23000 Thread(s) ist korrekt.
		34. Berechnung: 6.909465 s. Die 34. Berechnung der Primzahlen mit 23000 Thread(s) ist korrekt.
		35. Berechnung: 6.889278 s. Die 35. Berechnung der Primzahlen mit 23000 Thread(s) ist korrekt.
		36. Berechnung: 6.903809 s. Die 36. Berechnung der Primzahlen mit 23000 Thread(s) ist korrekt.
		37. Berechnung: 6.937897 s. Die 37. Berechnung der Primzahlen mit 23000 Thread(s) ist korrekt.
		38. Berechnung: 6.938426 s. Die 38. Berechnung der Primzahlen mit 23000 Thread(s) ist korrekt.
		39. Berechnung: 6.787728 s. Die 39. Berechnung der Primzahlen mit 23000 Thread(s) ist korrekt.
		40. Berechnung: 6.870182 s. Die 40. Berechnung der Primzahlen mit 23000 Thread(s) ist korrekt.
		41. Berechnung: 6.996465 s. Die 41. Berechnung der Primzahlen mit 23000 Thread(s) ist korrekt.
		42. Berechnung: 6.997925 s. Die 42. Berechnung der Primzahlen mit 23000 Thread(s) ist korrekt.
		43. Berechnung: 6.898585 s. Die 43. Berechnung der Primzahlen mit 23000 Thread(s) ist korrekt.
		44. Berechnung: 6.865361 s. Die 44. Berechnung der Primzahlen mit 23000 Thread(s) ist korrekt.
		45. Berechnung: 6.908990 s. Die 45. Berechnung der Primzahlen mit 23000 Thread(s) ist korrekt.
		46. Berechnung: 6.940834 s. Die 46. Berechnung der Primzahlen mit 23000 Thread(s) ist korrekt.
		47. Berechnung: 6.794410 s. Die 47. Berechnung der Primzahlen mit 23000 Thread(s) ist korrekt.
		48. Berechnung: 6.926093 s. Die 48. Berechnung der Primzahlen mit 23000 Thread(s) ist korrekt.
		49. Berechnung: 6.751863 s. Die 49. Berechnung der Primzahlen mit 23000 Thread(s) ist korrekt.
		50. Berechnung: 6.942093 s. Die 50. Berechnung der Primzahlen mit 23000 Thread(s) ist korrekt.
		Durchschnittliche Ausfuehrungszeit des Programmes bei 50 Durchlaeufen mit 23000 Thread(s): 6.908603 s. Alle berechneten Primzahlen mit 23000 Thread(s) sind korrekt.
	Berechnung mittels 24000 Thread(s):
		1. Berechnung: 6.087405 s. Die 1. Berechnung der Primzahlen mit 24000 Thread(s) ist korrekt.
		2. Berechnung: 6.126997 s. Die 2. Berechnung der Primzahlen mit 24000 Thread(s) ist korrekt.
		3. Berechnung: 6.117994 s. Die 3. Berechnung der Primzahlen mit 24000 Thread(s) ist korrekt.
		4. Berechnung: 6.114846 s. Die 4. Berechnung der Primzahlen mit 24000 Thread(s) ist korrekt.
		5. Berechnung: 6.064931 s. Die 5. Berechnung der Primzahlen mit 24000 Thread(s) ist korrekt.
		6. Berechnung: 6.120914 s. Die 6. Berechnung der Primzahlen mit 24000 Thread(s) ist korrekt.
		7. Berechnung: 6.026325 s. Die 7. Berechnung der Primzahlen mit 24000 Thread(s) ist korrekt.
		8. Berechnung: 6.113494 s. Die 8. Berechnung der Primzahlen mit 24000 Thread(s) ist korrekt.
		9. Berechnung: 6.009605 s. Die 9. Berechnung der Primzahlen mit 24000 Thread(s) ist korrekt.
		10. Berechnung: 6.096220 s. Die 10. Berechnung der Primzahlen mit 24000 Thread(s) ist korrekt.
		11. Berechnung: 6.107089 s. Die 11. Berechnung der Primzahlen mit 24000 Thread(s) ist korrekt.
		12. Berechnung: 6.058337 s. Die 12. Berechnung der Primzahlen mit 24000 Thread(s) ist korrekt.
		13. Berechnung: 6.183085 s. Die 13. Berechnung der Primzahlen mit 24000 Thread(s) ist korrekt.
		14. Berechnung: 6.161982 s. Die 14. Berechnung der Primzahlen mit 24000 Thread(s) ist korrekt.
		15. Berechnung: 6.112169 s. Die 15. Berechnung der Primzahlen mit 24000 Thread(s) ist korrekt.
		16. Berechnung: 6.127506 s. Die 16. Berechnung der Primzahlen mit 24000 Thread(s) ist korrekt.
		17. Berechnung: 6.143229 s. Die 17. Berechnung der Primzahlen mit 24000 Thread(s) ist korrekt.
		18. Berechnung: 6.048403 s. Die 18. Berechnung der Primzahlen mit 24000 Thread(s) ist korrekt.
		19. Berechnung: 6.042363 s. Die 19. Berechnung der Primzahlen mit 24000 Thread(s) ist korrekt.
		20. Berechnung: 6.113602 s. Die 20. Berechnung der Primzahlen mit 24000 Thread(s) ist korrekt.
		21. Berechnung: 6.142406 s. Die 21. Berechnung der Primzahlen mit 24000 Thread(s) ist korrekt.
		22. Berechnung: 6.078765 s. Die 22. Berechnung der Primzahlen mit 24000 Thread(s) ist korrekt.
		23. Berechnung: 6.137252 s. Die 23. Berechnung der Primzahlen mit 24000 Thread(s) ist korrekt.
		24. Berechnung: 6.168358 s. Die 24. Berechnung der Primzahlen mit 24000 Thread(s) ist korrekt.
		25. Berechnung: 6.105205 s. Die 25. Berechnung der Primzahlen mit 24000 Thread(s) ist korrekt.
		26. Berechnung: 6.135355 s. Die 26. Berechnung der Primzahlen mit 24000 Thread(s) ist korrekt.
		27. Berechnung: 6.073985 s. Die 27. Berechnung der Primzahlen mit 24000 Thread(s) ist korrekt.
		28. Berechnung: 6.174133 s. Die 28. Berechnung der Primzahlen mit 24000 Thread(s) ist korrekt.
		29. Berechnung: 6.118342 s. Die 29. Berechnung der Primzahlen mit 24000 Thread(s) ist korrekt.
		30. Berechnung: 6.102620 s. Die 30. Berechnung der Primzahlen mit 24000 Thread(s) ist korrekt.
		31. Berechnung: 6.131066 s. Die 31. Berechnung der Primzahlen mit 24000 Thread(s) ist korrekt.
		32. Berechnung: 6.084258 s. Die 32. Berechnung der Primzahlen mit 24000 Thread(s) ist korrekt.
		33. Berechnung: 6.091935 s. Die 33. Berechnung der Primzahlen mit 24000 Thread(s) ist korrekt.
		34. Berechnung: 6.128055 s. Die 34. Berechnung der Primzahlen mit 24000 Thread(s) ist korrekt.
		35. Berechnung: 6.091941 s. Die 35. Berechnung der Primzahlen mit 24000 Thread(s) ist korrekt.
		36. Berechnung: 6.053666 s. Die 36. Berechnung der Primzahlen mit 24000 Thread(s) ist korrekt.
		37. Berechnung: 6.130036 s. Die 37. Berechnung der Primzahlen mit 24000 Thread(s) ist korrekt.
		38. Berechnung: 6.132124 s. Die 38. Berechnung der Primzahlen mit 24000 Thread(s) ist korrekt.
		39. Berechnung: 6.143757 s. Die 39. Berechnung der Primzahlen mit 24000 Thread(s) ist korrekt.
		40. Berechnung: 6.170077 s. Die 40. Berechnung der Primzahlen mit 24000 Thread(s) ist korrekt.
		41. Berechnung: 6.170634 s. Die 41. Berechnung der Primzahlen mit 24000 Thread(s) ist korrekt.
		42. Berechnung: 6.106252 s. Die 42. Berechnung der Primzahlen mit 24000 Thread(s) ist korrekt.
		43. Berechnung: 6.064781 s. Die 43. Berechnung der Primzahlen mit 24000 Thread(s) ist korrekt.
		44. Berechnung: 5.974109 s. Die 44. Berechnung der Primzahlen mit 24000 Thread(s) ist korrekt.
		45. Berechnung: 6.034368 s. Die 45. Berechnung der Primzahlen mit 24000 Thread(s) ist korrekt.
		46. Berechnung: 6.093731 s. Die 46. Berechnung der Primzahlen mit 24000 Thread(s) ist korrekt.
		47. Berechnung: 6.019595 s. Die 47. Berechnung der Primzahlen mit 24000 Thread(s) ist korrekt.
		48. Berechnung: 6.044459 s. Die 48. Berechnung der Primzahlen mit 24000 Thread(s) ist korrekt.
		49. Berechnung: 6.032572 s. Die 49. Berechnung der Primzahlen mit 24000 Thread(s) ist korrekt.
		50. Berechnung: 6.158664 s. Die 50. Berechnung der Primzahlen mit 24000 Thread(s) ist korrekt.
		Durchschnittliche Ausfuehrungszeit des Programmes bei 50 Durchlaeufen mit 24000 Thread(s): 6.101380 s. Alle berechneten Primzahlen mit 24000 Thread(s) sind korrekt.
	Berechnung mittels 25000 Thread(s):
		1. Berechnung: 5.045463 s. Die 1. Berechnung der Primzahlen mit 25000 Thread(s) ist korrekt.
		2. Berechnung: 5.113108 s. Die 2. Berechnung der Primzahlen mit 25000 Thread(s) ist korrekt.
		3. Berechnung: 5.042135 s. Die 3. Berechnung der Primzahlen mit 25000 Thread(s) ist korrekt.
		4. Berechnung: 4.991031 s. Die 4. Berechnung der Primzahlen mit 25000 Thread(s) ist korrekt.
		5. Berechnung: 5.065527 s. Die 5. Berechnung der Primzahlen mit 25000 Thread(s) ist korrekt.
		6. Berechnung: 5.043549 s. Die 6. Berechnung der Primzahlen mit 25000 Thread(s) ist korrekt.
		7. Berechnung: 5.114276 s. Die 7. Berechnung der Primzahlen mit 25000 Thread(s) ist korrekt.
		8. Berechnung: 5.271283 s. Die 8. Berechnung der Primzahlen mit 25000 Thread(s) ist korrekt.
		9. Berechnung: 5.043765 s. Die 9. Berechnung der Primzahlen mit 25000 Thread(s) ist korrekt.
		10. Berechnung: 5.029647 s. Die 10. Berechnung der Primzahlen mit 25000 Thread(s) ist korrekt.
		11. Berechnung: 5.042820 s. Die 11. Berechnung der Primzahlen mit 25000 Thread(s) ist korrekt.
		12. Berechnung: 5.091231 s. Die 12. Berechnung der Primzahlen mit 25000 Thread(s) ist korrekt.
		13. Berechnung: 5.078247 s. Die 13. Berechnung der Primzahlen mit 25000 Thread(s) ist korrekt.
		14. Berechnung: 5.085401 s. Die 14. Berechnung der Primzahlen mit 25000 Thread(s) ist korrekt.
		15. Berechnung: 5.068162 s. Die 15. Berechnung der Primzahlen mit 25000 Thread(s) ist korrekt.
		16. Berechnung: 5.074172 s. Die 16. Berechnung der Primzahlen mit 25000 Thread(s) ist korrekt.
		17. Berechnung: 5.088611 s. Die 17. Berechnung der Primzahlen mit 25000 Thread(s) ist korrekt.
		18. Berechnung: 5.041394 s. Die 18. Berechnung der Primzahlen mit 25000 Thread(s) ist korrekt.
		19. Berechnung: 5.025829 s. Die 19. Berechnung der Primzahlen mit 25000 Thread(s) ist korrekt.
		20. Berechnung: 5.044393 s. Die 20. Berechnung der Primzahlen mit 25000 Thread(s) ist korrekt.
		21. Berechnung: 5.030280 s. Die 21. Berechnung der Primzahlen mit 25000 Thread(s) ist korrekt.
		22. Berechnung: 5.076437 s. Die 22. Berechnung der Primzahlen mit 25000 Thread(s) ist korrekt.
		23. Berechnung: 5.073877 s. Die 23. Berechnung der Primzahlen mit 25000 Thread(s) ist korrekt.
		24. Berechnung: 5.140994 s. Die 24. Berechnung der Primzahlen mit 25000 Thread(s) ist korrekt.
		25. Berechnung: 4.980016 s. Die 25. Berechnung der Primzahlen mit 25000 Thread(s) ist korrekt.
		26. Berechnung: 5.033565 s. Die 26. Berechnung der Primzahlen mit 25000 Thread(s) ist korrekt.
		27. Berechnung: 5.061105 s. Die 27. Berechnung der Primzahlen mit 25000 Thread(s) ist korrekt.
		28. Berechnung: 5.055403 s. Die 28. Berechnung der Primzahlen mit 25000 Thread(s) ist korrekt.
		29. Berechnung: 5.037233 s. Die 29. Berechnung der Primzahlen mit 25000 Thread(s) ist korrekt.
		30. Berechnung: 5.078938 s. Die 30. Berechnung der Primzahlen mit 25000 Thread(s) ist korrekt.
		31. Berechnung: 4.985972 s. Die 31. Berechnung der Primzahlen mit 25000 Thread(s) ist korrekt.
		32. Berechnung: 5.132967 s. Die 32. Berechnung der Primzahlen mit 25000 Thread(s) ist korrekt.
		33. Berechnung: 5.042388 s. Die 33. Berechnung der Primzahlen mit 25000 Thread(s) ist korrekt.
		34. Berechnung: 5.015225 s. Die 34. Berechnung der Primzahlen mit 25000 Thread(s) ist korrekt.
		35. Berechnung: 5.051758 s. Die 35. Berechnung der Primzahlen mit 25000 Thread(s) ist korrekt.
		36. Berechnung: 5.065823 s. Die 36. Berechnung der Primzahlen mit 25000 Thread(s) ist korrekt.
		37. Berechnung: 5.066651 s. Die 37. Berechnung der Primzahlen mit 25000 Thread(s) ist korrekt.
		38. Berechnung: 5.046517 s. Die 38. Berechnung der Primzahlen mit 25000 Thread(s) ist korrekt.
		39. Berechnung: 5.102507 s. Die 39. Berechnung der Primzahlen mit 25000 Thread(s) ist korrekt.
		40. Berechnung: 5.038502 s. Die 40. Berechnung der Primzahlen mit 25000 Thread(s) ist korrekt.
		41. Berechnung: 5.037722 s. Die 41. Berechnung der Primzahlen mit 25000 Thread(s) ist korrekt.
		42. Berechnung: 5.022751 s. Die 42. Berechnung der Primzahlen mit 25000 Thread(s) ist korrekt.
		43. Berechnung: 5.019692 s. Die 43. Berechnung der Primzahlen mit 25000 Thread(s) ist korrekt.
		44. Berechnung: 5.017059 s. Die 44. Berechnung der Primzahlen mit 25000 Thread(s) ist korrekt.
		45. Berechnung: 5.035478 s. Die 45. Berechnung der Primzahlen mit 25000 Thread(s) ist korrekt.
		46. Berechnung: 5.062552 s. Die 46. Berechnung der Primzahlen mit 25000 Thread(s) ist korrekt.
		47. Berechnung: 5.038512 s. Die 47. Berechnung der Primzahlen mit 25000 Thread(s) ist korrekt.
		48. Berechnung: 5.043667 s. Die 48. Berechnung der Primzahlen mit 25000 Thread(s) ist korrekt.
		49. Berechnung: 5.093901 s. Die 49. Berechnung der Primzahlen mit 25000 Thread(s) ist korrekt.
		50. Berechnung: 5.057823 s. Die 50. Berechnung der Primzahlen mit 25000 Thread(s) ist korrekt.
		Durchschnittliche Ausfuehrungszeit des Programmes bei 50 Durchlaeufen mit 25000 Thread(s): 5.058907 s. Alle berechneten Primzahlen mit 25000 Thread(s) sind korrekt.
	Berechnung mittels 26000 Thread(s):
		1. Berechnung: 9.860389 s. Die 1. Berechnung der Primzahlen mit 26000 Thread(s) ist korrekt.
		2. Berechnung: 9.554278 s. Die 2. Berechnung der Primzahlen mit 26000 Thread(s) ist korrekt.
		3. Berechnung: 9.715612 s. Die 3. Berechnung der Primzahlen mit 26000 Thread(s) ist korrekt.
		4. Berechnung: 9.956142 s. Die 4. Berechnung der Primzahlen mit 26000 Thread(s) ist korrekt.
		5. Berechnung: 9.735099 s. Die 5. Berechnung der Primzahlen mit 26000 Thread(s) ist korrekt.
		6. Berechnung: 9.711616 s. Die 6. Berechnung der Primzahlen mit 26000 Thread(s) ist korrekt.
		7. Berechnung: 9.895008 s. Die 7. Berechnung der Primzahlen mit 26000 Thread(s) ist korrekt.
		8. Berechnung: 9.904852 s. Die 8. Berechnung der Primzahlen mit 26000 Thread(s) ist korrekt.
		9. Berechnung: 9.770986 s. Die 9. Berechnung der Primzahlen mit 26000 Thread(s) ist korrekt.
		10. Berechnung: 9.915535 s. Die 10. Berechnung der Primzahlen mit 26000 Thread(s) ist korrekt.
		11. Berechnung: 9.762402 s. Die 11. Berechnung der Primzahlen mit 26000 Thread(s) ist korrekt.
		12. Berechnung: 9.699016 s. Die 12. Berechnung der Primzahlen mit 26000 Thread(s) ist korrekt.
		13. Berechnung: 10.561891 s. Die 13. Berechnung der Primzahlen mit 26000 Thread(s) ist korrekt.
		14. Berechnung: 10.728447 s. Die 14. Berechnung der Primzahlen mit 26000 Thread(s) ist korrekt.
		15. Berechnung: 9.903193 s. Die 15. Berechnung der Primzahlen mit 26000 Thread(s) ist korrekt.
		16. Berechnung: 9.790649 s. Die 16. Berechnung der Primzahlen mit 26000 Thread(s) ist korrekt.
		17. Berechnung: 9.893545 s. Die 17. Berechnung der Primzahlen mit 26000 Thread(s) ist korrekt.
		18. Berechnung: 9.893487 s. Die 18. Berechnung der Primzahlen mit 26000 Thread(s) ist korrekt.
		19. Berechnung: 9.446898 s. Die 19. Berechnung der Primzahlen mit 26000 Thread(s) ist korrekt.
		20. Berechnung: 9.888670 s. Die 20. Berechnung der Primzahlen mit 26000 Thread(s) ist korrekt.
		21. Berechnung: 9.877514 s. Die 21. Berechnung der Primzahlen mit 26000 Thread(s) ist korrekt.
		22. Berechnung: 9.557108 s. Die 22. Berechnung der Primzahlen mit 26000 Thread(s) ist korrekt.
		23. Berechnung: 9.854879 s. Die 23. Berechnung der Primzahlen mit 26000 Thread(s) ist korrekt.
		24. Berechnung: 9.912457 s. Die 24. Berechnung der Primzahlen mit 26000 Thread(s) ist korrekt.
		25. Berechnung: 9.863758 s. Die 25. Berechnung der Primzahlen mit 26000 Thread(s) ist korrekt.
		26. Berechnung: 9.855063 s. Die 26. Berechnung der Primzahlen mit 26000 Thread(s) ist korrekt.
		27. Berechnung: 9.649837 s. Die 27. Berechnung der Primzahlen mit 26000 Thread(s) ist korrekt.
		28. Berechnung: 9.800667 s. Die 28. Berechnung der Primzahlen mit 26000 Thread(s) ist korrekt.
		29. Berechnung: 9.846260 s. Die 29. Berechnung der Primzahlen mit 26000 Thread(s) ist korrekt.
		30. Berechnung: 9.694709 s. Die 30. Berechnung der Primzahlen mit 26000 Thread(s) ist korrekt.
		31. Berechnung: 9.773604 s. Die 31. Berechnung der Primzahlen mit 26000 Thread(s) ist korrekt.
		32. Berechnung: 9.623804 s. Die 32. Berechnung der Primzahlen mit 26000 Thread(s) ist korrekt.
		33. Berechnung: 9.841835 s. Die 33. Berechnung der Primzahlen mit 26000 Thread(s) ist korrekt.
		34. Berechnung: 9.890263 s. Die 34. Berechnung der Primzahlen mit 26000 Thread(s) ist korrekt.
		35. Berechnung: 9.585444 s. Die 35. Berechnung der Primzahlen mit 26000 Thread(s) ist korrekt.
		36. Berechnung: 9.880416 s. Die 36. Berechnung der Primzahlen mit 26000 Thread(s) ist korrekt.
		37. Berechnung: 9.777749 s. Die 37. Berechnung der Primzahlen mit 26000 Thread(s) ist korrekt.
		38. Berechnung: 9.578099 s. Die 38. Berechnung der Primzahlen mit 26000 Thread(s) ist korrekt.
		39. Berechnung: 9.825444 s. Die 39. Berechnung der Primzahlen mit 26000 Thread(s) ist korrekt.
		40. Berechnung: 9.557904 s. Die 40. Berechnung der Primzahlen mit 26000 Thread(s) ist korrekt.
		41. Berechnung: 9.854248 s. Die 41. Berechnung der Primzahlen mit 26000 Thread(s) ist korrekt.
		42. Berechnung: 9.916752 s. Die 42. Berechnung der Primzahlen mit 26000 Thread(s) ist korrekt.
		43. Berechnung: 9.845818 s. Die 43. Berechnung der Primzahlen mit 26000 Thread(s) ist korrekt.
		44. Berechnung: 9.809617 s. Die 44. Berechnung der Primzahlen mit 26000 Thread(s) ist korrekt.
		45. Berechnung: 9.774623 s. Die 45. Berechnung der Primzahlen mit 26000 Thread(s) ist korrekt.
		46. Berechnung: 9.861466 s. Die 46. Berechnung der Primzahlen mit 26000 Thread(s) ist korrekt.
		47. Berechnung: 9.612597 s. Die 47. Berechnung der Primzahlen mit 26000 Thread(s) ist korrekt.
		48. Berechnung: 9.987626 s. Die 48. Berechnung der Primzahlen mit 26000 Thread(s) ist korrekt.
		49. Berechnung: 9.863697 s. Die 49. Berechnung der Primzahlen mit 26000 Thread(s) ist korrekt.
		50. Berechnung: 9.442743 s. Die 50. Berechnung der Primzahlen mit 26000 Thread(s) ist korrekt.
		Durchschnittliche Ausfuehrungszeit des Programmes bei 50 Durchlaeufen mit 26000 Thread(s): 9.816074 s. Alle berechneten Primzahlen mit 26000 Thread(s) sind korrekt.
	Berechnung mittels 27000 Thread(s):
		1. Berechnung: 9.306338 s. Die 1. Berechnung der Primzahlen mit 27000 Thread(s) ist korrekt.
		2. Berechnung: 9.330005 s. Die 2. Berechnung der Primzahlen mit 27000 Thread(s) ist korrekt.
		3. Berechnung: 9.369423 s. Die 3. Berechnung der Primzahlen mit 27000 Thread(s) ist korrekt.
		4. Berechnung: 9.377555 s. Die 4. Berechnung der Primzahlen mit 27000 Thread(s) ist korrekt.
		5. Berechnung: 9.274066 s. Die 5. Berechnung der Primzahlen mit 27000 Thread(s) ist korrekt.
		6. Berechnung: 9.313609 s. Die 6. Berechnung der Primzahlen mit 27000 Thread(s) ist korrekt.
		7. Berechnung: 9.392246 s. Die 7. Berechnung der Primzahlen mit 27000 Thread(s) ist korrekt.
		8. Berechnung: 9.487892 s. Die 8. Berechnung der Primzahlen mit 27000 Thread(s) ist korrekt.
		9. Berechnung: 9.269180 s. Die 9. Berechnung der Primzahlen mit 27000 Thread(s) ist korrekt.
		10. Berechnung: 9.056162 s. Die 10. Berechnung der Primzahlen mit 27000 Thread(s) ist korrekt.
		11. Berechnung: 9.262922 s. Die 11. Berechnung der Primzahlen mit 27000 Thread(s) ist korrekt.
		12. Berechnung: 9.408374 s. Die 12. Berechnung der Primzahlen mit 27000 Thread(s) ist korrekt.
		13. Berechnung: 9.166165 s. Die 13. Berechnung der Primzahlen mit 27000 Thread(s) ist korrekt.
		14. Berechnung: 9.371319 s. Die 14. Berechnung der Primzahlen mit 27000 Thread(s) ist korrekt.
		15. Berechnung: 9.264250 s. Die 15. Berechnung der Primzahlen mit 27000 Thread(s) ist korrekt.
		16. Berechnung: 9.342707 s. Die 16. Berechnung der Primzahlen mit 27000 Thread(s) ist korrekt.
		17. Berechnung: 9.339743 s. Die 17. Berechnung der Primzahlen mit 27000 Thread(s) ist korrekt.
		18. Berechnung: 9.411808 s. Die 18. Berechnung der Primzahlen mit 27000 Thread(s) ist korrekt.
		19. Berechnung: 9.355311 s. Die 19. Berechnung der Primzahlen mit 27000 Thread(s) ist korrekt.
		20. Berechnung: 9.331032 s. Die 20. Berechnung der Primzahlen mit 27000 Thread(s) ist korrekt.
		21. Berechnung: 9.642895 s. Die 21. Berechnung der Primzahlen mit 27000 Thread(s) ist korrekt.
		22. Berechnung: 9.093096 s. Die 22. Berechnung der Primzahlen mit 27000 Thread(s) ist korrekt.
		23. Berechnung: 9.122976 s. Die 23. Berechnung der Primzahlen mit 27000 Thread(s) ist korrekt.
		24. Berechnung: 9.417341 s. Die 24. Berechnung der Primzahlen mit 27000 Thread(s) ist korrekt.
		25. Berechnung: 9.019069 s. Die 25. Berechnung der Primzahlen mit 27000 Thread(s) ist korrekt.
		26. Berechnung: 9.362385 s. Die 26. Berechnung der Primzahlen mit 27000 Thread(s) ist korrekt.
		27. Berechnung: 9.328468 s. Die 27. Berechnung der Primzahlen mit 27000 Thread(s) ist korrekt.
		28. Berechnung: 9.374771 s. Die 28. Berechnung der Primzahlen mit 27000 Thread(s) ist korrekt.
		29. Berechnung: 9.326696 s. Die 29. Berechnung der Primzahlen mit 27000 Thread(s) ist korrekt.
		30. Berechnung: 9.072787 s. Die 30. Berechnung der Primzahlen mit 27000 Thread(s) ist korrekt.
		31. Berechnung: 9.348662 s. Die 31. Berechnung der Primzahlen mit 27000 Thread(s) ist korrekt.
		32. Berechnung: 9.394936 s. Die 32. Berechnung der Primzahlen mit 27000 Thread(s) ist korrekt.
		33. Berechnung: 9.377839 s. Die 33. Berechnung der Primzahlen mit 27000 Thread(s) ist korrekt.
		34. Berechnung: 9.464238 s. Die 34. Berechnung der Primzahlen mit 27000 Thread(s) ist korrekt.
		35. Berechnung: 9.336057 s. Die 35. Berechnung der Primzahlen mit 27000 Thread(s) ist korrekt.
		36. Berechnung: 9.228356 s. Die 36. Berechnung der Primzahlen mit 27000 Thread(s) ist korrekt.
		37. Berechnung: 9.298442 s. Die 37. Berechnung der Primzahlen mit 27000 Thread(s) ist korrekt.
		38. Berechnung: 9.061230 s. Die 38. Berechnung der Primzahlen mit 27000 Thread(s) ist korrekt.
		39. Berechnung: 9.083818 s. Die 39. Berechnung der Primzahlen mit 27000 Thread(s) ist korrekt.
		40. Berechnung: 9.381551 s. Die 40. Berechnung der Primzahlen mit 27000 Thread(s) ist korrekt.
		41. Berechnung: 9.256683 s. Die 41. Berechnung der Primzahlen mit 27000 Thread(s) ist korrekt.
		42. Berechnung: 9.348987 s. Die 42. Berechnung der Primzahlen mit 27000 Thread(s) ist korrekt.
		43. Berechnung: 9.382032 s. Die 43. Berechnung der Primzahlen mit 27000 Thread(s) ist korrekt.
		44. Berechnung: 9.345213 s. Die 44. Berechnung der Primzahlen mit 27000 Thread(s) ist korrekt.
		45. Berechnung: 9.785279 s. Die 45. Berechnung der Primzahlen mit 27000 Thread(s) ist korrekt.
		46. Berechnung: 9.375073 s. Die 46. Berechnung der Primzahlen mit 27000 Thread(s) ist korrekt.
		47. Berechnung: 9.365450 s. Die 47. Berechnung der Primzahlen mit 27000 Thread(s) ist korrekt.
		48. Berechnung: 9.323067 s. Die 48. Berechnung der Primzahlen mit 27000 Thread(s) ist korrekt.
		49. Berechnung: 9.398847 s. Die 49. Berechnung der Primzahlen mit 27000 Thread(s) ist korrekt.
		50. Berechnung: 9.203274 s. Die 50. Berechnung der Primzahlen mit 27000 Thread(s) ist korrekt.
		Durchschnittliche Ausfuehrungszeit des Programmes bei 50 Durchlaeufen mit 27000 Thread(s): 9.318993 s. Alle berechneten Primzahlen mit 27000 Thread(s) sind korrekt.
	Berechnung mittels 28000 Thread(s):
		1. Berechnung: 8.690371 s. Die 1. Berechnung der Primzahlen mit 28000 Thread(s) ist korrekt.
		2. Berechnung: 8.726284 s. Die 2. Berechnung der Primzahlen mit 28000 Thread(s) ist korrekt.
		3. Berechnung: 8.549386 s. Die 3. Berechnung der Primzahlen mit 28000 Thread(s) ist korrekt.
		4. Berechnung: 8.792285 s. Die 4. Berechnung der Primzahlen mit 28000 Thread(s) ist korrekt.
		5. Berechnung: 8.517949 s. Die 5. Berechnung der Primzahlen mit 28000 Thread(s) ist korrekt.
		6. Berechnung: 8.848998 s. Die 6. Berechnung der Primzahlen mit 28000 Thread(s) ist korrekt.
		7. Berechnung: 8.840586 s. Die 7. Berechnung der Primzahlen mit 28000 Thread(s) ist korrekt.
		8. Berechnung: 8.861280 s. Die 8. Berechnung der Primzahlen mit 28000 Thread(s) ist korrekt.
		9. Berechnung: 8.829322 s. Die 9. Berechnung der Primzahlen mit 28000 Thread(s) ist korrekt.
		10. Berechnung: 8.881316 s. Die 10. Berechnung der Primzahlen mit 28000 Thread(s) ist korrekt.
		11. Berechnung: 8.856840 s. Die 11. Berechnung der Primzahlen mit 28000 Thread(s) ist korrekt.
		12. Berechnung: 8.875399 s. Die 12. Berechnung der Primzahlen mit 28000 Thread(s) ist korrekt.
		13. Berechnung: 8.874491 s. Die 13. Berechnung der Primzahlen mit 28000 Thread(s) ist korrekt.
		14. Berechnung: 8.860037 s. Die 14. Berechnung der Primzahlen mit 28000 Thread(s) ist korrekt.
		15. Berechnung: 8.837601 s. Die 15. Berechnung der Primzahlen mit 28000 Thread(s) ist korrekt.
		16. Berechnung: 8.615145 s. Die 16. Berechnung der Primzahlen mit 28000 Thread(s) ist korrekt.
		17. Berechnung: 8.692294 s. Die 17. Berechnung der Primzahlen mit 28000 Thread(s) ist korrekt.
		18. Berechnung: 8.843030 s. Die 18. Berechnung der Primzahlen mit 28000 Thread(s) ist korrekt.
		19. Berechnung: 8.791349 s. Die 19. Berechnung der Primzahlen mit 28000 Thread(s) ist korrekt.
		20. Berechnung: 8.765760 s. Die 20. Berechnung der Primzahlen mit 28000 Thread(s) ist korrekt.
		21. Berechnung: 8.840315 s. Die 21. Berechnung der Primzahlen mit 28000 Thread(s) ist korrekt.
		22. Berechnung: 8.937128 s. Die 22. Berechnung der Primzahlen mit 28000 Thread(s) ist korrekt.
		23. Berechnung: 8.698553 s. Die 23. Berechnung der Primzahlen mit 28000 Thread(s) ist korrekt.
		24. Berechnung: 8.729155 s. Die 24. Berechnung der Primzahlen mit 28000 Thread(s) ist korrekt.
		25. Berechnung: 9.511682 s. Die 25. Berechnung der Primzahlen mit 28000 Thread(s) ist korrekt.
		26. Berechnung: 8.766813 s. Die 26. Berechnung der Primzahlen mit 28000 Thread(s) ist korrekt.
		27. Berechnung: 8.730190 s. Die 27. Berechnung der Primzahlen mit 28000 Thread(s) ist korrekt.
		28. Berechnung: 8.877982 s. Die 28. Berechnung der Primzahlen mit 28000 Thread(s) ist korrekt.
		29. Berechnung: 8.805893 s. Die 29. Berechnung der Primzahlen mit 28000 Thread(s) ist korrekt.
		30. Berechnung: 8.772463 s. Die 30. Berechnung der Primzahlen mit 28000 Thread(s) ist korrekt.
		31. Berechnung: 8.945109 s. Die 31. Berechnung der Primzahlen mit 28000 Thread(s) ist korrekt.
		32. Berechnung: 8.773804 s. Die 32. Berechnung der Primzahlen mit 28000 Thread(s) ist korrekt.
		33. Berechnung: 8.902118 s. Die 33. Berechnung der Primzahlen mit 28000 Thread(s) ist korrekt.
		34. Berechnung: 8.883912 s. Die 34. Berechnung der Primzahlen mit 28000 Thread(s) ist korrekt.
		35. Berechnung: 8.899985 s. Die 35. Berechnung der Primzahlen mit 28000 Thread(s) ist korrekt.
		36. Berechnung: 9.656927 s. Die 36. Berechnung der Primzahlen mit 28000 Thread(s) ist korrekt.
		37. Berechnung: 11.167622 s. Die 37. Berechnung der Primzahlen mit 28000 Thread(s) ist korrekt.
		38. Berechnung: 11.139001 s. Die 38. Berechnung der Primzahlen mit 28000 Thread(s) ist korrekt.
		39. Berechnung: 10.513376 s. Die 39. Berechnung der Primzahlen mit 28000 Thread(s) ist korrekt.
		40. Berechnung: 9.933448 s. Die 40. Berechnung der Primzahlen mit 28000 Thread(s) ist korrekt.
		41. Berechnung: 11.279606 s. Die 41. Berechnung der Primzahlen mit 28000 Thread(s) ist korrekt.
		42. Berechnung: 10.539727 s. Die 42. Berechnung der Primzahlen mit 28000 Thread(s) ist korrekt.
		43. Berechnung: 9.910452 s. Die 43. Berechnung der Primzahlen mit 28000 Thread(s) ist korrekt.
		44. Berechnung: 9.976760 s. Die 44. Berechnung der Primzahlen mit 28000 Thread(s) ist korrekt.
		45. Berechnung: 9.992398 s. Die 45. Berechnung der Primzahlen mit 28000 Thread(s) ist korrekt.
		46. Berechnung: 10.085802 s. Die 46. Berechnung der Primzahlen mit 28000 Thread(s) ist korrekt.
		47. Berechnung: 9.938255 s. Die 47. Berechnung der Primzahlen mit 28000 Thread(s) ist korrekt.
		48. Berechnung: 10.008136 s. Die 48. Berechnung der Primzahlen mit 28000 Thread(s) ist korrekt.
		49. Berechnung: 10.150509 s. Die 49. Berechnung der Primzahlen mit 28000 Thread(s) ist korrekt.
		50. Berechnung: 10.050958 s. Die 50. Berechnung der Primzahlen mit 28000 Thread(s) ist korrekt.
		Durchschnittliche Ausfuehrungszeit des Programmes bei 50 Durchlaeufen mit 28000 Thread(s): 9.259356 s. Alle berechneten Primzahlen mit 28000 Thread(s) sind korrekt.
	Berechnung mittels 29000 Thread(s):
		1. Berechnung: 9.365602 s. Die 1. Berechnung der Primzahlen mit 29000 Thread(s) ist korrekt.
		2. Berechnung: 8.571446 s. Die 2. Berechnung der Primzahlen mit 29000 Thread(s) ist korrekt.
		3. Berechnung: 8.249874 s. Die 3. Berechnung der Primzahlen mit 29000 Thread(s) ist korrekt.
		4. Berechnung: 8.451342 s. Die 4. Berechnung der Primzahlen mit 29000 Thread(s) ist korrekt.
		5. Berechnung: 8.315963 s. Die 5. Berechnung der Primzahlen mit 29000 Thread(s) ist korrekt.
		6. Berechnung: 8.238819 s. Die 6. Berechnung der Primzahlen mit 29000 Thread(s) ist korrekt.
		7. Berechnung: 8.242112 s. Die 7. Berechnung der Primzahlen mit 29000 Thread(s) ist korrekt.
		8. Berechnung: 8.299138 s. Die 8. Berechnung der Primzahlen mit 29000 Thread(s) ist korrekt.
		9. Berechnung: 7.998254 s. Die 9. Berechnung der Primzahlen mit 29000 Thread(s) ist korrekt.
		10. Berechnung: 8.291450 s. Die 10. Berechnung der Primzahlen mit 29000 Thread(s) ist korrekt.
		11. Berechnung: 8.310907 s. Die 11. Berechnung der Primzahlen mit 29000 Thread(s) ist korrekt.
		12. Berechnung: 8.248748 s. Die 12. Berechnung der Primzahlen mit 29000 Thread(s) ist korrekt.
		13. Berechnung: 8.312811 s. Die 13. Berechnung der Primzahlen mit 29000 Thread(s) ist korrekt.
		14. Berechnung: 8.373473 s. Die 14. Berechnung der Primzahlen mit 29000 Thread(s) ist korrekt.
		15. Berechnung: 8.021684 s. Die 15. Berechnung der Primzahlen mit 29000 Thread(s) ist korrekt.
		16. Berechnung: 8.328426 s. Die 16. Berechnung der Primzahlen mit 29000 Thread(s) ist korrekt.
		17. Berechnung: 8.131548 s. Die 17. Berechnung der Primzahlen mit 29000 Thread(s) ist korrekt.
		18. Berechnung: 8.096135 s. Die 18. Berechnung der Primzahlen mit 29000 Thread(s) ist korrekt.
		19. Berechnung: 8.321935 s. Die 19. Berechnung der Primzahlen mit 29000 Thread(s) ist korrekt.
		20. Berechnung: 8.278199 s. Die 20. Berechnung der Primzahlen mit 29000 Thread(s) ist korrekt.
		21. Berechnung: 8.068685 s. Die 21. Berechnung der Primzahlen mit 29000 Thread(s) ist korrekt.
		22. Berechnung: 8.293203 s. Die 22. Berechnung der Primzahlen mit 29000 Thread(s) ist korrekt.
		23. Berechnung: 8.280266 s. Die 23. Berechnung der Primzahlen mit 29000 Thread(s) ist korrekt.
		24. Berechnung: 8.308024 s. Die 24. Berechnung der Primzahlen mit 29000 Thread(s) ist korrekt.
		25. Berechnung: 8.111622 s. Die 25. Berechnung der Primzahlen mit 29000 Thread(s) ist korrekt.
		26. Berechnung: 8.287823 s. Die 26. Berechnung der Primzahlen mit 29000 Thread(s) ist korrekt.
		27. Berechnung: 8.283603 s. Die 27. Berechnung der Primzahlen mit 29000 Thread(s) ist korrekt.
		28. Berechnung: 8.306064 s. Die 28. Berechnung der Primzahlen mit 29000 Thread(s) ist korrekt.
		29. Berechnung: 8.292559 s. Die 29. Berechnung der Primzahlen mit 29000 Thread(s) ist korrekt.
		30. Berechnung: 8.260716 s. Die 30. Berechnung der Primzahlen mit 29000 Thread(s) ist korrekt.
		31. Berechnung: 8.104470 s. Die 31. Berechnung der Primzahlen mit 29000 Thread(s) ist korrekt.
		32. Berechnung: 8.153512 s. Die 32. Berechnung der Primzahlen mit 29000 Thread(s) ist korrekt.
		33. Berechnung: 8.257056 s. Die 33. Berechnung der Primzahlen mit 29000 Thread(s) ist korrekt.
		34. Berechnung: 8.063138 s. Die 34. Berechnung der Primzahlen mit 29000 Thread(s) ist korrekt.
		35. Berechnung: 8.298691 s. Die 35. Berechnung der Primzahlen mit 29000 Thread(s) ist korrekt.
		36. Berechnung: 8.270577 s. Die 36. Berechnung der Primzahlen mit 29000 Thread(s) ist korrekt.
		37. Berechnung: 8.309336 s. Die 37. Berechnung der Primzahlen mit 29000 Thread(s) ist korrekt.
		38. Berechnung: 8.171305 s. Die 38. Berechnung der Primzahlen mit 29000 Thread(s) ist korrekt.
		39. Berechnung: 8.327699 s. Die 39. Berechnung der Primzahlen mit 29000 Thread(s) ist korrekt.
		40. Berechnung: 8.319292 s. Die 40. Berechnung der Primzahlen mit 29000 Thread(s) ist korrekt.
		41. Berechnung: 8.233613 s. Die 41. Berechnung der Primzahlen mit 29000 Thread(s) ist korrekt.
		42. Berechnung: 8.335607 s. Die 42. Berechnung der Primzahlen mit 29000 Thread(s) ist korrekt.
		43. Berechnung: 8.314319 s. Die 43. Berechnung der Primzahlen mit 29000 Thread(s) ist korrekt.
		44. Berechnung: 8.244326 s. Die 44. Berechnung der Primzahlen mit 29000 Thread(s) ist korrekt.
		45. Berechnung: 8.283264 s. Die 45. Berechnung der Primzahlen mit 29000 Thread(s) ist korrekt.
		46. Berechnung: 8.278352 s. Die 46. Berechnung der Primzahlen mit 29000 Thread(s) ist korrekt.
		47. Berechnung: 8.226811 s. Die 47. Berechnung der Primzahlen mit 29000 Thread(s) ist korrekt.
		48. Berechnung: 8.120116 s. Die 48. Berechnung der Primzahlen mit 29000 Thread(s) ist korrekt.
		49. Berechnung: 8.096470 s. Die 49. Berechnung der Primzahlen mit 29000 Thread(s) ist korrekt.
		50. Berechnung: 8.329659 s. Die 50. Berechnung der Primzahlen mit 29000 Thread(s) ist korrekt.
		Durchschnittliche Ausfuehrungszeit des Programmes bei 50 Durchlaeufen mit 29000 Thread(s): 8.273561 s. Alle berechneten Primzahlen mit 29000 Thread(s) sind korrekt.
	Berechnung mittels 30000 Thread(s):
		1. Berechnung: 7.733802 s. Die 1. Berechnung der Primzahlen mit 30000 Thread(s) ist korrekt.
		2. Berechnung: 7.762400 s. Die 2. Berechnung der Primzahlen mit 30000 Thread(s) ist korrekt.
		3. Berechnung: 7.713269 s. Die 3. Berechnung der Primzahlen mit 30000 Thread(s) ist korrekt.
		4. Berechnung: 7.761292 s. Die 4. Berechnung der Primzahlen mit 30000 Thread(s) ist korrekt.
		5. Berechnung: 7.954654 s. Die 5. Berechnung der Primzahlen mit 30000 Thread(s) ist korrekt.
		6. Berechnung: 7.538130 s. Die 6. Berechnung der Primzahlen mit 30000 Thread(s) ist korrekt.
		7. Berechnung: 7.655166 s. Die 7. Berechnung der Primzahlen mit 30000 Thread(s) ist korrekt.
		8. Berechnung: 7.797100 s. Die 8. Berechnung der Primzahlen mit 30000 Thread(s) ist korrekt.
		9. Berechnung: 7.708457 s. Die 9. Berechnung der Primzahlen mit 30000 Thread(s) ist korrekt.
		10. Berechnung: 7.598923 s. Die 10. Berechnung der Primzahlen mit 30000 Thread(s) ist korrekt.
		11. Berechnung: 7.560089 s. Die 11. Berechnung der Primzahlen mit 30000 Thread(s) ist korrekt.
		12. Berechnung: 7.780088 s. Die 12. Berechnung der Primzahlen mit 30000 Thread(s) ist korrekt.
		13. Berechnung: 7.504847 s. Die 13. Berechnung der Primzahlen mit 30000 Thread(s) ist korrekt.
		14. Berechnung: 7.753568 s. Die 14. Berechnung der Primzahlen mit 30000 Thread(s) ist korrekt.
		15. Berechnung: 7.525503 s. Die 15. Berechnung der Primzahlen mit 30000 Thread(s) ist korrekt.
		16. Berechnung: 7.776881 s. Die 16. Berechnung der Primzahlen mit 30000 Thread(s) ist korrekt.
		17. Berechnung: 7.758159 s. Die 17. Berechnung der Primzahlen mit 30000 Thread(s) ist korrekt.
		18. Berechnung: 7.785391 s. Die 18. Berechnung der Primzahlen mit 30000 Thread(s) ist korrekt.
		19. Berechnung: 7.635001 s. Die 19. Berechnung der Primzahlen mit 30000 Thread(s) ist korrekt.
		20. Berechnung: 7.760628 s. Die 20. Berechnung der Primzahlen mit 30000 Thread(s) ist korrekt.
		21. Berechnung: 7.710511 s. Die 21. Berechnung der Primzahlen mit 30000 Thread(s) ist korrekt.
		22. Berechnung: 7.619245 s. Die 22. Berechnung der Primzahlen mit 30000 Thread(s) ist korrekt.
		23. Berechnung: 7.667689 s. Die 23. Berechnung der Primzahlen mit 30000 Thread(s) ist korrekt.
		24. Berechnung: 7.689299 s. Die 24. Berechnung der Primzahlen mit 30000 Thread(s) ist korrekt.
		25. Berechnung: 7.702112 s. Die 25. Berechnung der Primzahlen mit 30000 Thread(s) ist korrekt.
		26. Berechnung: 7.712830 s. Die 26. Berechnung der Primzahlen mit 30000 Thread(s) ist korrekt.
		27. Berechnung: 7.727025 s. Die 27. Berechnung der Primzahlen mit 30000 Thread(s) ist korrekt.
		28. Berechnung: 7.521989 s. Die 28. Berechnung der Primzahlen mit 30000 Thread(s) ist korrekt.
		29. Berechnung: 7.756446 s. Die 29. Berechnung der Primzahlen mit 30000 Thread(s) ist korrekt.
		30. Berechnung: 7.608073 s. Die 30. Berechnung der Primzahlen mit 30000 Thread(s) ist korrekt.
		31. Berechnung: 7.732570 s. Die 31. Berechnung der Primzahlen mit 30000 Thread(s) ist korrekt.
		32. Berechnung: 7.576122 s. Die 32. Berechnung der Primzahlen mit 30000 Thread(s) ist korrekt.
		33. Berechnung: 7.817577 s. Die 33. Berechnung der Primzahlen mit 30000 Thread(s) ist korrekt.
		34. Berechnung: 7.719071 s. Die 34. Berechnung der Primzahlen mit 30000 Thread(s) ist korrekt.
		35. Berechnung: 7.750892 s. Die 35. Berechnung der Primzahlen mit 30000 Thread(s) ist korrekt.
		36. Berechnung: 7.816661 s. Die 36. Berechnung der Primzahlen mit 30000 Thread(s) ist korrekt.
		37. Berechnung: 7.520719 s. Die 37. Berechnung der Primzahlen mit 30000 Thread(s) ist korrekt.
		38. Berechnung: 7.713482 s. Die 38. Berechnung der Primzahlen mit 30000 Thread(s) ist korrekt.
		39. Berechnung: 7.644563 s. Die 39. Berechnung der Primzahlen mit 30000 Thread(s) ist korrekt.
		40. Berechnung: 7.785910 s. Die 40. Berechnung der Primzahlen mit 30000 Thread(s) ist korrekt.
		41. Berechnung: 7.817697 s. Die 41. Berechnung der Primzahlen mit 30000 Thread(s) ist korrekt.
		42. Berechnung: 7.740012 s. Die 42. Berechnung der Primzahlen mit 30000 Thread(s) ist korrekt.
		43. Berechnung: 7.767081 s. Die 43. Berechnung der Primzahlen mit 30000 Thread(s) ist korrekt.
		44. Berechnung: 7.770773 s. Die 44. Berechnung der Primzahlen mit 30000 Thread(s) ist korrekt.
		45. Berechnung: 7.770255 s. Die 45. Berechnung der Primzahlen mit 30000 Thread(s) ist korrekt.
		46. Berechnung: 7.844244 s. Die 46. Berechnung der Primzahlen mit 30000 Thread(s) ist korrekt.
		47. Berechnung: 7.756455 s. Die 47. Berechnung der Primzahlen mit 30000 Thread(s) ist korrekt.
		48. Berechnung: 7.743975 s. Die 48. Berechnung der Primzahlen mit 30000 Thread(s) ist korrekt.
		49. Berechnung: 7.558533 s. Die 49. Berechnung der Primzahlen mit 30000 Thread(s) ist korrekt.
		50. Berechnung: 7.720479 s. Die 50. Berechnung der Primzahlen mit 30000 Thread(s) ist korrekt.
		Durchschnittliche Ausfuehrungszeit des Programmes bei 50 Durchlaeufen mit 30000 Thread(s): 7.706913 s. Alle berechneten Primzahlen mit 30000 Thread(s) sind korrekt.
	Berechnung mittels 31000 Thread(s):
		1. Berechnung: 7.205328 s. Die 1. Berechnung der Primzahlen mit 31000 Thread(s) ist korrekt.
		2. Berechnung: 7.121798 s. Die 2. Berechnung der Primzahlen mit 31000 Thread(s) ist korrekt.
		3. Berechnung: 7.134591 s. Die 3. Berechnung der Primzahlen mit 31000 Thread(s) ist korrekt.
		4. Berechnung: 7.185846 s. Die 4. Berechnung der Primzahlen mit 31000 Thread(s) ist korrekt.
		5. Berechnung: 7.175544 s. Die 5. Berechnung der Primzahlen mit 31000 Thread(s) ist korrekt.
		6. Berechnung: 7.139554 s. Die 6. Berechnung der Primzahlen mit 31000 Thread(s) ist korrekt.
		7. Berechnung: 7.184787 s. Die 7. Berechnung der Primzahlen mit 31000 Thread(s) ist korrekt.
		8. Berechnung: 7.100541 s. Die 8. Berechnung der Primzahlen mit 31000 Thread(s) ist korrekt.
		9. Berechnung: 7.319081 s. Die 9. Berechnung der Primzahlen mit 31000 Thread(s) ist korrekt.
		10. Berechnung: 7.142253 s. Die 10. Berechnung der Primzahlen mit 31000 Thread(s) ist korrekt.
		11. Berechnung: 7.037004 s. Die 11. Berechnung der Primzahlen mit 31000 Thread(s) ist korrekt.
		12. Berechnung: 7.176820 s. Die 12. Berechnung der Primzahlen mit 31000 Thread(s) ist korrekt.
		13. Berechnung: 7.132848 s. Die 13. Berechnung der Primzahlen mit 31000 Thread(s) ist korrekt.
		14. Berechnung: 7.028191 s. Die 14. Berechnung der Primzahlen mit 31000 Thread(s) ist korrekt.
		15. Berechnung: 7.179780 s. Die 15. Berechnung der Primzahlen mit 31000 Thread(s) ist korrekt.
		16. Berechnung: 7.132304 s. Die 16. Berechnung der Primzahlen mit 31000 Thread(s) ist korrekt.
		17. Berechnung: 7.200569 s. Die 17. Berechnung der Primzahlen mit 31000 Thread(s) ist korrekt.
		18. Berechnung: 7.058331 s. Die 18. Berechnung der Primzahlen mit 31000 Thread(s) ist korrekt.
		19. Berechnung: 7.170493 s. Die 19. Berechnung der Primzahlen mit 31000 Thread(s) ist korrekt.
		20. Berechnung: 7.192683 s. Die 20. Berechnung der Primzahlen mit 31000 Thread(s) ist korrekt.
		21. Berechnung: 7.134252 s. Die 21. Berechnung der Primzahlen mit 31000 Thread(s) ist korrekt.
		22. Berechnung: 7.071513 s. Die 22. Berechnung der Primzahlen mit 31000 Thread(s) ist korrekt.
		23. Berechnung: 7.168400 s. Die 23. Berechnung der Primzahlen mit 31000 Thread(s) ist korrekt.
		24. Berechnung: 7.028856 s. Die 24. Berechnung der Primzahlen mit 31000 Thread(s) ist korrekt.
		25. Berechnung: 6.971073 s. Die 25. Berechnung der Primzahlen mit 31000 Thread(s) ist korrekt.
		26. Berechnung: 7.116202 s. Die 26. Berechnung der Primzahlen mit 31000 Thread(s) ist korrekt.
		27. Berechnung: 7.034280 s. Die 27. Berechnung der Primzahlen mit 31000 Thread(s) ist korrekt.
		28. Berechnung: 7.215470 s. Die 28. Berechnung der Primzahlen mit 31000 Thread(s) ist korrekt.
		29. Berechnung: 7.171318 s. Die 29. Berechnung der Primzahlen mit 31000 Thread(s) ist korrekt.
		30. Berechnung: 7.072840 s. Die 30. Berechnung der Primzahlen mit 31000 Thread(s) ist korrekt.
		31. Berechnung: 6.975808 s. Die 31. Berechnung der Primzahlen mit 31000 Thread(s) ist korrekt.
		32. Berechnung: 7.168761 s. Die 32. Berechnung der Primzahlen mit 31000 Thread(s) ist korrekt.
		33. Berechnung: 7.019942 s. Die 33. Berechnung der Primzahlen mit 31000 Thread(s) ist korrekt.
		34. Berechnung: 7.062883 s. Die 34. Berechnung der Primzahlen mit 31000 Thread(s) ist korrekt.
		35. Berechnung: 7.176701 s. Die 35. Berechnung der Primzahlen mit 31000 Thread(s) ist korrekt.
		36. Berechnung: 7.198425 s. Die 36. Berechnung der Primzahlen mit 31000 Thread(s) ist korrekt.
		37. Berechnung: 7.116948 s. Die 37. Berechnung der Primzahlen mit 31000 Thread(s) ist korrekt.
		38. Berechnung: 7.146139 s. Die 38. Berechnung der Primzahlen mit 31000 Thread(s) ist korrekt.
		39. Berechnung: 7.196846 s. Die 39. Berechnung der Primzahlen mit 31000 Thread(s) ist korrekt.
		40. Berechnung: 7.066258 s. Die 40. Berechnung der Primzahlen mit 31000 Thread(s) ist korrekt.
		41. Berechnung: 7.214019 s. Die 41. Berechnung der Primzahlen mit 31000 Thread(s) ist korrekt.
		42. Berechnung: 8.157242 s. Die 42. Berechnung der Primzahlen mit 31000 Thread(s) ist korrekt.
		43. Berechnung: 8.452959 s. Die 43. Berechnung der Primzahlen mit 31000 Thread(s) ist korrekt.
		44. Berechnung: 7.066294 s. Die 44. Berechnung der Primzahlen mit 31000 Thread(s) ist korrekt.
		45. Berechnung: 7.031365 s. Die 45. Berechnung der Primzahlen mit 31000 Thread(s) ist korrekt.
		46. Berechnung: 7.177076 s. Die 46. Berechnung der Primzahlen mit 31000 Thread(s) ist korrekt.
		47. Berechnung: 7.178451 s. Die 47. Berechnung der Primzahlen mit 31000 Thread(s) ist korrekt.
		48. Berechnung: 6.967389 s. Die 48. Berechnung der Primzahlen mit 31000 Thread(s) ist korrekt.
		49. Berechnung: 7.012814 s. Die 49. Berechnung der Primzahlen mit 31000 Thread(s) ist korrekt.
		50. Berechnung: 7.209456 s. Die 50. Berechnung der Primzahlen mit 31000 Thread(s) ist korrekt.
		Durchschnittliche Ausfuehrungszeit des Programmes bei 50 Durchlaeufen mit 31000 Thread(s): 7.171967 s. Alle berechneten Primzahlen mit 31000 Thread(s) sind korrekt.
	Berechnung mittels 32000 Thread(s):
		1. Berechnung: 6.580288 s. Die 1. Berechnung der Primzahlen mit 32000 Thread(s) ist korrekt.
		2. Berechnung: 6.588899 s. Die 2. Berechnung der Primzahlen mit 32000 Thread(s) ist korrekt.
		3. Berechnung: 6.599950 s. Die 3. Berechnung der Primzahlen mit 32000 Thread(s) ist korrekt.
		4. Berechnung: 6.656160 s. Die 4. Berechnung der Primzahlen mit 32000 Thread(s) ist korrekt.
		5. Berechnung: 6.486770 s. Die 5. Berechnung der Primzahlen mit 32000 Thread(s) ist korrekt.
		6. Berechnung: 6.434841 s. Die 6. Berechnung der Primzahlen mit 32000 Thread(s) ist korrekt.
		7. Berechnung: 6.551704 s. Die 7. Berechnung der Primzahlen mit 32000 Thread(s) ist korrekt.
		8. Berechnung: 6.564057 s. Die 8. Berechnung der Primzahlen mit 32000 Thread(s) ist korrekt.
		9. Berechnung: 6.593158 s. Die 9. Berechnung der Primzahlen mit 32000 Thread(s) ist korrekt.
		10. Berechnung: 6.470831 s. Die 10. Berechnung der Primzahlen mit 32000 Thread(s) ist korrekt.
		11. Berechnung: 6.559900 s. Die 11. Berechnung der Primzahlen mit 32000 Thread(s) ist korrekt.
		12. Berechnung: 6.555181 s. Die 12. Berechnung der Primzahlen mit 32000 Thread(s) ist korrekt.
		13. Berechnung: 6.466148 s. Die 13. Berechnung der Primzahlen mit 32000 Thread(s) ist korrekt.
		14. Berechnung: 6.567642 s. Die 14. Berechnung der Primzahlen mit 32000 Thread(s) ist korrekt.
		15. Berechnung: 6.441719 s. Die 15. Berechnung der Primzahlen mit 32000 Thread(s) ist korrekt.
		16. Berechnung: 6.502083 s. Die 16. Berechnung der Primzahlen mit 32000 Thread(s) ist korrekt.
		17. Berechnung: 6.543538 s. Die 17. Berechnung der Primzahlen mit 32000 Thread(s) ist korrekt.
		18. Berechnung: 6.528753 s. Die 18. Berechnung der Primzahlen mit 32000 Thread(s) ist korrekt.
		19. Berechnung: 6.510769 s. Die 19. Berechnung der Primzahlen mit 32000 Thread(s) ist korrekt.
		20. Berechnung: 6.575498 s. Die 20. Berechnung der Primzahlen mit 32000 Thread(s) ist korrekt.
		21. Berechnung: 6.573089 s. Die 21. Berechnung der Primzahlen mit 32000 Thread(s) ist korrekt.
		22. Berechnung: 6.570321 s. Die 22. Berechnung der Primzahlen mit 32000 Thread(s) ist korrekt.
		23. Berechnung: 6.568704 s. Die 23. Berechnung der Primzahlen mit 32000 Thread(s) ist korrekt.
		24. Berechnung: 6.568530 s. Die 24. Berechnung der Primzahlen mit 32000 Thread(s) ist korrekt.
		25. Berechnung: 6.592932 s. Die 25. Berechnung der Primzahlen mit 32000 Thread(s) ist korrekt.
		26. Berechnung: 6.616672 s. Die 26. Berechnung der Primzahlen mit 32000 Thread(s) ist korrekt.
		27. Berechnung: 6.561260 s. Die 27. Berechnung der Primzahlen mit 32000 Thread(s) ist korrekt.
		28. Berechnung: 6.424841 s. Die 28. Berechnung der Primzahlen mit 32000 Thread(s) ist korrekt.
		29. Berechnung: 6.493049 s. Die 29. Berechnung der Primzahlen mit 32000 Thread(s) ist korrekt.
		30. Berechnung: 6.560999 s. Die 30. Berechnung der Primzahlen mit 32000 Thread(s) ist korrekt.
		31. Berechnung: 6.509581 s. Die 31. Berechnung der Primzahlen mit 32000 Thread(s) ist korrekt.
		32. Berechnung: 6.565927 s. Die 32. Berechnung der Primzahlen mit 32000 Thread(s) ist korrekt.
		33. Berechnung: 6.497673 s. Die 33. Berechnung der Primzahlen mit 32000 Thread(s) ist korrekt.
		34. Berechnung: 6.587089 s. Die 34. Berechnung der Primzahlen mit 32000 Thread(s) ist korrekt.
		35. Berechnung: 6.544580 s. Die 35. Berechnung der Primzahlen mit 32000 Thread(s) ist korrekt.
		36. Berechnung: 6.579455 s. Die 36. Berechnung der Primzahlen mit 32000 Thread(s) ist korrekt.
		37. Berechnung: 6.575816 s. Die 37. Berechnung der Primzahlen mit 32000 Thread(s) ist korrekt.
		38. Berechnung: 6.496683 s. Die 38. Berechnung der Primzahlen mit 32000 Thread(s) ist korrekt.
		39. Berechnung: 6.509231 s. Die 39. Berechnung der Primzahlen mit 32000 Thread(s) ist korrekt.
		40. Berechnung: 6.551738 s. Die 40. Berechnung der Primzahlen mit 32000 Thread(s) ist korrekt.
		41. Berechnung: 6.510240 s. Die 41. Berechnung der Primzahlen mit 32000 Thread(s) ist korrekt.
		42. Berechnung: 6.531819 s. Die 42. Berechnung der Primzahlen mit 32000 Thread(s) ist korrekt.
		43. Berechnung: 6.535887 s. Die 43. Berechnung der Primzahlen mit 32000 Thread(s) ist korrekt.
		44. Berechnung: 6.574689 s. Die 44. Berechnung der Primzahlen mit 32000 Thread(s) ist korrekt.
		45. Berechnung: 6.449806 s. Die 45. Berechnung der Primzahlen mit 32000 Thread(s) ist korrekt.
		46. Berechnung: 6.577954 s. Die 46. Berechnung der Primzahlen mit 32000 Thread(s) ist korrekt.
		47. Berechnung: 6.487386 s. Die 47. Berechnung der Primzahlen mit 32000 Thread(s) ist korrekt.
		48. Berechnung: 6.536358 s. Die 48. Berechnung der Primzahlen mit 32000 Thread(s) ist korrekt.
		49. Berechnung: 6.504828 s. Die 49. Berechnung der Primzahlen mit 32000 Thread(s) ist korrekt.
		50. Berechnung: 6.501826 s. Die 50. Berechnung der Primzahlen mit 32000 Thread(s) ist korrekt.
		Durchschnittliche Ausfuehrungszeit des Programmes bei 50 Durchlaeufen mit 32000 Thread(s): 6.538737 s. Alle berechneten Primzahlen mit 32000 Thread(s) sind korrekt.
Alle berechneten Primzahlen sind korrekt.
thomas@thomas-ubuntu:~/Schreibtisch/Forschung zum parallelen Programmierparadigma/03 - Parallele Berechnung mit Threads$ 

