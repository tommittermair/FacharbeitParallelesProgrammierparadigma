thomas@thomas-ubuntu:~/Schreibtisch/Forschung zum parallelen Programmierparadigma/05 - Parallele Berechnung mit OpenMP$ gcc prime_number_calculation_parallel_openmp.c -o prime_number_calculation_parallel_openmp -fopenmp
thomas@thomas-ubuntu:~/Schreibtisch/Forschung zum parallelen Programmierparadigma/05 - Parallele Berechnung mit OpenMP$ ./prime_number_calculation_parallel_openmp
Parallele Berechnung der Primzahlen von 1 bis 100.000 mit Hilfe von OpenMP und 50 Wiederholung(en):
	Berechnung mittels 1 OpenMP-Thread(s):
		1. Berechnung: 12.877578 s. Die 1. Berechnung der Primzahlen mit 1 OpenMP-Thread(s) ist korrekt.
		2. Berechnung: 12.710584 s. Die 2. Berechnung der Primzahlen mit 1 OpenMP-Thread(s) ist korrekt.
		3. Berechnung: 13.128145 s. Die 3. Berechnung der Primzahlen mit 1 OpenMP-Thread(s) ist korrekt.
		4. Berechnung: 13.149009 s. Die 4. Berechnung der Primzahlen mit 1 OpenMP-Thread(s) ist korrekt.
		5. Berechnung: 12.805311 s. Die 5. Berechnung der Primzahlen mit 1 OpenMP-Thread(s) ist korrekt.
		6. Berechnung: 13.169310 s. Die 6. Berechnung der Primzahlen mit 1 OpenMP-Thread(s) ist korrekt.
		7. Berechnung: 13.218076 s. Die 7. Berechnung der Primzahlen mit 1 OpenMP-Thread(s) ist korrekt.
		8. Berechnung: 13.180765 s. Die 8. Berechnung der Primzahlen mit 1 OpenMP-Thread(s) ist korrekt.
		9. Berechnung: 12.942209 s. Die 9. Berechnung der Primzahlen mit 1 OpenMP-Thread(s) ist korrekt.
		10. Berechnung: 13.284950 s. Die 10. Berechnung der Primzahlen mit 1 OpenMP-Thread(s) ist korrekt.
		11. Berechnung: 12.848978 s. Die 11. Berechnung der Primzahlen mit 1 OpenMP-Thread(s) ist korrekt.
		12. Berechnung: 13.059841 s. Die 12. Berechnung der Primzahlen mit 1 OpenMP-Thread(s) ist korrekt.
		13. Berechnung: 12.970887 s. Die 13. Berechnung der Primzahlen mit 1 OpenMP-Thread(s) ist korrekt.
		14. Berechnung: 12.997856 s. Die 14. Berechnung der Primzahlen mit 1 OpenMP-Thread(s) ist korrekt.
		15. Berechnung: 12.987999 s. Die 15. Berechnung der Primzahlen mit 1 OpenMP-Thread(s) ist korrekt.
		16. Berechnung: 12.790129 s. Die 16. Berechnung der Primzahlen mit 1 OpenMP-Thread(s) ist korrekt.
		17. Berechnung: 13.042791 s. Die 17. Berechnung der Primzahlen mit 1 OpenMP-Thread(s) ist korrekt.
		18. Berechnung: 13.086070 s. Die 18. Berechnung der Primzahlen mit 1 OpenMP-Thread(s) ist korrekt.
		19. Berechnung: 13.386788 s. Die 19. Berechnung der Primzahlen mit 1 OpenMP-Thread(s) ist korrekt.
		20. Berechnung: 13.104612 s. Die 20. Berechnung der Primzahlen mit 1 OpenMP-Thread(s) ist korrekt.
		21. Berechnung: 12.317265 s. Die 21. Berechnung der Primzahlen mit 1 OpenMP-Thread(s) ist korrekt.
		22. Berechnung: 12.395714 s. Die 22. Berechnung der Primzahlen mit 1 OpenMP-Thread(s) ist korrekt.
		23. Berechnung: 12.683768 s. Die 23. Berechnung der Primzahlen mit 1 OpenMP-Thread(s) ist korrekt.
		24. Berechnung: 12.835118 s. Die 24. Berechnung der Primzahlen mit 1 OpenMP-Thread(s) ist korrekt.
		25. Berechnung: 13.121051 s. Die 25. Berechnung der Primzahlen mit 1 OpenMP-Thread(s) ist korrekt.
		26. Berechnung: 12.902233 s. Die 26. Berechnung der Primzahlen mit 1 OpenMP-Thread(s) ist korrekt.
		27. Berechnung: 13.015985 s. Die 27. Berechnung der Primzahlen mit 1 OpenMP-Thread(s) ist korrekt.
		28. Berechnung: 13.681286 s. Die 28. Berechnung der Primzahlen mit 1 OpenMP-Thread(s) ist korrekt.
		29. Berechnung: 14.884499 s. Die 29. Berechnung der Primzahlen mit 1 OpenMP-Thread(s) ist korrekt.
		30. Berechnung: 14.548978 s. Die 30. Berechnung der Primzahlen mit 1 OpenMP-Thread(s) ist korrekt.
		31. Berechnung: 12.851140 s. Die 31. Berechnung der Primzahlen mit 1 OpenMP-Thread(s) ist korrekt.
		32. Berechnung: 13.056648 s. Die 32. Berechnung der Primzahlen mit 1 OpenMP-Thread(s) ist korrekt.
		33. Berechnung: 13.067255 s. Die 33. Berechnung der Primzahlen mit 1 OpenMP-Thread(s) ist korrekt.
		34. Berechnung: 13.092373 s. Die 34. Berechnung der Primzahlen mit 1 OpenMP-Thread(s) ist korrekt.
		35. Berechnung: 13.124164 s. Die 35. Berechnung der Primzahlen mit 1 OpenMP-Thread(s) ist korrekt.
		36. Berechnung: 13.417237 s. Die 36. Berechnung der Primzahlen mit 1 OpenMP-Thread(s) ist korrekt.
		37. Berechnung: 13.497467 s. Die 37. Berechnung der Primzahlen mit 1 OpenMP-Thread(s) ist korrekt.
		38. Berechnung: 13.237920 s. Die 38. Berechnung der Primzahlen mit 1 OpenMP-Thread(s) ist korrekt.
		39. Berechnung: 13.243463 s. Die 39. Berechnung der Primzahlen mit 1 OpenMP-Thread(s) ist korrekt.
		40. Berechnung: 13.223738 s. Die 40. Berechnung der Primzahlen mit 1 OpenMP-Thread(s) ist korrekt.
		41. Berechnung: 13.184496 s. Die 41. Berechnung der Primzahlen mit 1 OpenMP-Thread(s) ist korrekt.
		42. Berechnung: 13.344933 s. Die 42. Berechnung der Primzahlen mit 1 OpenMP-Thread(s) ist korrekt.
		43. Berechnung: 13.195520 s. Die 43. Berechnung der Primzahlen mit 1 OpenMP-Thread(s) ist korrekt.
		44. Berechnung: 12.848696 s. Die 44. Berechnung der Primzahlen mit 1 OpenMP-Thread(s) ist korrekt.
		45. Berechnung: 13.181719 s. Die 45. Berechnung der Primzahlen mit 1 OpenMP-Thread(s) ist korrekt.
		46. Berechnung: 12.968431 s. Die 46. Berechnung der Primzahlen mit 1 OpenMP-Thread(s) ist korrekt.
		47. Berechnung: 13.009122 s. Die 47. Berechnung der Primzahlen mit 1 OpenMP-Thread(s) ist korrekt.
		48. Berechnung: 12.812528 s. Die 48. Berechnung der Primzahlen mit 1 OpenMP-Thread(s) ist korrekt.
		49. Berechnung: 13.163154 s. Die 49. Berechnung der Primzahlen mit 1 OpenMP-Thread(s) ist korrekt.
		50. Berechnung: 13.403068 s. Die 50. Berechnung der Primzahlen mit 1 OpenMP-Thread(s) ist korrekt.
		Durchschnittliche Ausfuehrungszeit des Programmes bei 50 Durchlaeufen mit 1 OpenMP-Thread(s): 13.121017 s. Alle berechneten Primzahlen mit 1 OpenMP-Thread(s) sind korrekt.
	Berechnung mittels 2 OpenMP-Thread(s):
		1. Berechnung: 9.617481 s. Die 1. Berechnung der Primzahlen mit 2 OpenMP-Thread(s) ist korrekt.
		2. Berechnung: 9.800986 s. Die 2. Berechnung der Primzahlen mit 2 OpenMP-Thread(s) ist korrekt.
		3. Berechnung: 9.782204 s. Die 3. Berechnung der Primzahlen mit 2 OpenMP-Thread(s) ist korrekt.
		4. Berechnung: 9.946716 s. Die 4. Berechnung der Primzahlen mit 2 OpenMP-Thread(s) ist korrekt.
		5. Berechnung: 10.023910 s. Die 5. Berechnung der Primzahlen mit 2 OpenMP-Thread(s) ist korrekt.
		6. Berechnung: 9.910213 s. Die 6. Berechnung der Primzahlen mit 2 OpenMP-Thread(s) ist korrekt.
		7. Berechnung: 9.850768 s. Die 7. Berechnung der Primzahlen mit 2 OpenMP-Thread(s) ist korrekt.
		8. Berechnung: 9.844277 s. Die 8. Berechnung der Primzahlen mit 2 OpenMP-Thread(s) ist korrekt.
		9. Berechnung: 9.544612 s. Die 9. Berechnung der Primzahlen mit 2 OpenMP-Thread(s) ist korrekt.
		10. Berechnung: 9.767930 s. Die 10. Berechnung der Primzahlen mit 2 OpenMP-Thread(s) ist korrekt.
		11. Berechnung: 9.789329 s. Die 11. Berechnung der Primzahlen mit 2 OpenMP-Thread(s) ist korrekt.
		12. Berechnung: 10.120436 s. Die 12. Berechnung der Primzahlen mit 2 OpenMP-Thread(s) ist korrekt.
		13. Berechnung: 9.700294 s. Die 13. Berechnung der Primzahlen mit 2 OpenMP-Thread(s) ist korrekt.
		14. Berechnung: 9.618103 s. Die 14. Berechnung der Primzahlen mit 2 OpenMP-Thread(s) ist korrekt.
		15. Berechnung: 9.779494 s. Die 15. Berechnung der Primzahlen mit 2 OpenMP-Thread(s) ist korrekt.
		16. Berechnung: 9.741262 s. Die 16. Berechnung der Primzahlen mit 2 OpenMP-Thread(s) ist korrekt.
		17. Berechnung: 9.914098 s. Die 17. Berechnung der Primzahlen mit 2 OpenMP-Thread(s) ist korrekt.
		18. Berechnung: 10.106199 s. Die 18. Berechnung der Primzahlen mit 2 OpenMP-Thread(s) ist korrekt.
		19. Berechnung: 9.779299 s. Die 19. Berechnung der Primzahlen mit 2 OpenMP-Thread(s) ist korrekt.
		20. Berechnung: 9.704183 s. Die 20. Berechnung der Primzahlen mit 2 OpenMP-Thread(s) ist korrekt.
		21. Berechnung: 9.755420 s. Die 21. Berechnung der Primzahlen mit 2 OpenMP-Thread(s) ist korrekt.
		22. Berechnung: 9.621496 s. Die 22. Berechnung der Primzahlen mit 2 OpenMP-Thread(s) ist korrekt.
		23. Berechnung: 10.019184 s. Die 23. Berechnung der Primzahlen mit 2 OpenMP-Thread(s) ist korrekt.
		24. Berechnung: 9.651298 s. Die 24. Berechnung der Primzahlen mit 2 OpenMP-Thread(s) ist korrekt.
		25. Berechnung: 9.962578 s. Die 25. Berechnung der Primzahlen mit 2 OpenMP-Thread(s) ist korrekt.
		26. Berechnung: 9.749129 s. Die 26. Berechnung der Primzahlen mit 2 OpenMP-Thread(s) ist korrekt.
		27. Berechnung: 9.950931 s. Die 27. Berechnung der Primzahlen mit 2 OpenMP-Thread(s) ist korrekt.
		28. Berechnung: 9.818725 s. Die 28. Berechnung der Primzahlen mit 2 OpenMP-Thread(s) ist korrekt.
		29. Berechnung: 9.780310 s. Die 29. Berechnung der Primzahlen mit 2 OpenMP-Thread(s) ist korrekt.
		30. Berechnung: 10.016039 s. Die 30. Berechnung der Primzahlen mit 2 OpenMP-Thread(s) ist korrekt.
		31. Berechnung: 11.042557 s. Die 31. Berechnung der Primzahlen mit 2 OpenMP-Thread(s) ist korrekt.
		32. Berechnung: 10.768418 s. Die 32. Berechnung der Primzahlen mit 2 OpenMP-Thread(s) ist korrekt.
		33. Berechnung: 11.066081 s. Die 33. Berechnung der Primzahlen mit 2 OpenMP-Thread(s) ist korrekt.
		34. Berechnung: 10.524398 s. Die 34. Berechnung der Primzahlen mit 2 OpenMP-Thread(s) ist korrekt.
		35. Berechnung: 10.037193 s. Die 35. Berechnung der Primzahlen mit 2 OpenMP-Thread(s) ist korrekt.
		36. Berechnung: 10.011847 s. Die 36. Berechnung der Primzahlen mit 2 OpenMP-Thread(s) ist korrekt.
		37. Berechnung: 9.889841 s. Die 37. Berechnung der Primzahlen mit 2 OpenMP-Thread(s) ist korrekt.
		38. Berechnung: 9.987714 s. Die 38. Berechnung der Primzahlen mit 2 OpenMP-Thread(s) ist korrekt.
		39. Berechnung: 9.807582 s. Die 39. Berechnung der Primzahlen mit 2 OpenMP-Thread(s) ist korrekt.
		40. Berechnung: 9.868720 s. Die 40. Berechnung der Primzahlen mit 2 OpenMP-Thread(s) ist korrekt.
		41. Berechnung: 9.825762 s. Die 41. Berechnung der Primzahlen mit 2 OpenMP-Thread(s) ist korrekt.
		42. Berechnung: 9.919449 s. Die 42. Berechnung der Primzahlen mit 2 OpenMP-Thread(s) ist korrekt.
		43. Berechnung: 9.974720 s. Die 43. Berechnung der Primzahlen mit 2 OpenMP-Thread(s) ist korrekt.
		44. Berechnung: 10.082470 s. Die 44. Berechnung der Primzahlen mit 2 OpenMP-Thread(s) ist korrekt.
		45. Berechnung: 9.760490 s. Die 45. Berechnung der Primzahlen mit 2 OpenMP-Thread(s) ist korrekt.
		46. Berechnung: 9.885287 s. Die 46. Berechnung der Primzahlen mit 2 OpenMP-Thread(s) ist korrekt.
		47. Berechnung: 9.795680 s. Die 47. Berechnung der Primzahlen mit 2 OpenMP-Thread(s) ist korrekt.
		48. Berechnung: 10.037571 s. Die 48. Berechnung der Primzahlen mit 2 OpenMP-Thread(s) ist korrekt.
		49. Berechnung: 9.990840 s. Die 49. Berechnung der Primzahlen mit 2 OpenMP-Thread(s) ist korrekt.
		50. Berechnung: 9.573031 s. Die 50. Berechnung der Primzahlen mit 2 OpenMP-Thread(s) ist korrekt.
		Durchschnittliche Ausfuehrungszeit des Programmes bei 50 Durchlaeufen mit 2 OpenMP-Thread(s): 9.930331 s. Alle berechneten Primzahlen mit 2 OpenMP-Thread(s) sind korrekt.
	Berechnung mittels 3 OpenMP-Thread(s):
		1. Berechnung: 7.287224 s. Die 1. Berechnung der Primzahlen mit 3 OpenMP-Thread(s) ist korrekt.
		2. Berechnung: 7.619404 s. Die 2. Berechnung der Primzahlen mit 3 OpenMP-Thread(s) ist korrekt.
		3. Berechnung: 7.170004 s. Die 3. Berechnung der Primzahlen mit 3 OpenMP-Thread(s) ist korrekt.
		4. Berechnung: 7.520326 s. Die 4. Berechnung der Primzahlen mit 3 OpenMP-Thread(s) ist korrekt.
		5. Berechnung: 7.445444 s. Die 5. Berechnung der Primzahlen mit 3 OpenMP-Thread(s) ist korrekt.
		6. Berechnung: 7.155143 s. Die 6. Berechnung der Primzahlen mit 3 OpenMP-Thread(s) ist korrekt.
		7. Berechnung: 7.525803 s. Die 7. Berechnung der Primzahlen mit 3 OpenMP-Thread(s) ist korrekt.
		8. Berechnung: 7.394469 s. Die 8. Berechnung der Primzahlen mit 3 OpenMP-Thread(s) ist korrekt.
		9. Berechnung: 7.373499 s. Die 9. Berechnung der Primzahlen mit 3 OpenMP-Thread(s) ist korrekt.
		10. Berechnung: 7.234717 s. Die 10. Berechnung der Primzahlen mit 3 OpenMP-Thread(s) ist korrekt.
		11. Berechnung: 7.218504 s. Die 11. Berechnung der Primzahlen mit 3 OpenMP-Thread(s) ist korrekt.
		12. Berechnung: 7.424635 s. Die 12. Berechnung der Primzahlen mit 3 OpenMP-Thread(s) ist korrekt.
		13. Berechnung: 7.259814 s. Die 13. Berechnung der Primzahlen mit 3 OpenMP-Thread(s) ist korrekt.
		14. Berechnung: 7.454300 s. Die 14. Berechnung der Primzahlen mit 3 OpenMP-Thread(s) ist korrekt.
		15. Berechnung: 7.385174 s. Die 15. Berechnung der Primzahlen mit 3 OpenMP-Thread(s) ist korrekt.
		16. Berechnung: 7.510257 s. Die 16. Berechnung der Primzahlen mit 3 OpenMP-Thread(s) ist korrekt.
		17. Berechnung: 7.263299 s. Die 17. Berechnung der Primzahlen mit 3 OpenMP-Thread(s) ist korrekt.
		18. Berechnung: 7.358518 s. Die 18. Berechnung der Primzahlen mit 3 OpenMP-Thread(s) ist korrekt.
		19. Berechnung: 7.529735 s. Die 19. Berechnung der Primzahlen mit 3 OpenMP-Thread(s) ist korrekt.
		20. Berechnung: 7.354162 s. Die 20. Berechnung der Primzahlen mit 3 OpenMP-Thread(s) ist korrekt.
		21. Berechnung: 7.528876 s. Die 21. Berechnung der Primzahlen mit 3 OpenMP-Thread(s) ist korrekt.
		22. Berechnung: 7.078910 s. Die 22. Berechnung der Primzahlen mit 3 OpenMP-Thread(s) ist korrekt.
		23. Berechnung: 7.305114 s. Die 23. Berechnung der Primzahlen mit 3 OpenMP-Thread(s) ist korrekt.
		24. Berechnung: 7.319945 s. Die 24. Berechnung der Primzahlen mit 3 OpenMP-Thread(s) ist korrekt.
		25. Berechnung: 7.494333 s. Die 25. Berechnung der Primzahlen mit 3 OpenMP-Thread(s) ist korrekt.
		26. Berechnung: 7.464641 s. Die 26. Berechnung der Primzahlen mit 3 OpenMP-Thread(s) ist korrekt.
		27. Berechnung: 7.229066 s. Die 27. Berechnung der Primzahlen mit 3 OpenMP-Thread(s) ist korrekt.
		28. Berechnung: 7.320057 s. Die 28. Berechnung der Primzahlen mit 3 OpenMP-Thread(s) ist korrekt.
		29. Berechnung: 7.329684 s. Die 29. Berechnung der Primzahlen mit 3 OpenMP-Thread(s) ist korrekt.
		30. Berechnung: 7.421399 s. Die 30. Berechnung der Primzahlen mit 3 OpenMP-Thread(s) ist korrekt.
		31. Berechnung: 7.244597 s. Die 31. Berechnung der Primzahlen mit 3 OpenMP-Thread(s) ist korrekt.
		32. Berechnung: 7.450636 s. Die 32. Berechnung der Primzahlen mit 3 OpenMP-Thread(s) ist korrekt.
		33. Berechnung: 7.479630 s. Die 33. Berechnung der Primzahlen mit 3 OpenMP-Thread(s) ist korrekt.
		34. Berechnung: 7.168842 s. Die 34. Berechnung der Primzahlen mit 3 OpenMP-Thread(s) ist korrekt.
		35. Berechnung: 7.285514 s. Die 35. Berechnung der Primzahlen mit 3 OpenMP-Thread(s) ist korrekt.
		36. Berechnung: 7.441625 s. Die 36. Berechnung der Primzahlen mit 3 OpenMP-Thread(s) ist korrekt.
		37. Berechnung: 7.487568 s. Die 37. Berechnung der Primzahlen mit 3 OpenMP-Thread(s) ist korrekt.
		38. Berechnung: 7.451300 s. Die 38. Berechnung der Primzahlen mit 3 OpenMP-Thread(s) ist korrekt.
		39. Berechnung: 7.251172 s. Die 39. Berechnung der Primzahlen mit 3 OpenMP-Thread(s) ist korrekt.
		40. Berechnung: 7.531106 s. Die 40. Berechnung der Primzahlen mit 3 OpenMP-Thread(s) ist korrekt.
		41. Berechnung: 7.516172 s. Die 41. Berechnung der Primzahlen mit 3 OpenMP-Thread(s) ist korrekt.
		42. Berechnung: 7.424636 s. Die 42. Berechnung der Primzahlen mit 3 OpenMP-Thread(s) ist korrekt.
		43. Berechnung: 7.331178 s. Die 43. Berechnung der Primzahlen mit 3 OpenMP-Thread(s) ist korrekt.
		44. Berechnung: 7.098321 s. Die 44. Berechnung der Primzahlen mit 3 OpenMP-Thread(s) ist korrekt.
		45. Berechnung: 7.363731 s. Die 45. Berechnung der Primzahlen mit 3 OpenMP-Thread(s) ist korrekt.
		46. Berechnung: 7.181732 s. Die 46. Berechnung der Primzahlen mit 3 OpenMP-Thread(s) ist korrekt.
		47. Berechnung: 7.069436 s. Die 47. Berechnung der Primzahlen mit 3 OpenMP-Thread(s) ist korrekt.
		48. Berechnung: 7.469697 s. Die 48. Berechnung der Primzahlen mit 3 OpenMP-Thread(s) ist korrekt.
		49. Berechnung: 7.065765 s. Die 49. Berechnung der Primzahlen mit 3 OpenMP-Thread(s) ist korrekt.
		50. Berechnung: 7.131515 s. Die 50. Berechnung der Primzahlen mit 3 OpenMP-Thread(s) ist korrekt.
		Durchschnittliche Ausfuehrungszeit des Programmes bei 50 Durchlaeufen mit 3 OpenMP-Thread(s): 7.348413 s. Alle berechneten Primzahlen mit 3 OpenMP-Thread(s) sind korrekt.
	Berechnung mittels 4 OpenMP-Thread(s):
		1. Berechnung: 5.902930 s. Die 1. Berechnung der Primzahlen mit 4 OpenMP-Thread(s) ist korrekt.
		2. Berechnung: 6.007723 s. Die 2. Berechnung der Primzahlen mit 4 OpenMP-Thread(s) ist korrekt.
		3. Berechnung: 5.752374 s. Die 3. Berechnung der Primzahlen mit 4 OpenMP-Thread(s) ist korrekt.
		4. Berechnung: 5.922484 s. Die 4. Berechnung der Primzahlen mit 4 OpenMP-Thread(s) ist korrekt.
		5. Berechnung: 6.141079 s. Die 5. Berechnung der Primzahlen mit 4 OpenMP-Thread(s) ist korrekt.
		6. Berechnung: 5.984979 s. Die 6. Berechnung der Primzahlen mit 4 OpenMP-Thread(s) ist korrekt.
		7. Berechnung: 5.912932 s. Die 7. Berechnung der Primzahlen mit 4 OpenMP-Thread(s) ist korrekt.
		8. Berechnung: 5.782398 s. Die 8. Berechnung der Primzahlen mit 4 OpenMP-Thread(s) ist korrekt.
		9. Berechnung: 5.924250 s. Die 9. Berechnung der Primzahlen mit 4 OpenMP-Thread(s) ist korrekt.
		10. Berechnung: 5.750033 s. Die 10. Berechnung der Primzahlen mit 4 OpenMP-Thread(s) ist korrekt.
		11. Berechnung: 5.685293 s. Die 11. Berechnung der Primzahlen mit 4 OpenMP-Thread(s) ist korrekt.
		12. Berechnung: 5.734079 s. Die 12. Berechnung der Primzahlen mit 4 OpenMP-Thread(s) ist korrekt.
		13. Berechnung: 5.798699 s. Die 13. Berechnung der Primzahlen mit 4 OpenMP-Thread(s) ist korrekt.
		14. Berechnung: 5.812555 s. Die 14. Berechnung der Primzahlen mit 4 OpenMP-Thread(s) ist korrekt.
		15. Berechnung: 5.860787 s. Die 15. Berechnung der Primzahlen mit 4 OpenMP-Thread(s) ist korrekt.
		16. Berechnung: 5.850842 s. Die 16. Berechnung der Primzahlen mit 4 OpenMP-Thread(s) ist korrekt.
		17. Berechnung: 5.998251 s. Die 17. Berechnung der Primzahlen mit 4 OpenMP-Thread(s) ist korrekt.
		18. Berechnung: 6.028460 s. Die 18. Berechnung der Primzahlen mit 4 OpenMP-Thread(s) ist korrekt.
		19. Berechnung: 5.766588 s. Die 19. Berechnung der Primzahlen mit 4 OpenMP-Thread(s) ist korrekt.
		20. Berechnung: 5.876259 s. Die 20. Berechnung der Primzahlen mit 4 OpenMP-Thread(s) ist korrekt.
		21. Berechnung: 5.779199 s. Die 21. Berechnung der Primzahlen mit 4 OpenMP-Thread(s) ist korrekt.
		22. Berechnung: 5.832351 s. Die 22. Berechnung der Primzahlen mit 4 OpenMP-Thread(s) ist korrekt.
		23. Berechnung: 5.678041 s. Die 23. Berechnung der Primzahlen mit 4 OpenMP-Thread(s) ist korrekt.
		24. Berechnung: 5.850186 s. Die 24. Berechnung der Primzahlen mit 4 OpenMP-Thread(s) ist korrekt.
		25. Berechnung: 5.929369 s. Die 25. Berechnung der Primzahlen mit 4 OpenMP-Thread(s) ist korrekt.
		26. Berechnung: 6.167937 s. Die 26. Berechnung der Primzahlen mit 4 OpenMP-Thread(s) ist korrekt.
		27. Berechnung: 6.126615 s. Die 27. Berechnung der Primzahlen mit 4 OpenMP-Thread(s) ist korrekt.
		28. Berechnung: 5.787356 s. Die 28. Berechnung der Primzahlen mit 4 OpenMP-Thread(s) ist korrekt.
		29. Berechnung: 5.864429 s. Die 29. Berechnung der Primzahlen mit 4 OpenMP-Thread(s) ist korrekt.
		30. Berechnung: 5.919027 s. Die 30. Berechnung der Primzahlen mit 4 OpenMP-Thread(s) ist korrekt.
		31. Berechnung: 5.902479 s. Die 31. Berechnung der Primzahlen mit 4 OpenMP-Thread(s) ist korrekt.
		32. Berechnung: 5.703762 s. Die 32. Berechnung der Primzahlen mit 4 OpenMP-Thread(s) ist korrekt.
		33. Berechnung: 5.742247 s. Die 33. Berechnung der Primzahlen mit 4 OpenMP-Thread(s) ist korrekt.
		34. Berechnung: 5.912405 s. Die 34. Berechnung der Primzahlen mit 4 OpenMP-Thread(s) ist korrekt.
		35. Berechnung: 5.897512 s. Die 35. Berechnung der Primzahlen mit 4 OpenMP-Thread(s) ist korrekt.
		36. Berechnung: 5.993227 s. Die 36. Berechnung der Primzahlen mit 4 OpenMP-Thread(s) ist korrekt.
		37. Berechnung: 6.280123 s. Die 37. Berechnung der Primzahlen mit 4 OpenMP-Thread(s) ist korrekt.
		38. Berechnung: 6.436171 s. Die 38. Berechnung der Primzahlen mit 4 OpenMP-Thread(s) ist korrekt.
		39. Berechnung: 6.327400 s. Die 39. Berechnung der Primzahlen mit 4 OpenMP-Thread(s) ist korrekt.
		40. Berechnung: 6.211079 s. Die 40. Berechnung der Primzahlen mit 4 OpenMP-Thread(s) ist korrekt.
		41. Berechnung: 6.265783 s. Die 41. Berechnung der Primzahlen mit 4 OpenMP-Thread(s) ist korrekt.
		42. Berechnung: 6.802468 s. Die 42. Berechnung der Primzahlen mit 4 OpenMP-Thread(s) ist korrekt.
		43. Berechnung: 5.718806 s. Die 43. Berechnung der Primzahlen mit 4 OpenMP-Thread(s) ist korrekt.
		44. Berechnung: 5.912662 s. Die 44. Berechnung der Primzahlen mit 4 OpenMP-Thread(s) ist korrekt.
		45. Berechnung: 5.679526 s. Die 45. Berechnung der Primzahlen mit 4 OpenMP-Thread(s) ist korrekt.
		46. Berechnung: 6.098482 s. Die 46. Berechnung der Primzahlen mit 4 OpenMP-Thread(s) ist korrekt.
		47. Berechnung: 5.883399 s. Die 47. Berechnung der Primzahlen mit 4 OpenMP-Thread(s) ist korrekt.
		48. Berechnung: 5.754945 s. Die 48. Berechnung der Primzahlen mit 4 OpenMP-Thread(s) ist korrekt.
		49. Berechnung: 5.695052 s. Die 49. Berechnung der Primzahlen mit 4 OpenMP-Thread(s) ist korrekt.
		50. Berechnung: 5.866560 s. Die 50. Berechnung der Primzahlen mit 4 OpenMP-Thread(s) ist korrekt.
		Durchschnittliche Ausfuehrungszeit des Programmes bei 50 Durchlaeufen mit 4 OpenMP-Thread(s): 5.930232 s. Alle berechneten Primzahlen mit 4 OpenMP-Thread(s) sind korrekt.
	Berechnung mittels 5 OpenMP-Thread(s):
		1. Berechnung: 5.017840 s. Die 1. Berechnung der Primzahlen mit 5 OpenMP-Thread(s) ist korrekt.
		2. Berechnung: 4.809746 s. Die 2. Berechnung der Primzahlen mit 5 OpenMP-Thread(s) ist korrekt.
		3. Berechnung: 4.995666 s. Die 3. Berechnung der Primzahlen mit 5 OpenMP-Thread(s) ist korrekt.
		4. Berechnung: 4.994193 s. Die 4. Berechnung der Primzahlen mit 5 OpenMP-Thread(s) ist korrekt.
		5. Berechnung: 5.069837 s. Die 5. Berechnung der Primzahlen mit 5 OpenMP-Thread(s) ist korrekt.
		6. Berechnung: 4.872238 s. Die 6. Berechnung der Primzahlen mit 5 OpenMP-Thread(s) ist korrekt.
		7. Berechnung: 4.824381 s. Die 7. Berechnung der Primzahlen mit 5 OpenMP-Thread(s) ist korrekt.
		8. Berechnung: 4.893374 s. Die 8. Berechnung der Primzahlen mit 5 OpenMP-Thread(s) ist korrekt.
		9. Berechnung: 4.734535 s. Die 9. Berechnung der Primzahlen mit 5 OpenMP-Thread(s) ist korrekt.
		10. Berechnung: 4.866614 s. Die 10. Berechnung der Primzahlen mit 5 OpenMP-Thread(s) ist korrekt.
		11. Berechnung: 5.184830 s. Die 11. Berechnung der Primzahlen mit 5 OpenMP-Thread(s) ist korrekt.
		12. Berechnung: 4.961004 s. Die 12. Berechnung der Primzahlen mit 5 OpenMP-Thread(s) ist korrekt.
		13. Berechnung: 4.958666 s. Die 13. Berechnung der Primzahlen mit 5 OpenMP-Thread(s) ist korrekt.
		14. Berechnung: 5.000689 s. Die 14. Berechnung der Primzahlen mit 5 OpenMP-Thread(s) ist korrekt.
		15. Berechnung: 5.095189 s. Die 15. Berechnung der Primzahlen mit 5 OpenMP-Thread(s) ist korrekt.
		16. Berechnung: 4.828996 s. Die 16. Berechnung der Primzahlen mit 5 OpenMP-Thread(s) ist korrekt.
		17. Berechnung: 5.013353 s. Die 17. Berechnung der Primzahlen mit 5 OpenMP-Thread(s) ist korrekt.
		18. Berechnung: 4.966113 s. Die 18. Berechnung der Primzahlen mit 5 OpenMP-Thread(s) ist korrekt.
		19. Berechnung: 4.875348 s. Die 19. Berechnung der Primzahlen mit 5 OpenMP-Thread(s) ist korrekt.
		20. Berechnung: 4.850287 s. Die 20. Berechnung der Primzahlen mit 5 OpenMP-Thread(s) ist korrekt.
		21. Berechnung: 4.787117 s. Die 21. Berechnung der Primzahlen mit 5 OpenMP-Thread(s) ist korrekt.
		22. Berechnung: 4.797994 s. Die 22. Berechnung der Primzahlen mit 5 OpenMP-Thread(s) ist korrekt.
		23. Berechnung: 5.015877 s. Die 23. Berechnung der Primzahlen mit 5 OpenMP-Thread(s) ist korrekt.
		24. Berechnung: 4.921821 s. Die 24. Berechnung der Primzahlen mit 5 OpenMP-Thread(s) ist korrekt.
		25. Berechnung: 4.999190 s. Die 25. Berechnung der Primzahlen mit 5 OpenMP-Thread(s) ist korrekt.
		26. Berechnung: 4.998806 s. Die 26. Berechnung der Primzahlen mit 5 OpenMP-Thread(s) ist korrekt.
		27. Berechnung: 4.774783 s. Die 27. Berechnung der Primzahlen mit 5 OpenMP-Thread(s) ist korrekt.
		28. Berechnung: 4.810957 s. Die 28. Berechnung der Primzahlen mit 5 OpenMP-Thread(s) ist korrekt.
		29. Berechnung: 4.785421 s. Die 29. Berechnung der Primzahlen mit 5 OpenMP-Thread(s) ist korrekt.
		30. Berechnung: 5.177610 s. Die 30. Berechnung der Primzahlen mit 5 OpenMP-Thread(s) ist korrekt.
		31. Berechnung: 4.783907 s. Die 31. Berechnung der Primzahlen mit 5 OpenMP-Thread(s) ist korrekt.
		32. Berechnung: 4.946124 s. Die 32. Berechnung der Primzahlen mit 5 OpenMP-Thread(s) ist korrekt.
		33. Berechnung: 4.840365 s. Die 33. Berechnung der Primzahlen mit 5 OpenMP-Thread(s) ist korrekt.
		34. Berechnung: 4.906235 s. Die 34. Berechnung der Primzahlen mit 5 OpenMP-Thread(s) ist korrekt.
		35. Berechnung: 4.839818 s. Die 35. Berechnung der Primzahlen mit 5 OpenMP-Thread(s) ist korrekt.
		36. Berechnung: 5.009597 s. Die 36. Berechnung der Primzahlen mit 5 OpenMP-Thread(s) ist korrekt.
		37. Berechnung: 5.223773 s. Die 37. Berechnung der Primzahlen mit 5 OpenMP-Thread(s) ist korrekt.
		38. Berechnung: 5.042100 s. Die 38. Berechnung der Primzahlen mit 5 OpenMP-Thread(s) ist korrekt.
		39. Berechnung: 4.794679 s. Die 39. Berechnung der Primzahlen mit 5 OpenMP-Thread(s) ist korrekt.
		40. Berechnung: 4.930811 s. Die 40. Berechnung der Primzahlen mit 5 OpenMP-Thread(s) ist korrekt.
		41. Berechnung: 5.052264 s. Die 41. Berechnung der Primzahlen mit 5 OpenMP-Thread(s) ist korrekt.
		42. Berechnung: 4.866566 s. Die 42. Berechnung der Primzahlen mit 5 OpenMP-Thread(s) ist korrekt.
		43. Berechnung: 4.749465 s. Die 43. Berechnung der Primzahlen mit 5 OpenMP-Thread(s) ist korrekt.
		44. Berechnung: 4.829286 s. Die 44. Berechnung der Primzahlen mit 5 OpenMP-Thread(s) ist korrekt.
		45. Berechnung: 5.051532 s. Die 45. Berechnung der Primzahlen mit 5 OpenMP-Thread(s) ist korrekt.
		46. Berechnung: 4.894164 s. Die 46. Berechnung der Primzahlen mit 5 OpenMP-Thread(s) ist korrekt.
		47. Berechnung: 4.811377 s. Die 47. Berechnung der Primzahlen mit 5 OpenMP-Thread(s) ist korrekt.
		48. Berechnung: 4.971261 s. Die 48. Berechnung der Primzahlen mit 5 OpenMP-Thread(s) ist korrekt.
		49. Berechnung: 4.962985 s. Die 49. Berechnung der Primzahlen mit 5 OpenMP-Thread(s) ist korrekt.
		50. Berechnung: 4.964524 s. Die 50. Berechnung der Primzahlen mit 5 OpenMP-Thread(s) ist korrekt.
		Durchschnittliche Ausfuehrungszeit des Programmes bei 50 Durchlaeufen mit 5 OpenMP-Thread(s): 4.927066 s. Alle berechneten Primzahlen mit 5 OpenMP-Thread(s) sind korrekt.
	Berechnung mittels 6 OpenMP-Thread(s):
		1. Berechnung: 4.601348 s. Die 1. Berechnung der Primzahlen mit 6 OpenMP-Thread(s) ist korrekt.
		2. Berechnung: 4.430535 s. Die 2. Berechnung der Primzahlen mit 6 OpenMP-Thread(s) ist korrekt.
		3. Berechnung: 4.398566 s. Die 3. Berechnung der Primzahlen mit 6 OpenMP-Thread(s) ist korrekt.
		4. Berechnung: 4.482187 s. Die 4. Berechnung der Primzahlen mit 6 OpenMP-Thread(s) ist korrekt.
		5. Berechnung: 4.280519 s. Die 5. Berechnung der Primzahlen mit 6 OpenMP-Thread(s) ist korrekt.
		6. Berechnung: 4.353839 s. Die 6. Berechnung der Primzahlen mit 6 OpenMP-Thread(s) ist korrekt.
		7. Berechnung: 4.414787 s. Die 7. Berechnung der Primzahlen mit 6 OpenMP-Thread(s) ist korrekt.
		8. Berechnung: 4.514872 s. Die 8. Berechnung der Primzahlen mit 6 OpenMP-Thread(s) ist korrekt.
		9. Berechnung: 4.262696 s. Die 9. Berechnung der Primzahlen mit 6 OpenMP-Thread(s) ist korrekt.
		10. Berechnung: 4.244837 s. Die 10. Berechnung der Primzahlen mit 6 OpenMP-Thread(s) ist korrekt.
		11. Berechnung: 4.409285 s. Die 11. Berechnung der Primzahlen mit 6 OpenMP-Thread(s) ist korrekt.
		12. Berechnung: 4.827415 s. Die 12. Berechnung der Primzahlen mit 6 OpenMP-Thread(s) ist korrekt.
		13. Berechnung: 4.447183 s. Die 13. Berechnung der Primzahlen mit 6 OpenMP-Thread(s) ist korrekt.
		14. Berechnung: 4.256767 s. Die 14. Berechnung der Primzahlen mit 6 OpenMP-Thread(s) ist korrekt.
		15. Berechnung: 4.223175 s. Die 15. Berechnung der Primzahlen mit 6 OpenMP-Thread(s) ist korrekt.
		16. Berechnung: 4.466086 s. Die 16. Berechnung der Primzahlen mit 6 OpenMP-Thread(s) ist korrekt.
		17. Berechnung: 4.464650 s. Die 17. Berechnung der Primzahlen mit 6 OpenMP-Thread(s) ist korrekt.
		18. Berechnung: 4.358846 s. Die 18. Berechnung der Primzahlen mit 6 OpenMP-Thread(s) ist korrekt.
		19. Berechnung: 4.961441 s. Die 19. Berechnung der Primzahlen mit 6 OpenMP-Thread(s) ist korrekt.
		20. Berechnung: 5.256530 s. Die 20. Berechnung der Primzahlen mit 6 OpenMP-Thread(s) ist korrekt.
		21. Berechnung: 4.920690 s. Die 21. Berechnung der Primzahlen mit 6 OpenMP-Thread(s) ist korrekt.
		22. Berechnung: 4.473701 s. Die 22. Berechnung der Primzahlen mit 6 OpenMP-Thread(s) ist korrekt.
		23. Berechnung: 4.360885 s. Die 23. Berechnung der Primzahlen mit 6 OpenMP-Thread(s) ist korrekt.
		24. Berechnung: 4.454950 s. Die 24. Berechnung der Primzahlen mit 6 OpenMP-Thread(s) ist korrekt.
		25. Berechnung: 4.407451 s. Die 25. Berechnung der Primzahlen mit 6 OpenMP-Thread(s) ist korrekt.
		26. Berechnung: 4.337987 s. Die 26. Berechnung der Primzahlen mit 6 OpenMP-Thread(s) ist korrekt.
		27. Berechnung: 4.465212 s. Die 27. Berechnung der Primzahlen mit 6 OpenMP-Thread(s) ist korrekt.
		28. Berechnung: 4.478943 s. Die 28. Berechnung der Primzahlen mit 6 OpenMP-Thread(s) ist korrekt.
		29. Berechnung: 4.531563 s. Die 29. Berechnung der Primzahlen mit 6 OpenMP-Thread(s) ist korrekt.
		30. Berechnung: 4.382728 s. Die 30. Berechnung der Primzahlen mit 6 OpenMP-Thread(s) ist korrekt.
		31. Berechnung: 4.579022 s. Die 31. Berechnung der Primzahlen mit 6 OpenMP-Thread(s) ist korrekt.
		32. Berechnung: 4.444876 s. Die 32. Berechnung der Primzahlen mit 6 OpenMP-Thread(s) ist korrekt.
		33. Berechnung: 4.349860 s. Die 33. Berechnung der Primzahlen mit 6 OpenMP-Thread(s) ist korrekt.
		34. Berechnung: 4.333012 s. Die 34. Berechnung der Primzahlen mit 6 OpenMP-Thread(s) ist korrekt.
		35. Berechnung: 4.635332 s. Die 35. Berechnung der Primzahlen mit 6 OpenMP-Thread(s) ist korrekt.
		36. Berechnung: 4.335000 s. Die 36. Berechnung der Primzahlen mit 6 OpenMP-Thread(s) ist korrekt.
		37. Berechnung: 4.776095 s. Die 37. Berechnung der Primzahlen mit 6 OpenMP-Thread(s) ist korrekt.
		38. Berechnung: 4.576392 s. Die 38. Berechnung der Primzahlen mit 6 OpenMP-Thread(s) ist korrekt.
		39. Berechnung: 4.596427 s. Die 39. Berechnung der Primzahlen mit 6 OpenMP-Thread(s) ist korrekt.
		40. Berechnung: 4.379699 s. Die 40. Berechnung der Primzahlen mit 6 OpenMP-Thread(s) ist korrekt.
		41. Berechnung: 4.493240 s. Die 41. Berechnung der Primzahlen mit 6 OpenMP-Thread(s) ist korrekt.
		42. Berechnung: 4.430461 s. Die 42. Berechnung der Primzahlen mit 6 OpenMP-Thread(s) ist korrekt.
		43. Berechnung: 4.301872 s. Die 43. Berechnung der Primzahlen mit 6 OpenMP-Thread(s) ist korrekt.
		44. Berechnung: 4.517714 s. Die 44. Berechnung der Primzahlen mit 6 OpenMP-Thread(s) ist korrekt.
		45. Berechnung: 4.270996 s. Die 45. Berechnung der Primzahlen mit 6 OpenMP-Thread(s) ist korrekt.
		46. Berechnung: 4.277520 s. Die 46. Berechnung der Primzahlen mit 6 OpenMP-Thread(s) ist korrekt.
		47. Berechnung: 4.586292 s. Die 47. Berechnung der Primzahlen mit 6 OpenMP-Thread(s) ist korrekt.
		48. Berechnung: 4.442233 s. Die 48. Berechnung der Primzahlen mit 6 OpenMP-Thread(s) ist korrekt.
		49. Berechnung: 4.502207 s. Die 49. Berechnung der Primzahlen mit 6 OpenMP-Thread(s) ist korrekt.
		50. Berechnung: 4.282366 s. Die 50. Berechnung der Primzahlen mit 6 OpenMP-Thread(s) ist korrekt.
		Durchschnittliche Ausfuehrungszeit des Programmes bei 50 Durchlaeufen mit 6 OpenMP-Thread(s): 4.471606 s. Alle berechneten Primzahlen mit 6 OpenMP-Thread(s) sind korrekt.
	Berechnung mittels 7 OpenMP-Thread(s):
		1. Berechnung: 4.339101 s. Die 1. Berechnung der Primzahlen mit 7 OpenMP-Thread(s) ist korrekt.
		2. Berechnung: 4.226363 s. Die 2. Berechnung der Primzahlen mit 7 OpenMP-Thread(s) ist korrekt.
		3. Berechnung: 4.188789 s. Die 3. Berechnung der Primzahlen mit 7 OpenMP-Thread(s) ist korrekt.
		4. Berechnung: 3.834225 s. Die 4. Berechnung der Primzahlen mit 7 OpenMP-Thread(s) ist korrekt.
		5. Berechnung: 4.353352 s. Die 5. Berechnung der Primzahlen mit 7 OpenMP-Thread(s) ist korrekt.
		6. Berechnung: 4.049805 s. Die 6. Berechnung der Primzahlen mit 7 OpenMP-Thread(s) ist korrekt.
		7. Berechnung: 4.016381 s. Die 7. Berechnung der Primzahlen mit 7 OpenMP-Thread(s) ist korrekt.
		8. Berechnung: 4.240851 s. Die 8. Berechnung der Primzahlen mit 7 OpenMP-Thread(s) ist korrekt.
		9. Berechnung: 4.088182 s. Die 9. Berechnung der Primzahlen mit 7 OpenMP-Thread(s) ist korrekt.
		10. Berechnung: 4.116461 s. Die 10. Berechnung der Primzahlen mit 7 OpenMP-Thread(s) ist korrekt.
		11. Berechnung: 4.409049 s. Die 11. Berechnung der Primzahlen mit 7 OpenMP-Thread(s) ist korrekt.
		12. Berechnung: 4.192767 s. Die 12. Berechnung der Primzahlen mit 7 OpenMP-Thread(s) ist korrekt.
		13. Berechnung: 4.138236 s. Die 13. Berechnung der Primzahlen mit 7 OpenMP-Thread(s) ist korrekt.
		14. Berechnung: 4.115959 s. Die 14. Berechnung der Primzahlen mit 7 OpenMP-Thread(s) ist korrekt.
		15. Berechnung: 4.020082 s. Die 15. Berechnung der Primzahlen mit 7 OpenMP-Thread(s) ist korrekt.
		16. Berechnung: 4.177100 s. Die 16. Berechnung der Primzahlen mit 7 OpenMP-Thread(s) ist korrekt.
		17. Berechnung: 3.952467 s. Die 17. Berechnung der Primzahlen mit 7 OpenMP-Thread(s) ist korrekt.
		18. Berechnung: 4.188339 s. Die 18. Berechnung der Primzahlen mit 7 OpenMP-Thread(s) ist korrekt.
		19. Berechnung: 4.114453 s. Die 19. Berechnung der Primzahlen mit 7 OpenMP-Thread(s) ist korrekt.
		20. Berechnung: 4.211498 s. Die 20. Berechnung der Primzahlen mit 7 OpenMP-Thread(s) ist korrekt.
		21. Berechnung: 4.160140 s. Die 21. Berechnung der Primzahlen mit 7 OpenMP-Thread(s) ist korrekt.
		22. Berechnung: 3.914294 s. Die 22. Berechnung der Primzahlen mit 7 OpenMP-Thread(s) ist korrekt.
		23. Berechnung: 4.180577 s. Die 23. Berechnung der Primzahlen mit 7 OpenMP-Thread(s) ist korrekt.
		24. Berechnung: 4.088346 s. Die 24. Berechnung der Primzahlen mit 7 OpenMP-Thread(s) ist korrekt.
		25. Berechnung: 4.116647 s. Die 25. Berechnung der Primzahlen mit 7 OpenMP-Thread(s) ist korrekt.
		26. Berechnung: 4.278826 s. Die 26. Berechnung der Primzahlen mit 7 OpenMP-Thread(s) ist korrekt.
		27. Berechnung: 4.259767 s. Die 27. Berechnung der Primzahlen mit 7 OpenMP-Thread(s) ist korrekt.
		28. Berechnung: 4.067958 s. Die 28. Berechnung der Primzahlen mit 7 OpenMP-Thread(s) ist korrekt.
		29. Berechnung: 4.382931 s. Die 29. Berechnung der Primzahlen mit 7 OpenMP-Thread(s) ist korrekt.
		30. Berechnung: 4.199647 s. Die 30. Berechnung der Primzahlen mit 7 OpenMP-Thread(s) ist korrekt.
		31. Berechnung: 3.909651 s. Die 31. Berechnung der Primzahlen mit 7 OpenMP-Thread(s) ist korrekt.
		32. Berechnung: 3.943847 s. Die 32. Berechnung der Primzahlen mit 7 OpenMP-Thread(s) ist korrekt.
		33. Berechnung: 4.176274 s. Die 33. Berechnung der Primzahlen mit 7 OpenMP-Thread(s) ist korrekt.
		34. Berechnung: 4.133837 s. Die 34. Berechnung der Primzahlen mit 7 OpenMP-Thread(s) ist korrekt.
		35. Berechnung: 4.084684 s. Die 35. Berechnung der Primzahlen mit 7 OpenMP-Thread(s) ist korrekt.
		36. Berechnung: 3.908685 s. Die 36. Berechnung der Primzahlen mit 7 OpenMP-Thread(s) ist korrekt.
		37. Berechnung: 3.984361 s. Die 37. Berechnung der Primzahlen mit 7 OpenMP-Thread(s) ist korrekt.
		38. Berechnung: 4.602095 s. Die 38. Berechnung der Primzahlen mit 7 OpenMP-Thread(s) ist korrekt.
		39. Berechnung: 4.254513 s. Die 39. Berechnung der Primzahlen mit 7 OpenMP-Thread(s) ist korrekt.
		40. Berechnung: 4.274549 s. Die 40. Berechnung der Primzahlen mit 7 OpenMP-Thread(s) ist korrekt.
		41. Berechnung: 4.079758 s. Die 41. Berechnung der Primzahlen mit 7 OpenMP-Thread(s) ist korrekt.
		42. Berechnung: 4.103521 s. Die 42. Berechnung der Primzahlen mit 7 OpenMP-Thread(s) ist korrekt.
		43. Berechnung: 4.280222 s. Die 43. Berechnung der Primzahlen mit 7 OpenMP-Thread(s) ist korrekt.
		44. Berechnung: 4.170656 s. Die 44. Berechnung der Primzahlen mit 7 OpenMP-Thread(s) ist korrekt.
		45. Berechnung: 4.067469 s. Die 45. Berechnung der Primzahlen mit 7 OpenMP-Thread(s) ist korrekt.
		46. Berechnung: 3.882654 s. Die 46. Berechnung der Primzahlen mit 7 OpenMP-Thread(s) ist korrekt.
		47. Berechnung: 4.024576 s. Die 47. Berechnung der Primzahlen mit 7 OpenMP-Thread(s) ist korrekt.
		48. Berechnung: 4.298255 s. Die 48. Berechnung der Primzahlen mit 7 OpenMP-Thread(s) ist korrekt.
		49. Berechnung: 4.172764 s. Die 49. Berechnung der Primzahlen mit 7 OpenMP-Thread(s) ist korrekt.
		50. Berechnung: 4.020860 s. Die 50. Berechnung der Primzahlen mit 7 OpenMP-Thread(s) ist korrekt.
		Durchschnittliche Ausfuehrungszeit des Programmes bei 50 Durchlaeufen mit 7 OpenMP-Thread(s): 4.139916 s. Alle berechneten Primzahlen mit 7 OpenMP-Thread(s) sind korrekt.
	Berechnung mittels 8 OpenMP-Thread(s):
		1. Berechnung: 4.106491 s. Die 1. Berechnung der Primzahlen mit 8 OpenMP-Thread(s) ist korrekt.
		2. Berechnung: 4.103497 s. Die 2. Berechnung der Primzahlen mit 8 OpenMP-Thread(s) ist korrekt.
		3. Berechnung: 4.149820 s. Die 3. Berechnung der Primzahlen mit 8 OpenMP-Thread(s) ist korrekt.
		4. Berechnung: 3.849646 s. Die 4. Berechnung der Primzahlen mit 8 OpenMP-Thread(s) ist korrekt.
		5. Berechnung: 3.807561 s. Die 5. Berechnung der Primzahlen mit 8 OpenMP-Thread(s) ist korrekt.
		6. Berechnung: 4.059791 s. Die 6. Berechnung der Primzahlen mit 8 OpenMP-Thread(s) ist korrekt.
		7. Berechnung: 3.932000 s. Die 7. Berechnung der Primzahlen mit 8 OpenMP-Thread(s) ist korrekt.
		8. Berechnung: 3.808027 s. Die 8. Berechnung der Primzahlen mit 8 OpenMP-Thread(s) ist korrekt.
		9. Berechnung: 3.697480 s. Die 9. Berechnung der Primzahlen mit 8 OpenMP-Thread(s) ist korrekt.
		10. Berechnung: 3.785778 s. Die 10. Berechnung der Primzahlen mit 8 OpenMP-Thread(s) ist korrekt.
		11. Berechnung: 3.953784 s. Die 11. Berechnung der Primzahlen mit 8 OpenMP-Thread(s) ist korrekt.
		12. Berechnung: 3.945677 s. Die 12. Berechnung der Primzahlen mit 8 OpenMP-Thread(s) ist korrekt.
		13. Berechnung: 4.048407 s. Die 13. Berechnung der Primzahlen mit 8 OpenMP-Thread(s) ist korrekt.
		14. Berechnung: 3.976298 s. Die 14. Berechnung der Primzahlen mit 8 OpenMP-Thread(s) ist korrekt.
		15. Berechnung: 4.096586 s. Die 15. Berechnung der Primzahlen mit 8 OpenMP-Thread(s) ist korrekt.
		16. Berechnung: 4.124139 s. Die 16. Berechnung der Primzahlen mit 8 OpenMP-Thread(s) ist korrekt.
		17. Berechnung: 3.749536 s. Die 17. Berechnung der Primzahlen mit 8 OpenMP-Thread(s) ist korrekt.
		18. Berechnung: 3.959187 s. Die 18. Berechnung der Primzahlen mit 8 OpenMP-Thread(s) ist korrekt.
		19. Berechnung: 3.992813 s. Die 19. Berechnung der Primzahlen mit 8 OpenMP-Thread(s) ist korrekt.
		20. Berechnung: 3.836202 s. Die 20. Berechnung der Primzahlen mit 8 OpenMP-Thread(s) ist korrekt.
		21. Berechnung: 3.840215 s. Die 21. Berechnung der Primzahlen mit 8 OpenMP-Thread(s) ist korrekt.
		22. Berechnung: 3.883960 s. Die 22. Berechnung der Primzahlen mit 8 OpenMP-Thread(s) ist korrekt.
		23. Berechnung: 3.695738 s. Die 23. Berechnung der Primzahlen mit 8 OpenMP-Thread(s) ist korrekt.
		24. Berechnung: 3.986001 s. Die 24. Berechnung der Primzahlen mit 8 OpenMP-Thread(s) ist korrekt.
		25. Berechnung: 4.080834 s. Die 25. Berechnung der Primzahlen mit 8 OpenMP-Thread(s) ist korrekt.
		26. Berechnung: 3.959849 s. Die 26. Berechnung der Primzahlen mit 8 OpenMP-Thread(s) ist korrekt.
		27. Berechnung: 3.985237 s. Die 27. Berechnung der Primzahlen mit 8 OpenMP-Thread(s) ist korrekt.
		28. Berechnung: 4.137829 s. Die 28. Berechnung der Primzahlen mit 8 OpenMP-Thread(s) ist korrekt.
		29. Berechnung: 4.153259 s. Die 29. Berechnung der Primzahlen mit 8 OpenMP-Thread(s) ist korrekt.
		30. Berechnung: 4.149870 s. Die 30. Berechnung der Primzahlen mit 8 OpenMP-Thread(s) ist korrekt.
		31. Berechnung: 4.062024 s. Die 31. Berechnung der Primzahlen mit 8 OpenMP-Thread(s) ist korrekt.
		32. Berechnung: 3.961281 s. Die 32. Berechnung der Primzahlen mit 8 OpenMP-Thread(s) ist korrekt.
		33. Berechnung: 3.987358 s. Die 33. Berechnung der Primzahlen mit 8 OpenMP-Thread(s) ist korrekt.
		34. Berechnung: 3.940481 s. Die 34. Berechnung der Primzahlen mit 8 OpenMP-Thread(s) ist korrekt.
		35. Berechnung: 3.977577 s. Die 35. Berechnung der Primzahlen mit 8 OpenMP-Thread(s) ist korrekt.
		36. Berechnung: 3.761121 s. Die 36. Berechnung der Primzahlen mit 8 OpenMP-Thread(s) ist korrekt.
		37. Berechnung: 3.924079 s. Die 37. Berechnung der Primzahlen mit 8 OpenMP-Thread(s) ist korrekt.
		38. Berechnung: 4.019979 s. Die 38. Berechnung der Primzahlen mit 8 OpenMP-Thread(s) ist korrekt.
		39. Berechnung: 4.014629 s. Die 39. Berechnung der Primzahlen mit 8 OpenMP-Thread(s) ist korrekt.
		40. Berechnung: 3.899066 s. Die 40. Berechnung der Primzahlen mit 8 OpenMP-Thread(s) ist korrekt.
		41. Berechnung: 3.925813 s. Die 41. Berechnung der Primzahlen mit 8 OpenMP-Thread(s) ist korrekt.
		42. Berechnung: 4.007972 s. Die 42. Berechnung der Primzahlen mit 8 OpenMP-Thread(s) ist korrekt.
		43. Berechnung: 3.918138 s. Die 43. Berechnung der Primzahlen mit 8 OpenMP-Thread(s) ist korrekt.
		44. Berechnung: 4.045933 s. Die 44. Berechnung der Primzahlen mit 8 OpenMP-Thread(s) ist korrekt.
		45. Berechnung: 3.965170 s. Die 45. Berechnung der Primzahlen mit 8 OpenMP-Thread(s) ist korrekt.
		46. Berechnung: 4.036462 s. Die 46. Berechnung der Primzahlen mit 8 OpenMP-Thread(s) ist korrekt.
		47. Berechnung: 3.884773 s. Die 47. Berechnung der Primzahlen mit 8 OpenMP-Thread(s) ist korrekt.
		48. Berechnung: 3.741041 s. Die 48. Berechnung der Primzahlen mit 8 OpenMP-Thread(s) ist korrekt.
		49. Berechnung: 3.960770 s. Die 49. Berechnung der Primzahlen mit 8 OpenMP-Thread(s) ist korrekt.
		50. Berechnung: 4.035183 s. Die 50. Berechnung der Primzahlen mit 8 OpenMP-Thread(s) ist korrekt.
		Durchschnittliche Ausfuehrungszeit des Programmes bei 50 Durchlaeufen mit 8 OpenMP-Thread(s): 3.958487 s. Alle berechneten Primzahlen mit 8 OpenMP-Thread(s) sind korrekt.
	Berechnung mittels 9 OpenMP-Thread(s):
		1. Berechnung: 4.035780 s. Die 1. Berechnung der Primzahlen mit 9 OpenMP-Thread(s) ist korrekt.
		2. Berechnung: 3.953905 s. Die 2. Berechnung der Primzahlen mit 9 OpenMP-Thread(s) ist korrekt.
		3. Berechnung: 3.693494 s. Die 3. Berechnung der Primzahlen mit 9 OpenMP-Thread(s) ist korrekt.
		4. Berechnung: 3.649858 s. Die 4. Berechnung der Primzahlen mit 9 OpenMP-Thread(s) ist korrekt.
		5. Berechnung: 4.097871 s. Die 5. Berechnung der Primzahlen mit 9 OpenMP-Thread(s) ist korrekt.
		6. Berechnung: 4.141506 s. Die 6. Berechnung der Primzahlen mit 9 OpenMP-Thread(s) ist korrekt.
		7. Berechnung: 3.741851 s. Die 7. Berechnung der Primzahlen mit 9 OpenMP-Thread(s) ist korrekt.
		8. Berechnung: 3.882400 s. Die 8. Berechnung der Primzahlen mit 9 OpenMP-Thread(s) ist korrekt.
		9. Berechnung: 4.021347 s. Die 9. Berechnung der Primzahlen mit 9 OpenMP-Thread(s) ist korrekt.
		10. Berechnung: 4.047527 s. Die 10. Berechnung der Primzahlen mit 9 OpenMP-Thread(s) ist korrekt.
		11. Berechnung: 3.719208 s. Die 11. Berechnung der Primzahlen mit 9 OpenMP-Thread(s) ist korrekt.
		12. Berechnung: 3.784079 s. Die 12. Berechnung der Primzahlen mit 9 OpenMP-Thread(s) ist korrekt.
		13. Berechnung: 3.975904 s. Die 13. Berechnung der Primzahlen mit 9 OpenMP-Thread(s) ist korrekt.
		14. Berechnung: 3.808239 s. Die 14. Berechnung der Primzahlen mit 9 OpenMP-Thread(s) ist korrekt.
		15. Berechnung: 3.974594 s. Die 15. Berechnung der Primzahlen mit 9 OpenMP-Thread(s) ist korrekt.
		16. Berechnung: 3.755011 s. Die 16. Berechnung der Primzahlen mit 9 OpenMP-Thread(s) ist korrekt.
		17. Berechnung: 3.906383 s. Die 17. Berechnung der Primzahlen mit 9 OpenMP-Thread(s) ist korrekt.
		18. Berechnung: 3.938533 s. Die 18. Berechnung der Primzahlen mit 9 OpenMP-Thread(s) ist korrekt.
		19. Berechnung: 3.893246 s. Die 19. Berechnung der Primzahlen mit 9 OpenMP-Thread(s) ist korrekt.
		20. Berechnung: 3.931592 s. Die 20. Berechnung der Primzahlen mit 9 OpenMP-Thread(s) ist korrekt.
		21. Berechnung: 3.978612 s. Die 21. Berechnung der Primzahlen mit 9 OpenMP-Thread(s) ist korrekt.
		22. Berechnung: 3.894044 s. Die 22. Berechnung der Primzahlen mit 9 OpenMP-Thread(s) ist korrekt.
		23. Berechnung: 3.960313 s. Die 23. Berechnung der Primzahlen mit 9 OpenMP-Thread(s) ist korrekt.
		24. Berechnung: 3.875531 s. Die 24. Berechnung der Primzahlen mit 9 OpenMP-Thread(s) ist korrekt.
		25. Berechnung: 3.873889 s. Die 25. Berechnung der Primzahlen mit 9 OpenMP-Thread(s) ist korrekt.
		26. Berechnung: 3.830805 s. Die 26. Berechnung der Primzahlen mit 9 OpenMP-Thread(s) ist korrekt.
		27. Berechnung: 3.857902 s. Die 27. Berechnung der Primzahlen mit 9 OpenMP-Thread(s) ist korrekt.
		28. Berechnung: 3.935223 s. Die 28. Berechnung der Primzahlen mit 9 OpenMP-Thread(s) ist korrekt.
		29. Berechnung: 3.892975 s. Die 29. Berechnung der Primzahlen mit 9 OpenMP-Thread(s) ist korrekt.
		30. Berechnung: 3.756898 s. Die 30. Berechnung der Primzahlen mit 9 OpenMP-Thread(s) ist korrekt.
		31. Berechnung: 3.656494 s. Die 31. Berechnung der Primzahlen mit 9 OpenMP-Thread(s) ist korrekt.
		32. Berechnung: 3.955740 s. Die 32. Berechnung der Primzahlen mit 9 OpenMP-Thread(s) ist korrekt.
		33. Berechnung: 3.849910 s. Die 33. Berechnung der Primzahlen mit 9 OpenMP-Thread(s) ist korrekt.
		34. Berechnung: 3.925185 s. Die 34. Berechnung der Primzahlen mit 9 OpenMP-Thread(s) ist korrekt.
		35. Berechnung: 3.851369 s. Die 35. Berechnung der Primzahlen mit 9 OpenMP-Thread(s) ist korrekt.
		36. Berechnung: 3.765940 s. Die 36. Berechnung der Primzahlen mit 9 OpenMP-Thread(s) ist korrekt.
		37. Berechnung: 3.865483 s. Die 37. Berechnung der Primzahlen mit 9 OpenMP-Thread(s) ist korrekt.
		38. Berechnung: 3.666496 s. Die 38. Berechnung der Primzahlen mit 9 OpenMP-Thread(s) ist korrekt.
		39. Berechnung: 3.837651 s. Die 39. Berechnung der Primzahlen mit 9 OpenMP-Thread(s) ist korrekt.
		40. Berechnung: 4.043662 s. Die 40. Berechnung der Primzahlen mit 9 OpenMP-Thread(s) ist korrekt.
		41. Berechnung: 3.947675 s. Die 41. Berechnung der Primzahlen mit 9 OpenMP-Thread(s) ist korrekt.
		42. Berechnung: 3.866651 s. Die 42. Berechnung der Primzahlen mit 9 OpenMP-Thread(s) ist korrekt.
		43. Berechnung: 3.682774 s. Die 43. Berechnung der Primzahlen mit 9 OpenMP-Thread(s) ist korrekt.
		44. Berechnung: 3.960309 s. Die 44. Berechnung der Primzahlen mit 9 OpenMP-Thread(s) ist korrekt.
		45. Berechnung: 3.824951 s. Die 45. Berechnung der Primzahlen mit 9 OpenMP-Thread(s) ist korrekt.
		46. Berechnung: 3.837739 s. Die 46. Berechnung der Primzahlen mit 9 OpenMP-Thread(s) ist korrekt.
		47. Berechnung: 3.838727 s. Die 47. Berechnung der Primzahlen mit 9 OpenMP-Thread(s) ist korrekt.
		48. Berechnung: 4.091534 s. Die 48. Berechnung der Primzahlen mit 9 OpenMP-Thread(s) ist korrekt.
		49. Berechnung: 3.925211 s. Die 49. Berechnung der Primzahlen mit 9 OpenMP-Thread(s) ist korrekt.
		50. Berechnung: 3.863400 s. Die 50. Berechnung der Primzahlen mit 9 OpenMP-Thread(s) ist korrekt.
		Durchschnittliche Ausfuehrungszeit des Programmes bei 50 Durchlaeufen mit 9 OpenMP-Thread(s): 3.881308 s. Alle berechneten Primzahlen mit 9 OpenMP-Thread(s) sind korrekt.
	Berechnung mittels 10 OpenMP-Thread(s):
		1. Berechnung: 3.813267 s. Die 1. Berechnung der Primzahlen mit 10 OpenMP-Thread(s) ist korrekt.
		2. Berechnung: 3.742828 s. Die 2. Berechnung der Primzahlen mit 10 OpenMP-Thread(s) ist korrekt.
		3. Berechnung: 3.782691 s. Die 3. Berechnung der Primzahlen mit 10 OpenMP-Thread(s) ist korrekt.
		4. Berechnung: 3.617003 s. Die 4. Berechnung der Primzahlen mit 10 OpenMP-Thread(s) ist korrekt.
		5. Berechnung: 3.956903 s. Die 5. Berechnung der Primzahlen mit 10 OpenMP-Thread(s) ist korrekt.
		6. Berechnung: 3.775604 s. Die 6. Berechnung der Primzahlen mit 10 OpenMP-Thread(s) ist korrekt.
		7. Berechnung: 3.801526 s. Die 7. Berechnung der Primzahlen mit 10 OpenMP-Thread(s) ist korrekt.
		8. Berechnung: 3.731060 s. Die 8. Berechnung der Primzahlen mit 10 OpenMP-Thread(s) ist korrekt.
		9. Berechnung: 3.861033 s. Die 9. Berechnung der Primzahlen mit 10 OpenMP-Thread(s) ist korrekt.
		10. Berechnung: 3.665754 s. Die 10. Berechnung der Primzahlen mit 10 OpenMP-Thread(s) ist korrekt.
		11. Berechnung: 3.794252 s. Die 11. Berechnung der Primzahlen mit 10 OpenMP-Thread(s) ist korrekt.
		12. Berechnung: 3.758898 s. Die 12. Berechnung der Primzahlen mit 10 OpenMP-Thread(s) ist korrekt.
		13. Berechnung: 3.899986 s. Die 13. Berechnung der Primzahlen mit 10 OpenMP-Thread(s) ist korrekt.
		14. Berechnung: 3.891953 s. Die 14. Berechnung der Primzahlen mit 10 OpenMP-Thread(s) ist korrekt.
		15. Berechnung: 3.782797 s. Die 15. Berechnung der Primzahlen mit 10 OpenMP-Thread(s) ist korrekt.
		16. Berechnung: 3.708735 s. Die 16. Berechnung der Primzahlen mit 10 OpenMP-Thread(s) ist korrekt.
		17. Berechnung: 3.831220 s. Die 17. Berechnung der Primzahlen mit 10 OpenMP-Thread(s) ist korrekt.
		18. Berechnung: 3.671497 s. Die 18. Berechnung der Primzahlen mit 10 OpenMP-Thread(s) ist korrekt.
		19. Berechnung: 3.719770 s. Die 19. Berechnung der Primzahlen mit 10 OpenMP-Thread(s) ist korrekt.
		20. Berechnung: 3.797772 s. Die 20. Berechnung der Primzahlen mit 10 OpenMP-Thread(s) ist korrekt.
		21. Berechnung: 3.724190 s. Die 21. Berechnung der Primzahlen mit 10 OpenMP-Thread(s) ist korrekt.
		22. Berechnung: 3.670196 s. Die 22. Berechnung der Primzahlen mit 10 OpenMP-Thread(s) ist korrekt.
		23. Berechnung: 3.771907 s. Die 23. Berechnung der Primzahlen mit 10 OpenMP-Thread(s) ist korrekt.
		24. Berechnung: 3.988183 s. Die 24. Berechnung der Primzahlen mit 10 OpenMP-Thread(s) ist korrekt.
		25. Berechnung: 3.775549 s. Die 25. Berechnung der Primzahlen mit 10 OpenMP-Thread(s) ist korrekt.
		26. Berechnung: 3.779228 s. Die 26. Berechnung der Primzahlen mit 10 OpenMP-Thread(s) ist korrekt.
		27. Berechnung: 3.772002 s. Die 27. Berechnung der Primzahlen mit 10 OpenMP-Thread(s) ist korrekt.
		28. Berechnung: 3.722418 s. Die 28. Berechnung der Primzahlen mit 10 OpenMP-Thread(s) ist korrekt.
		29. Berechnung: 3.620292 s. Die 29. Berechnung der Primzahlen mit 10 OpenMP-Thread(s) ist korrekt.
		30. Berechnung: 3.780013 s. Die 30. Berechnung der Primzahlen mit 10 OpenMP-Thread(s) ist korrekt.
		31. Berechnung: 3.732404 s. Die 31. Berechnung der Primzahlen mit 10 OpenMP-Thread(s) ist korrekt.
		32. Berechnung: 3.906403 s. Die 32. Berechnung der Primzahlen mit 10 OpenMP-Thread(s) ist korrekt.
		33. Berechnung: 3.806658 s. Die 33. Berechnung der Primzahlen mit 10 OpenMP-Thread(s) ist korrekt.
		34. Berechnung: 3.887436 s. Die 34. Berechnung der Primzahlen mit 10 OpenMP-Thread(s) ist korrekt.
		35. Berechnung: 3.929874 s. Die 35. Berechnung der Primzahlen mit 10 OpenMP-Thread(s) ist korrekt.
		36. Berechnung: 3.699638 s. Die 36. Berechnung der Primzahlen mit 10 OpenMP-Thread(s) ist korrekt.
		37. Berechnung: 3.839694 s. Die 37. Berechnung der Primzahlen mit 10 OpenMP-Thread(s) ist korrekt.
		38. Berechnung: 3.780739 s. Die 38. Berechnung der Primzahlen mit 10 OpenMP-Thread(s) ist korrekt.
		39. Berechnung: 3.844413 s. Die 39. Berechnung der Primzahlen mit 10 OpenMP-Thread(s) ist korrekt.
		40. Berechnung: 3.740296 s. Die 40. Berechnung der Primzahlen mit 10 OpenMP-Thread(s) ist korrekt.
		41. Berechnung: 3.673322 s. Die 41. Berechnung der Primzahlen mit 10 OpenMP-Thread(s) ist korrekt.
		42. Berechnung: 3.828422 s. Die 42. Berechnung der Primzahlen mit 10 OpenMP-Thread(s) ist korrekt.
		43. Berechnung: 3.729321 s. Die 43. Berechnung der Primzahlen mit 10 OpenMP-Thread(s) ist korrekt.
		44. Berechnung: 3.666229 s. Die 44. Berechnung der Primzahlen mit 10 OpenMP-Thread(s) ist korrekt.
		45. Berechnung: 3.879609 s. Die 45. Berechnung der Primzahlen mit 10 OpenMP-Thread(s) ist korrekt.
		46. Berechnung: 3.965842 s. Die 46. Berechnung der Primzahlen mit 10 OpenMP-Thread(s) ist korrekt.
		47. Berechnung: 3.796514 s. Die 47. Berechnung der Primzahlen mit 10 OpenMP-Thread(s) ist korrekt.
		48. Berechnung: 3.756495 s. Die 48. Berechnung der Primzahlen mit 10 OpenMP-Thread(s) ist korrekt.
		49. Berechnung: 3.725038 s. Die 49. Berechnung der Primzahlen mit 10 OpenMP-Thread(s) ist korrekt.
		50. Berechnung: 3.528999 s. Die 50. Berechnung der Primzahlen mit 10 OpenMP-Thread(s) ist korrekt.
		Durchschnittliche Ausfuehrungszeit des Programmes bei 50 Durchlaeufen mit 10 OpenMP-Thread(s): 3.778517 s. Alle berechneten Primzahlen mit 10 OpenMP-Thread(s) sind korrekt.
	Berechnung mittels 12 OpenMP-Thread(s):
		1. Berechnung: 3.781233 s. Die 1. Berechnung der Primzahlen mit 12 OpenMP-Thread(s) ist korrekt.
		2. Berechnung: 3.656209 s. Die 2. Berechnung der Primzahlen mit 12 OpenMP-Thread(s) ist korrekt.
		3. Berechnung: 3.813087 s. Die 3. Berechnung der Primzahlen mit 12 OpenMP-Thread(s) ist korrekt.
		4. Berechnung: 3.716935 s. Die 4. Berechnung der Primzahlen mit 12 OpenMP-Thread(s) ist korrekt.
		5. Berechnung: 3.686996 s. Die 5. Berechnung der Primzahlen mit 12 OpenMP-Thread(s) ist korrekt.
		6. Berechnung: 3.630519 s. Die 6. Berechnung der Primzahlen mit 12 OpenMP-Thread(s) ist korrekt.
		7. Berechnung: 3.579407 s. Die 7. Berechnung der Primzahlen mit 12 OpenMP-Thread(s) ist korrekt.
		8. Berechnung: 3.589015 s. Die 8. Berechnung der Primzahlen mit 12 OpenMP-Thread(s) ist korrekt.
		9. Berechnung: 3.738152 s. Die 9. Berechnung der Primzahlen mit 12 OpenMP-Thread(s) ist korrekt.
		10. Berechnung: 3.760908 s. Die 10. Berechnung der Primzahlen mit 12 OpenMP-Thread(s) ist korrekt.
		11. Berechnung: 3.509672 s. Die 11. Berechnung der Primzahlen mit 12 OpenMP-Thread(s) ist korrekt.
		12. Berechnung: 3.789459 s. Die 12. Berechnung der Primzahlen mit 12 OpenMP-Thread(s) ist korrekt.
		13. Berechnung: 3.714996 s. Die 13. Berechnung der Primzahlen mit 12 OpenMP-Thread(s) ist korrekt.
		14. Berechnung: 3.707212 s. Die 14. Berechnung der Primzahlen mit 12 OpenMP-Thread(s) ist korrekt.
		15. Berechnung: 3.826162 s. Die 15. Berechnung der Primzahlen mit 12 OpenMP-Thread(s) ist korrekt.
		16. Berechnung: 3.668001 s. Die 16. Berechnung der Primzahlen mit 12 OpenMP-Thread(s) ist korrekt.
		17. Berechnung: 3.794549 s. Die 17. Berechnung der Primzahlen mit 12 OpenMP-Thread(s) ist korrekt.
		18. Berechnung: 3.696810 s. Die 18. Berechnung der Primzahlen mit 12 OpenMP-Thread(s) ist korrekt.
		19. Berechnung: 3.756585 s. Die 19. Berechnung der Primzahlen mit 12 OpenMP-Thread(s) ist korrekt.
		20. Berechnung: 3.574125 s. Die 20. Berechnung der Primzahlen mit 12 OpenMP-Thread(s) ist korrekt.
		21. Berechnung: 3.609884 s. Die 21. Berechnung der Primzahlen mit 12 OpenMP-Thread(s) ist korrekt.
		22. Berechnung: 3.679062 s. Die 22. Berechnung der Primzahlen mit 12 OpenMP-Thread(s) ist korrekt.
		23. Berechnung: 3.757980 s. Die 23. Berechnung der Primzahlen mit 12 OpenMP-Thread(s) ist korrekt.
		24. Berechnung: 3.416121 s. Die 24. Berechnung der Primzahlen mit 12 OpenMP-Thread(s) ist korrekt.
		25. Berechnung: 3.698770 s. Die 25. Berechnung der Primzahlen mit 12 OpenMP-Thread(s) ist korrekt.
		26. Berechnung: 3.717308 s. Die 26. Berechnung der Primzahlen mit 12 OpenMP-Thread(s) ist korrekt.
		27. Berechnung: 3.532474 s. Die 27. Berechnung der Primzahlen mit 12 OpenMP-Thread(s) ist korrekt.
		28. Berechnung: 3.527380 s. Die 28. Berechnung der Primzahlen mit 12 OpenMP-Thread(s) ist korrekt.
		29. Berechnung: 3.672769 s. Die 29. Berechnung der Primzahlen mit 12 OpenMP-Thread(s) ist korrekt.
		30. Berechnung: 3.656351 s. Die 30. Berechnung der Primzahlen mit 12 OpenMP-Thread(s) ist korrekt.
		31. Berechnung: 3.685548 s. Die 31. Berechnung der Primzahlen mit 12 OpenMP-Thread(s) ist korrekt.
		32. Berechnung: 3.812512 s. Die 32. Berechnung der Primzahlen mit 12 OpenMP-Thread(s) ist korrekt.
		33. Berechnung: 3.740959 s. Die 33. Berechnung der Primzahlen mit 12 OpenMP-Thread(s) ist korrekt.
		34. Berechnung: 3.736686 s. Die 34. Berechnung der Primzahlen mit 12 OpenMP-Thread(s) ist korrekt.
		35. Berechnung: 3.603341 s. Die 35. Berechnung der Primzahlen mit 12 OpenMP-Thread(s) ist korrekt.
		36. Berechnung: 3.873100 s. Die 36. Berechnung der Primzahlen mit 12 OpenMP-Thread(s) ist korrekt.
		37. Berechnung: 3.721667 s. Die 37. Berechnung der Primzahlen mit 12 OpenMP-Thread(s) ist korrekt.
		38. Berechnung: 3.521608 s. Die 38. Berechnung der Primzahlen mit 12 OpenMP-Thread(s) ist korrekt.
		39. Berechnung: 3.732575 s. Die 39. Berechnung der Primzahlen mit 12 OpenMP-Thread(s) ist korrekt.
		40. Berechnung: 3.774992 s. Die 40. Berechnung der Primzahlen mit 12 OpenMP-Thread(s) ist korrekt.
		41. Berechnung: 3.779070 s. Die 41. Berechnung der Primzahlen mit 12 OpenMP-Thread(s) ist korrekt.
		42. Berechnung: 3.715395 s. Die 42. Berechnung der Primzahlen mit 12 OpenMP-Thread(s) ist korrekt.
		43. Berechnung: 3.607709 s. Die 43. Berechnung der Primzahlen mit 12 OpenMP-Thread(s) ist korrekt.
		44. Berechnung: 3.460145 s. Die 44. Berechnung der Primzahlen mit 12 OpenMP-Thread(s) ist korrekt.
		45. Berechnung: 3.704805 s. Die 45. Berechnung der Primzahlen mit 12 OpenMP-Thread(s) ist korrekt.
		46. Berechnung: 3.624740 s. Die 46. Berechnung der Primzahlen mit 12 OpenMP-Thread(s) ist korrekt.
		47. Berechnung: 3.678176 s. Die 47. Berechnung der Primzahlen mit 12 OpenMP-Thread(s) ist korrekt.
		48. Berechnung: 3.611200 s. Die 48. Berechnung der Primzahlen mit 12 OpenMP-Thread(s) ist korrekt.
		49. Berechnung: 3.616403 s. Die 49. Berechnung der Primzahlen mit 12 OpenMP-Thread(s) ist korrekt.
		50. Berechnung: 3.591882 s. Die 50. Berechnung der Primzahlen mit 12 OpenMP-Thread(s) ist korrekt.
		Durchschnittliche Ausfuehrungszeit des Programmes bei 50 Durchlaeufen mit 12 OpenMP-Thread(s): 3.677013 s. Alle berechneten Primzahlen mit 12 OpenMP-Thread(s) sind korrekt.
	Berechnung mittels 14 OpenMP-Thread(s):
		1. Berechnung: 3.560945 s. Die 1. Berechnung der Primzahlen mit 14 OpenMP-Thread(s) ist korrekt.
		2. Berechnung: 3.646772 s. Die 2. Berechnung der Primzahlen mit 14 OpenMP-Thread(s) ist korrekt.
		3. Berechnung: 3.580655 s. Die 3. Berechnung der Primzahlen mit 14 OpenMP-Thread(s) ist korrekt.
		4. Berechnung: 3.552790 s. Die 4. Berechnung der Primzahlen mit 14 OpenMP-Thread(s) ist korrekt.
		5. Berechnung: 3.581204 s. Die 5. Berechnung der Primzahlen mit 14 OpenMP-Thread(s) ist korrekt.
		6. Berechnung: 3.645880 s. Die 6. Berechnung der Primzahlen mit 14 OpenMP-Thread(s) ist korrekt.
		7. Berechnung: 3.559659 s. Die 7. Berechnung der Primzahlen mit 14 OpenMP-Thread(s) ist korrekt.
		8. Berechnung: 3.656749 s. Die 8. Berechnung der Primzahlen mit 14 OpenMP-Thread(s) ist korrekt.
		9. Berechnung: 3.595305 s. Die 9. Berechnung der Primzahlen mit 14 OpenMP-Thread(s) ist korrekt.
		10. Berechnung: 3.618305 s. Die 10. Berechnung der Primzahlen mit 14 OpenMP-Thread(s) ist korrekt.
		11. Berechnung: 3.622260 s. Die 11. Berechnung der Primzahlen mit 14 OpenMP-Thread(s) ist korrekt.
		12. Berechnung: 3.639801 s. Die 12. Berechnung der Primzahlen mit 14 OpenMP-Thread(s) ist korrekt.
		13. Berechnung: 3.631480 s. Die 13. Berechnung der Primzahlen mit 14 OpenMP-Thread(s) ist korrekt.
		14. Berechnung: 3.387523 s. Die 14. Berechnung der Primzahlen mit 14 OpenMP-Thread(s) ist korrekt.
		15. Berechnung: 3.707530 s. Die 15. Berechnung der Primzahlen mit 14 OpenMP-Thread(s) ist korrekt.
		16. Berechnung: 3.521579 s. Die 16. Berechnung der Primzahlen mit 14 OpenMP-Thread(s) ist korrekt.
		17. Berechnung: 3.413032 s. Die 17. Berechnung der Primzahlen mit 14 OpenMP-Thread(s) ist korrekt.
		18. Berechnung: 3.600306 s. Die 18. Berechnung der Primzahlen mit 14 OpenMP-Thread(s) ist korrekt.
		19. Berechnung: 3.691873 s. Die 19. Berechnung der Primzahlen mit 14 OpenMP-Thread(s) ist korrekt.
		20. Berechnung: 3.469125 s. Die 20. Berechnung der Primzahlen mit 14 OpenMP-Thread(s) ist korrekt.
		21. Berechnung: 3.640316 s. Die 21. Berechnung der Primzahlen mit 14 OpenMP-Thread(s) ist korrekt.
		22. Berechnung: 3.938058 s. Die 22. Berechnung der Primzahlen mit 14 OpenMP-Thread(s) ist korrekt.
		23. Berechnung: 4.093345 s. Die 23. Berechnung der Primzahlen mit 14 OpenMP-Thread(s) ist korrekt.
		24. Berechnung: 4.456358 s. Die 24. Berechnung der Primzahlen mit 14 OpenMP-Thread(s) ist korrekt.
		25. Berechnung: 4.562691 s. Die 25. Berechnung der Primzahlen mit 14 OpenMP-Thread(s) ist korrekt.
		26. Berechnung: 4.083476 s. Die 26. Berechnung der Primzahlen mit 14 OpenMP-Thread(s) ist korrekt.
		27. Berechnung: 3.554876 s. Die 27. Berechnung der Primzahlen mit 14 OpenMP-Thread(s) ist korrekt.
		28. Berechnung: 3.511206 s. Die 28. Berechnung der Primzahlen mit 14 OpenMP-Thread(s) ist korrekt.
		29. Berechnung: 3.645127 s. Die 29. Berechnung der Primzahlen mit 14 OpenMP-Thread(s) ist korrekt.
		30. Berechnung: 3.572983 s. Die 30. Berechnung der Primzahlen mit 14 OpenMP-Thread(s) ist korrekt.
		31. Berechnung: 3.576691 s. Die 31. Berechnung der Primzahlen mit 14 OpenMP-Thread(s) ist korrekt.
		32. Berechnung: 3.726103 s. Die 32. Berechnung der Primzahlen mit 14 OpenMP-Thread(s) ist korrekt.
		33. Berechnung: 3.519289 s. Die 33. Berechnung der Primzahlen mit 14 OpenMP-Thread(s) ist korrekt.
		34. Berechnung: 3.596642 s. Die 34. Berechnung der Primzahlen mit 14 OpenMP-Thread(s) ist korrekt.
		35. Berechnung: 3.518864 s. Die 35. Berechnung der Primzahlen mit 14 OpenMP-Thread(s) ist korrekt.
		36. Berechnung: 3.758825 s. Die 36. Berechnung der Primzahlen mit 14 OpenMP-Thread(s) ist korrekt.
		37. Berechnung: 3.610977 s. Die 37. Berechnung der Primzahlen mit 14 OpenMP-Thread(s) ist korrekt.
		38. Berechnung: 3.581237 s. Die 38. Berechnung der Primzahlen mit 14 OpenMP-Thread(s) ist korrekt.
		39. Berechnung: 3.653809 s. Die 39. Berechnung der Primzahlen mit 14 OpenMP-Thread(s) ist korrekt.
		40. Berechnung: 3.646621 s. Die 40. Berechnung der Primzahlen mit 14 OpenMP-Thread(s) ist korrekt.
		41. Berechnung: 3.662529 s. Die 41. Berechnung der Primzahlen mit 14 OpenMP-Thread(s) ist korrekt.
		42. Berechnung: 3.644542 s. Die 42. Berechnung der Primzahlen mit 14 OpenMP-Thread(s) ist korrekt.
		43. Berechnung: 3.561475 s. Die 43. Berechnung der Primzahlen mit 14 OpenMP-Thread(s) ist korrekt.
		44. Berechnung: 3.643575 s. Die 44. Berechnung der Primzahlen mit 14 OpenMP-Thread(s) ist korrekt.
		45. Berechnung: 3.585294 s. Die 45. Berechnung der Primzahlen mit 14 OpenMP-Thread(s) ist korrekt.
		46. Berechnung: 3.528173 s. Die 46. Berechnung der Primzahlen mit 14 OpenMP-Thread(s) ist korrekt.
		47. Berechnung: 3.427554 s. Die 47. Berechnung der Primzahlen mit 14 OpenMP-Thread(s) ist korrekt.
		48. Berechnung: 3.666194 s. Die 48. Berechnung der Primzahlen mit 14 OpenMP-Thread(s) ist korrekt.
		49. Berechnung: 3.621287 s. Die 49. Berechnung der Primzahlen mit 14 OpenMP-Thread(s) ist korrekt.
		50. Berechnung: 3.521048 s. Die 50. Berechnung der Primzahlen mit 14 OpenMP-Thread(s) ist korrekt.
		Durchschnittliche Ausfuehrungszeit des Programmes bei 50 Durchlaeufen mit 14 OpenMP-Thread(s): 3.655839 s. Alle berechneten Primzahlen mit 14 OpenMP-Thread(s) sind korrekt.
	Berechnung mittels 16 OpenMP-Thread(s):
		1. Berechnung: 3.520105 s. Die 1. Berechnung der Primzahlen mit 16 OpenMP-Thread(s) ist korrekt.
		2. Berechnung: 3.595687 s. Die 2. Berechnung der Primzahlen mit 16 OpenMP-Thread(s) ist korrekt.
		3. Berechnung: 3.619609 s. Die 3. Berechnung der Primzahlen mit 16 OpenMP-Thread(s) ist korrekt.
		4. Berechnung: 3.495785 s. Die 4. Berechnung der Primzahlen mit 16 OpenMP-Thread(s) ist korrekt.
		5. Berechnung: 3.532378 s. Die 5. Berechnung der Primzahlen mit 16 OpenMP-Thread(s) ist korrekt.
		6. Berechnung: 3.546854 s. Die 6. Berechnung der Primzahlen mit 16 OpenMP-Thread(s) ist korrekt.
		7. Berechnung: 3.473077 s. Die 7. Berechnung der Primzahlen mit 16 OpenMP-Thread(s) ist korrekt.
		8. Berechnung: 3.474293 s. Die 8. Berechnung der Primzahlen mit 16 OpenMP-Thread(s) ist korrekt.
		9. Berechnung: 3.661375 s. Die 9. Berechnung der Primzahlen mit 16 OpenMP-Thread(s) ist korrekt.
		10. Berechnung: 3.491891 s. Die 10. Berechnung der Primzahlen mit 16 OpenMP-Thread(s) ist korrekt.
		11. Berechnung: 3.517874 s. Die 11. Berechnung der Primzahlen mit 16 OpenMP-Thread(s) ist korrekt.
		12. Berechnung: 3.519975 s. Die 12. Berechnung der Primzahlen mit 16 OpenMP-Thread(s) ist korrekt.
		13. Berechnung: 3.580807 s. Die 13. Berechnung der Primzahlen mit 16 OpenMP-Thread(s) ist korrekt.
		14. Berechnung: 3.736486 s. Die 14. Berechnung der Primzahlen mit 16 OpenMP-Thread(s) ist korrekt.
		15. Berechnung: 3.582971 s. Die 15. Berechnung der Primzahlen mit 16 OpenMP-Thread(s) ist korrekt.
		16. Berechnung: 3.411358 s. Die 16. Berechnung der Primzahlen mit 16 OpenMP-Thread(s) ist korrekt.
		17. Berechnung: 3.563752 s. Die 17. Berechnung der Primzahlen mit 16 OpenMP-Thread(s) ist korrekt.
		18. Berechnung: 3.645229 s. Die 18. Berechnung der Primzahlen mit 16 OpenMP-Thread(s) ist korrekt.
		19. Berechnung: 3.564639 s. Die 19. Berechnung der Primzahlen mit 16 OpenMP-Thread(s) ist korrekt.
		20. Berechnung: 3.588666 s. Die 20. Berechnung der Primzahlen mit 16 OpenMP-Thread(s) ist korrekt.
		21. Berechnung: 3.634828 s. Die 21. Berechnung der Primzahlen mit 16 OpenMP-Thread(s) ist korrekt.
		22. Berechnung: 3.592004 s. Die 22. Berechnung der Primzahlen mit 16 OpenMP-Thread(s) ist korrekt.
		23. Berechnung: 3.581643 s. Die 23. Berechnung der Primzahlen mit 16 OpenMP-Thread(s) ist korrekt.
		24. Berechnung: 3.634762 s. Die 24. Berechnung der Primzahlen mit 16 OpenMP-Thread(s) ist korrekt.
		25. Berechnung: 3.619344 s. Die 25. Berechnung der Primzahlen mit 16 OpenMP-Thread(s) ist korrekt.
		26. Berechnung: 3.395805 s. Die 26. Berechnung der Primzahlen mit 16 OpenMP-Thread(s) ist korrekt.
		27. Berechnung: 3.576220 s. Die 27. Berechnung der Primzahlen mit 16 OpenMP-Thread(s) ist korrekt.
		28. Berechnung: 3.597275 s. Die 28. Berechnung der Primzahlen mit 16 OpenMP-Thread(s) ist korrekt.
		29. Berechnung: 3.525483 s. Die 29. Berechnung der Primzahlen mit 16 OpenMP-Thread(s) ist korrekt.
		30. Berechnung: 3.532977 s. Die 30. Berechnung der Primzahlen mit 16 OpenMP-Thread(s) ist korrekt.
		31. Berechnung: 3.451413 s. Die 31. Berechnung der Primzahlen mit 16 OpenMP-Thread(s) ist korrekt.
		32. Berechnung: 3.619838 s. Die 32. Berechnung der Primzahlen mit 16 OpenMP-Thread(s) ist korrekt.
		33. Berechnung: 3.559243 s. Die 33. Berechnung der Primzahlen mit 16 OpenMP-Thread(s) ist korrekt.
		34. Berechnung: 3.546841 s. Die 34. Berechnung der Primzahlen mit 16 OpenMP-Thread(s) ist korrekt.
		35. Berechnung: 3.455583 s. Die 35. Berechnung der Primzahlen mit 16 OpenMP-Thread(s) ist korrekt.
		36. Berechnung: 3.539390 s. Die 36. Berechnung der Primzahlen mit 16 OpenMP-Thread(s) ist korrekt.
		37. Berechnung: 3.438285 s. Die 37. Berechnung der Primzahlen mit 16 OpenMP-Thread(s) ist korrekt.
		38. Berechnung: 3.585748 s. Die 38. Berechnung der Primzahlen mit 16 OpenMP-Thread(s) ist korrekt.
		39. Berechnung: 3.573390 s. Die 39. Berechnung der Primzahlen mit 16 OpenMP-Thread(s) ist korrekt.
		40. Berechnung: 3.616421 s. Die 40. Berechnung der Primzahlen mit 16 OpenMP-Thread(s) ist korrekt.
		41. Berechnung: 3.481757 s. Die 41. Berechnung der Primzahlen mit 16 OpenMP-Thread(s) ist korrekt.
		42. Berechnung: 3.556733 s. Die 42. Berechnung der Primzahlen mit 16 OpenMP-Thread(s) ist korrekt.
		43. Berechnung: 3.578719 s. Die 43. Berechnung der Primzahlen mit 16 OpenMP-Thread(s) ist korrekt.
		44. Berechnung: 3.622275 s. Die 44. Berechnung der Primzahlen mit 16 OpenMP-Thread(s) ist korrekt.
		45. Berechnung: 3.503253 s. Die 45. Berechnung der Primzahlen mit 16 OpenMP-Thread(s) ist korrekt.
		46. Berechnung: 3.547112 s. Die 46. Berechnung der Primzahlen mit 16 OpenMP-Thread(s) ist korrekt.
		47. Berechnung: 3.508508 s. Die 47. Berechnung der Primzahlen mit 16 OpenMP-Thread(s) ist korrekt.
		48. Berechnung: 3.546690 s. Die 48. Berechnung der Primzahlen mit 16 OpenMP-Thread(s) ist korrekt.
		49. Berechnung: 3.509775 s. Die 49. Berechnung der Primzahlen mit 16 OpenMP-Thread(s) ist korrekt.
		50. Berechnung: 3.556468 s. Die 50. Berechnung der Primzahlen mit 16 OpenMP-Thread(s) ist korrekt.
		Durchschnittliche Ausfuehrungszeit des Programmes bei 50 Durchlaeufen mit 16 OpenMP-Thread(s): 3.552212 s. Alle berechneten Primzahlen mit 16 OpenMP-Thread(s) sind korrekt.
	Berechnung mittels 18 OpenMP-Thread(s):
		1. Berechnung: 3.536334 s. Die 1. Berechnung der Primzahlen mit 18 OpenMP-Thread(s) ist korrekt.
		2. Berechnung: 3.491350 s. Die 2. Berechnung der Primzahlen mit 18 OpenMP-Thread(s) ist korrekt.
		3. Berechnung: 3.412391 s. Die 3. Berechnung der Primzahlen mit 18 OpenMP-Thread(s) ist korrekt.
		4. Berechnung: 3.598331 s. Die 4. Berechnung der Primzahlen mit 18 OpenMP-Thread(s) ist korrekt.
		5. Berechnung: 3.477697 s. Die 5. Berechnung der Primzahlen mit 18 OpenMP-Thread(s) ist korrekt.
		6. Berechnung: 3.628078 s. Die 6. Berechnung der Primzahlen mit 18 OpenMP-Thread(s) ist korrekt.
		7. Berechnung: 3.499086 s. Die 7. Berechnung der Primzahlen mit 18 OpenMP-Thread(s) ist korrekt.
		8. Berechnung: 3.559163 s. Die 8. Berechnung der Primzahlen mit 18 OpenMP-Thread(s) ist korrekt.
		9. Berechnung: 3.550552 s. Die 9. Berechnung der Primzahlen mit 18 OpenMP-Thread(s) ist korrekt.
		10. Berechnung: 3.449088 s. Die 10. Berechnung der Primzahlen mit 18 OpenMP-Thread(s) ist korrekt.
		11. Berechnung: 3.580401 s. Die 11. Berechnung der Primzahlen mit 18 OpenMP-Thread(s) ist korrekt.
		12. Berechnung: 3.528784 s. Die 12. Berechnung der Primzahlen mit 18 OpenMP-Thread(s) ist korrekt.
		13. Berechnung: 3.368546 s. Die 13. Berechnung der Primzahlen mit 18 OpenMP-Thread(s) ist korrekt.
		14. Berechnung: 3.613473 s. Die 14. Berechnung der Primzahlen mit 18 OpenMP-Thread(s) ist korrekt.
		15. Berechnung: 3.475892 s. Die 15. Berechnung der Primzahlen mit 18 OpenMP-Thread(s) ist korrekt.
		16. Berechnung: 3.634026 s. Die 16. Berechnung der Primzahlen mit 18 OpenMP-Thread(s) ist korrekt.
		17. Berechnung: 3.510013 s. Die 17. Berechnung der Primzahlen mit 18 OpenMP-Thread(s) ist korrekt.
		18. Berechnung: 3.531402 s. Die 18. Berechnung der Primzahlen mit 18 OpenMP-Thread(s) ist korrekt.
		19. Berechnung: 3.475973 s. Die 19. Berechnung der Primzahlen mit 18 OpenMP-Thread(s) ist korrekt.
		20. Berechnung: 3.526025 s. Die 20. Berechnung der Primzahlen mit 18 OpenMP-Thread(s) ist korrekt.
		21. Berechnung: 3.622870 s. Die 21. Berechnung der Primzahlen mit 18 OpenMP-Thread(s) ist korrekt.
		22. Berechnung: 3.513632 s. Die 22. Berechnung der Primzahlen mit 18 OpenMP-Thread(s) ist korrekt.
		23. Berechnung: 3.521836 s. Die 23. Berechnung der Primzahlen mit 18 OpenMP-Thread(s) ist korrekt.
		24. Berechnung: 3.658571 s. Die 24. Berechnung der Primzahlen mit 18 OpenMP-Thread(s) ist korrekt.
		25. Berechnung: 3.528016 s. Die 25. Berechnung der Primzahlen mit 18 OpenMP-Thread(s) ist korrekt.
		26. Berechnung: 3.488064 s. Die 26. Berechnung der Primzahlen mit 18 OpenMP-Thread(s) ist korrekt.
		27. Berechnung: 3.593770 s. Die 27. Berechnung der Primzahlen mit 18 OpenMP-Thread(s) ist korrekt.
		28. Berechnung: 3.434459 s. Die 28. Berechnung der Primzahlen mit 18 OpenMP-Thread(s) ist korrekt.
		29. Berechnung: 3.528568 s. Die 29. Berechnung der Primzahlen mit 18 OpenMP-Thread(s) ist korrekt.
		30. Berechnung: 3.513007 s. Die 30. Berechnung der Primzahlen mit 18 OpenMP-Thread(s) ist korrekt.
		31. Berechnung: 3.408407 s. Die 31. Berechnung der Primzahlen mit 18 OpenMP-Thread(s) ist korrekt.
		32. Berechnung: 3.589739 s. Die 32. Berechnung der Primzahlen mit 18 OpenMP-Thread(s) ist korrekt.
		33. Berechnung: 3.569570 s. Die 33. Berechnung der Primzahlen mit 18 OpenMP-Thread(s) ist korrekt.
		34. Berechnung: 3.414440 s. Die 34. Berechnung der Primzahlen mit 18 OpenMP-Thread(s) ist korrekt.
		35. Berechnung: 3.580263 s. Die 35. Berechnung der Primzahlen mit 18 OpenMP-Thread(s) ist korrekt.
		36. Berechnung: 3.547728 s. Die 36. Berechnung der Primzahlen mit 18 OpenMP-Thread(s) ist korrekt.
		37. Berechnung: 3.482474 s. Die 37. Berechnung der Primzahlen mit 18 OpenMP-Thread(s) ist korrekt.
		38. Berechnung: 3.506805 s. Die 38. Berechnung der Primzahlen mit 18 OpenMP-Thread(s) ist korrekt.
		39. Berechnung: 3.564103 s. Die 39. Berechnung der Primzahlen mit 18 OpenMP-Thread(s) ist korrekt.
		40. Berechnung: 3.515267 s. Die 40. Berechnung der Primzahlen mit 18 OpenMP-Thread(s) ist korrekt.
		41. Berechnung: 3.629257 s. Die 41. Berechnung der Primzahlen mit 18 OpenMP-Thread(s) ist korrekt.
		42. Berechnung: 3.551209 s. Die 42. Berechnung der Primzahlen mit 18 OpenMP-Thread(s) ist korrekt.
		43. Berechnung: 3.455180 s. Die 43. Berechnung der Primzahlen mit 18 OpenMP-Thread(s) ist korrekt.
		44. Berechnung: 3.545652 s. Die 44. Berechnung der Primzahlen mit 18 OpenMP-Thread(s) ist korrekt.
		45. Berechnung: 3.521314 s. Die 45. Berechnung der Primzahlen mit 18 OpenMP-Thread(s) ist korrekt.
		46. Berechnung: 3.429038 s. Die 46. Berechnung der Primzahlen mit 18 OpenMP-Thread(s) ist korrekt.
		47. Berechnung: 3.540942 s. Die 47. Berechnung der Primzahlen mit 18 OpenMP-Thread(s) ist korrekt.
		48. Berechnung: 3.578918 s. Die 48. Berechnung der Primzahlen mit 18 OpenMP-Thread(s) ist korrekt.
		49. Berechnung: 3.543722 s. Die 49. Berechnung der Primzahlen mit 18 OpenMP-Thread(s) ist korrekt.
		50. Berechnung: 3.524894 s. Die 50. Berechnung der Primzahlen mit 18 OpenMP-Thread(s) ist korrekt.
		Durchschnittliche Ausfuehrungszeit des Programmes bei 50 Durchlaeufen mit 18 OpenMP-Thread(s): 3.526966 s. Alle berechneten Primzahlen mit 18 OpenMP-Thread(s) sind korrekt.
	Berechnung mittels 20 OpenMP-Thread(s):
		1. Berechnung: 3.577151 s. Die 1. Berechnung der Primzahlen mit 20 OpenMP-Thread(s) ist korrekt.
		2. Berechnung: 3.421399 s. Die 2. Berechnung der Primzahlen mit 20 OpenMP-Thread(s) ist korrekt.
		3. Berechnung: 3.458593 s. Die 3. Berechnung der Primzahlen mit 20 OpenMP-Thread(s) ist korrekt.
		4. Berechnung: 3.553942 s. Die 4. Berechnung der Primzahlen mit 20 OpenMP-Thread(s) ist korrekt.
		5. Berechnung: 3.424020 s. Die 5. Berechnung der Primzahlen mit 20 OpenMP-Thread(s) ist korrekt.
		6. Berechnung: 3.460492 s. Die 6. Berechnung der Primzahlen mit 20 OpenMP-Thread(s) ist korrekt.
		7. Berechnung: 3.589573 s. Die 7. Berechnung der Primzahlen mit 20 OpenMP-Thread(s) ist korrekt.
		8. Berechnung: 3.624766 s. Die 8. Berechnung der Primzahlen mit 20 OpenMP-Thread(s) ist korrekt.
		9. Berechnung: 3.354479 s. Die 9. Berechnung der Primzahlen mit 20 OpenMP-Thread(s) ist korrekt.
		10. Berechnung: 3.662742 s. Die 10. Berechnung der Primzahlen mit 20 OpenMP-Thread(s) ist korrekt.
		11. Berechnung: 3.492913 s. Die 11. Berechnung der Primzahlen mit 20 OpenMP-Thread(s) ist korrekt.
		12. Berechnung: 3.482103 s. Die 12. Berechnung der Primzahlen mit 20 OpenMP-Thread(s) ist korrekt.
		13. Berechnung: 3.513064 s. Die 13. Berechnung der Primzahlen mit 20 OpenMP-Thread(s) ist korrekt.
		14. Berechnung: 3.512277 s. Die 14. Berechnung der Primzahlen mit 20 OpenMP-Thread(s) ist korrekt.
		15. Berechnung: 3.464704 s. Die 15. Berechnung der Primzahlen mit 20 OpenMP-Thread(s) ist korrekt.
		16. Berechnung: 3.507722 s. Die 16. Berechnung der Primzahlen mit 20 OpenMP-Thread(s) ist korrekt.
		17. Berechnung: 3.515248 s. Die 17. Berechnung der Primzahlen mit 20 OpenMP-Thread(s) ist korrekt.
		18. Berechnung: 3.484706 s. Die 18. Berechnung der Primzahlen mit 20 OpenMP-Thread(s) ist korrekt.
		19. Berechnung: 3.555967 s. Die 19. Berechnung der Primzahlen mit 20 OpenMP-Thread(s) ist korrekt.
		20. Berechnung: 3.586335 s. Die 20. Berechnung der Primzahlen mit 20 OpenMP-Thread(s) ist korrekt.
		21. Berechnung: 3.420144 s. Die 21. Berechnung der Primzahlen mit 20 OpenMP-Thread(s) ist korrekt.
		22. Berechnung: 3.601355 s. Die 22. Berechnung der Primzahlen mit 20 OpenMP-Thread(s) ist korrekt.
		23. Berechnung: 3.516200 s. Die 23. Berechnung der Primzahlen mit 20 OpenMP-Thread(s) ist korrekt.
		24. Berechnung: 3.453434 s. Die 24. Berechnung der Primzahlen mit 20 OpenMP-Thread(s) ist korrekt.
		25. Berechnung: 3.437030 s. Die 25. Berechnung der Primzahlen mit 20 OpenMP-Thread(s) ist korrekt.
		26. Berechnung: 3.582760 s. Die 26. Berechnung der Primzahlen mit 20 OpenMP-Thread(s) ist korrekt.
		27. Berechnung: 3.547460 s. Die 27. Berechnung der Primzahlen mit 20 OpenMP-Thread(s) ist korrekt.
		28. Berechnung: 3.489265 s. Die 28. Berechnung der Primzahlen mit 20 OpenMP-Thread(s) ist korrekt.
		29. Berechnung: 3.558913 s. Die 29. Berechnung der Primzahlen mit 20 OpenMP-Thread(s) ist korrekt.
		30. Berechnung: 3.440049 s. Die 30. Berechnung der Primzahlen mit 20 OpenMP-Thread(s) ist korrekt.
		31. Berechnung: 3.562316 s. Die 31. Berechnung der Primzahlen mit 20 OpenMP-Thread(s) ist korrekt.
		32. Berechnung: 3.638435 s. Die 32. Berechnung der Primzahlen mit 20 OpenMP-Thread(s) ist korrekt.
		33. Berechnung: 3.561271 s. Die 33. Berechnung der Primzahlen mit 20 OpenMP-Thread(s) ist korrekt.
		34. Berechnung: 3.554771 s. Die 34. Berechnung der Primzahlen mit 20 OpenMP-Thread(s) ist korrekt.
		35. Berechnung: 3.586466 s. Die 35. Berechnung der Primzahlen mit 20 OpenMP-Thread(s) ist korrekt.
		36. Berechnung: 3.434211 s. Die 36. Berechnung der Primzahlen mit 20 OpenMP-Thread(s) ist korrekt.
		37. Berechnung: 3.534477 s. Die 37. Berechnung der Primzahlen mit 20 OpenMP-Thread(s) ist korrekt.
		38. Berechnung: 3.612503 s. Die 38. Berechnung der Primzahlen mit 20 OpenMP-Thread(s) ist korrekt.
		39. Berechnung: 3.493946 s. Die 39. Berechnung der Primzahlen mit 20 OpenMP-Thread(s) ist korrekt.
		40. Berechnung: 3.563042 s. Die 40. Berechnung der Primzahlen mit 20 OpenMP-Thread(s) ist korrekt.
		41. Berechnung: 3.726065 s. Die 41. Berechnung der Primzahlen mit 20 OpenMP-Thread(s) ist korrekt.
		42. Berechnung: 3.465031 s. Die 42. Berechnung der Primzahlen mit 20 OpenMP-Thread(s) ist korrekt.
		43. Berechnung: 3.554118 s. Die 43. Berechnung der Primzahlen mit 20 OpenMP-Thread(s) ist korrekt.
		44. Berechnung: 3.516432 s. Die 44. Berechnung der Primzahlen mit 20 OpenMP-Thread(s) ist korrekt.
		45. Berechnung: 3.586916 s. Die 45. Berechnung der Primzahlen mit 20 OpenMP-Thread(s) ist korrekt.
		46. Berechnung: 3.496736 s. Die 46. Berechnung der Primzahlen mit 20 OpenMP-Thread(s) ist korrekt.
		47. Berechnung: 3.531652 s. Die 47. Berechnung der Primzahlen mit 20 OpenMP-Thread(s) ist korrekt.
		48. Berechnung: 3.509248 s. Die 48. Berechnung der Primzahlen mit 20 OpenMP-Thread(s) ist korrekt.
		49. Berechnung: 3.418179 s. Die 49. Berechnung der Primzahlen mit 20 OpenMP-Thread(s) ist korrekt.
		50. Berechnung: 3.580711 s. Die 50. Berechnung der Primzahlen mit 20 OpenMP-Thread(s) ist korrekt.
		Durchschnittliche Ausfuehrungszeit des Programmes bei 50 Durchlaeufen mit 20 OpenMP-Thread(s): 3.524307 s. Alle berechneten Primzahlen mit 20 OpenMP-Thread(s) sind korrekt.
	Berechnung mittels 22 OpenMP-Thread(s):
		1. Berechnung: 3.448953 s. Die 1. Berechnung der Primzahlen mit 22 OpenMP-Thread(s) ist korrekt.
		2. Berechnung: 3.474771 s. Die 2. Berechnung der Primzahlen mit 22 OpenMP-Thread(s) ist korrekt.
		3. Berechnung: 3.493620 s. Die 3. Berechnung der Primzahlen mit 22 OpenMP-Thread(s) ist korrekt.
		4. Berechnung: 3.592387 s. Die 4. Berechnung der Primzahlen mit 22 OpenMP-Thread(s) ist korrekt.
		5. Berechnung: 3.382365 s. Die 5. Berechnung der Primzahlen mit 22 OpenMP-Thread(s) ist korrekt.
		6. Berechnung: 3.549593 s. Die 6. Berechnung der Primzahlen mit 22 OpenMP-Thread(s) ist korrekt.
		7. Berechnung: 3.497545 s. Die 7. Berechnung der Primzahlen mit 22 OpenMP-Thread(s) ist korrekt.
		8. Berechnung: 3.436053 s. Die 8. Berechnung der Primzahlen mit 22 OpenMP-Thread(s) ist korrekt.
		9. Berechnung: 3.502351 s. Die 9. Berechnung der Primzahlen mit 22 OpenMP-Thread(s) ist korrekt.
		10. Berechnung: 3.536954 s. Die 10. Berechnung der Primzahlen mit 22 OpenMP-Thread(s) ist korrekt.
		11. Berechnung: 3.373826 s. Die 11. Berechnung der Primzahlen mit 22 OpenMP-Thread(s) ist korrekt.
		12. Berechnung: 3.520324 s. Die 12. Berechnung der Primzahlen mit 22 OpenMP-Thread(s) ist korrekt.
		13. Berechnung: 3.466636 s. Die 13. Berechnung der Primzahlen mit 22 OpenMP-Thread(s) ist korrekt.
		14. Berechnung: 3.473249 s. Die 14. Berechnung der Primzahlen mit 22 OpenMP-Thread(s) ist korrekt.
		15. Berechnung: 3.556200 s. Die 15. Berechnung der Primzahlen mit 22 OpenMP-Thread(s) ist korrekt.
		16. Berechnung: 3.485511 s. Die 16. Berechnung der Primzahlen mit 22 OpenMP-Thread(s) ist korrekt.
		17. Berechnung: 3.398280 s. Die 17. Berechnung der Primzahlen mit 22 OpenMP-Thread(s) ist korrekt.
		18. Berechnung: 3.662985 s. Die 18. Berechnung der Primzahlen mit 22 OpenMP-Thread(s) ist korrekt.
		19. Berechnung: 3.505197 s. Die 19. Berechnung der Primzahlen mit 22 OpenMP-Thread(s) ist korrekt.
		20. Berechnung: 3.386303 s. Die 20. Berechnung der Primzahlen mit 22 OpenMP-Thread(s) ist korrekt.
		21. Berechnung: 3.518271 s. Die 21. Berechnung der Primzahlen mit 22 OpenMP-Thread(s) ist korrekt.
		22. Berechnung: 3.512910 s. Die 22. Berechnung der Primzahlen mit 22 OpenMP-Thread(s) ist korrekt.
		23. Berechnung: 3.444680 s. Die 23. Berechnung der Primzahlen mit 22 OpenMP-Thread(s) ist korrekt.
		24. Berechnung: 3.564664 s. Die 24. Berechnung der Primzahlen mit 22 OpenMP-Thread(s) ist korrekt.
		25. Berechnung: 3.502740 s. Die 25. Berechnung der Primzahlen mit 22 OpenMP-Thread(s) ist korrekt.
		26. Berechnung: 3.488679 s. Die 26. Berechnung der Primzahlen mit 22 OpenMP-Thread(s) ist korrekt.
		27. Berechnung: 3.534498 s. Die 27. Berechnung der Primzahlen mit 22 OpenMP-Thread(s) ist korrekt.
		28. Berechnung: 3.581629 s. Die 28. Berechnung der Primzahlen mit 22 OpenMP-Thread(s) ist korrekt.
		29. Berechnung: 3.432044 s. Die 29. Berechnung der Primzahlen mit 22 OpenMP-Thread(s) ist korrekt.
		30. Berechnung: 3.493800 s. Die 30. Berechnung der Primzahlen mit 22 OpenMP-Thread(s) ist korrekt.
		31. Berechnung: 3.452662 s. Die 31. Berechnung der Primzahlen mit 22 OpenMP-Thread(s) ist korrekt.
		32. Berechnung: 3.399621 s. Die 32. Berechnung der Primzahlen mit 22 OpenMP-Thread(s) ist korrekt.
		33. Berechnung: 3.517811 s. Die 33. Berechnung der Primzahlen mit 22 OpenMP-Thread(s) ist korrekt.
		34. Berechnung: 3.559389 s. Die 34. Berechnung der Primzahlen mit 22 OpenMP-Thread(s) ist korrekt.
		35. Berechnung: 3.493206 s. Die 35. Berechnung der Primzahlen mit 22 OpenMP-Thread(s) ist korrekt.
		36. Berechnung: 3.486467 s. Die 36. Berechnung der Primzahlen mit 22 OpenMP-Thread(s) ist korrekt.
		37. Berechnung: 3.585005 s. Die 37. Berechnung der Primzahlen mit 22 OpenMP-Thread(s) ist korrekt.
		38. Berechnung: 3.425389 s. Die 38. Berechnung der Primzahlen mit 22 OpenMP-Thread(s) ist korrekt.
		39. Berechnung: 3.544312 s. Die 39. Berechnung der Primzahlen mit 22 OpenMP-Thread(s) ist korrekt.
		40. Berechnung: 3.570702 s. Die 40. Berechnung der Primzahlen mit 22 OpenMP-Thread(s) ist korrekt.
		41. Berechnung: 3.491366 s. Die 41. Berechnung der Primzahlen mit 22 OpenMP-Thread(s) ist korrekt.
		42. Berechnung: 3.582916 s. Die 42. Berechnung der Primzahlen mit 22 OpenMP-Thread(s) ist korrekt.
		43. Berechnung: 3.503534 s. Die 43. Berechnung der Primzahlen mit 22 OpenMP-Thread(s) ist korrekt.
		44. Berechnung: 3.456230 s. Die 44. Berechnung der Primzahlen mit 22 OpenMP-Thread(s) ist korrekt.
		45. Berechnung: 3.491744 s. Die 45. Berechnung der Primzahlen mit 22 OpenMP-Thread(s) ist korrekt.
		46. Berechnung: 3.463848 s. Die 46. Berechnung der Primzahlen mit 22 OpenMP-Thread(s) ist korrekt.
		47. Berechnung: 3.407636 s. Die 47. Berechnung der Primzahlen mit 22 OpenMP-Thread(s) ist korrekt.
		48. Berechnung: 3.509759 s. Die 48. Berechnung der Primzahlen mit 22 OpenMP-Thread(s) ist korrekt.
		49. Berechnung: 3.543176 s. Die 49. Berechnung der Primzahlen mit 22 OpenMP-Thread(s) ist korrekt.
		50. Berechnung: 3.432068 s. Die 50. Berechnung der Primzahlen mit 22 OpenMP-Thread(s) ist korrekt.
		Durchschnittliche Ausfuehrungszeit des Programmes bei 50 Durchlaeufen mit 22 OpenMP-Thread(s): 3.494677 s. Alle berechneten Primzahlen mit 22 OpenMP-Thread(s) sind korrekt.
	Berechnung mittels 24 OpenMP-Thread(s):
		1. Berechnung: 3.542431 s. Die 1. Berechnung der Primzahlen mit 24 OpenMP-Thread(s) ist korrekt.
		2. Berechnung: 3.521112 s. Die 2. Berechnung der Primzahlen mit 24 OpenMP-Thread(s) ist korrekt.
		3. Berechnung: 3.434729 s. Die 3. Berechnung der Primzahlen mit 24 OpenMP-Thread(s) ist korrekt.
		4. Berechnung: 3.473150 s. Die 4. Berechnung der Primzahlen mit 24 OpenMP-Thread(s) ist korrekt.
		5. Berechnung: 3.542732 s. Die 5. Berechnung der Primzahlen mit 24 OpenMP-Thread(s) ist korrekt.
		6. Berechnung: 3.482180 s. Die 6. Berechnung der Primzahlen mit 24 OpenMP-Thread(s) ist korrekt.
		7. Berechnung: 3.506986 s. Die 7. Berechnung der Primzahlen mit 24 OpenMP-Thread(s) ist korrekt.
		8. Berechnung: 3.464127 s. Die 8. Berechnung der Primzahlen mit 24 OpenMP-Thread(s) ist korrekt.
		9. Berechnung: 3.418557 s. Die 9. Berechnung der Primzahlen mit 24 OpenMP-Thread(s) ist korrekt.
		10. Berechnung: 3.472636 s. Die 10. Berechnung der Primzahlen mit 24 OpenMP-Thread(s) ist korrekt.
		11. Berechnung: 3.577147 s. Die 11. Berechnung der Primzahlen mit 24 OpenMP-Thread(s) ist korrekt.
		12. Berechnung: 3.402948 s. Die 12. Berechnung der Primzahlen mit 24 OpenMP-Thread(s) ist korrekt.
		13. Berechnung: 3.574112 s. Die 13. Berechnung der Primzahlen mit 24 OpenMP-Thread(s) ist korrekt.
		14. Berechnung: 3.514648 s. Die 14. Berechnung der Primzahlen mit 24 OpenMP-Thread(s) ist korrekt.
		15. Berechnung: 3.367509 s. Die 15. Berechnung der Primzahlen mit 24 OpenMP-Thread(s) ist korrekt.
		16. Berechnung: 3.502434 s. Die 16. Berechnung der Primzahlen mit 24 OpenMP-Thread(s) ist korrekt.
		17. Berechnung: 3.520421 s. Die 17. Berechnung der Primzahlen mit 24 OpenMP-Thread(s) ist korrekt.
		18. Berechnung: 3.409646 s. Die 18. Berechnung der Primzahlen mit 24 OpenMP-Thread(s) ist korrekt.
		19. Berechnung: 3.466001 s. Die 19. Berechnung der Primzahlen mit 24 OpenMP-Thread(s) ist korrekt.
		20. Berechnung: 3.515803 s. Die 20. Berechnung der Primzahlen mit 24 OpenMP-Thread(s) ist korrekt.
		21. Berechnung: 3.412895 s. Die 21. Berechnung der Primzahlen mit 24 OpenMP-Thread(s) ist korrekt.
		22. Berechnung: 3.558948 s. Die 22. Berechnung der Primzahlen mit 24 OpenMP-Thread(s) ist korrekt.
		23. Berechnung: 3.540389 s. Die 23. Berechnung der Primzahlen mit 24 OpenMP-Thread(s) ist korrekt.
		24. Berechnung: 3.394929 s. Die 24. Berechnung der Primzahlen mit 24 OpenMP-Thread(s) ist korrekt.
		25. Berechnung: 3.751069 s. Die 25. Berechnung der Primzahlen mit 24 OpenMP-Thread(s) ist korrekt.
		26. Berechnung: 3.665602 s. Die 26. Berechnung der Primzahlen mit 24 OpenMP-Thread(s) ist korrekt.
		27. Berechnung: 3.467258 s. Die 27. Berechnung der Primzahlen mit 24 OpenMP-Thread(s) ist korrekt.
		28. Berechnung: 3.552714 s. Die 28. Berechnung der Primzahlen mit 24 OpenMP-Thread(s) ist korrekt.
		29. Berechnung: 3.531806 s. Die 29. Berechnung der Primzahlen mit 24 OpenMP-Thread(s) ist korrekt.
		30. Berechnung: 3.399205 s. Die 30. Berechnung der Primzahlen mit 24 OpenMP-Thread(s) ist korrekt.
		31. Berechnung: 3.457402 s. Die 31. Berechnung der Primzahlen mit 24 OpenMP-Thread(s) ist korrekt.
		32. Berechnung: 3.455390 s. Die 32. Berechnung der Primzahlen mit 24 OpenMP-Thread(s) ist korrekt.
		33. Berechnung: 3.451653 s. Die 33. Berechnung der Primzahlen mit 24 OpenMP-Thread(s) ist korrekt.
		34. Berechnung: 3.517847 s. Die 34. Berechnung der Primzahlen mit 24 OpenMP-Thread(s) ist korrekt.
		35. Berechnung: 3.484148 s. Die 35. Berechnung der Primzahlen mit 24 OpenMP-Thread(s) ist korrekt.
		36. Berechnung: 3.413320 s. Die 36. Berechnung der Primzahlen mit 24 OpenMP-Thread(s) ist korrekt.
		37. Berechnung: 3.483661 s. Die 37. Berechnung der Primzahlen mit 24 OpenMP-Thread(s) ist korrekt.
		38. Berechnung: 3.430513 s. Die 38. Berechnung der Primzahlen mit 24 OpenMP-Thread(s) ist korrekt.
		39. Berechnung: 3.459032 s. Die 39. Berechnung der Primzahlen mit 24 OpenMP-Thread(s) ist korrekt.
		40. Berechnung: 3.464509 s. Die 40. Berechnung der Primzahlen mit 24 OpenMP-Thread(s) ist korrekt.
		41. Berechnung: 3.424622 s. Die 41. Berechnung der Primzahlen mit 24 OpenMP-Thread(s) ist korrekt.
		42. Berechnung: 3.401343 s. Die 42. Berechnung der Primzahlen mit 24 OpenMP-Thread(s) ist korrekt.
		43. Berechnung: 3.475998 s. Die 43. Berechnung der Primzahlen mit 24 OpenMP-Thread(s) ist korrekt.
		44. Berechnung: 3.525087 s. Die 44. Berechnung der Primzahlen mit 24 OpenMP-Thread(s) ist korrekt.
		45. Berechnung: 3.437382 s. Die 45. Berechnung der Primzahlen mit 24 OpenMP-Thread(s) ist korrekt.
		46. Berechnung: 3.530887 s. Die 46. Berechnung der Primzahlen mit 24 OpenMP-Thread(s) ist korrekt.
		47. Berechnung: 3.506171 s. Die 47. Berechnung der Primzahlen mit 24 OpenMP-Thread(s) ist korrekt.
		48. Berechnung: 3.398304 s. Die 48. Berechnung der Primzahlen mit 24 OpenMP-Thread(s) ist korrekt.
		49. Berechnung: 3.475310 s. Die 49. Berechnung der Primzahlen mit 24 OpenMP-Thread(s) ist korrekt.
		50. Berechnung: 3.512533 s. Die 50. Berechnung der Primzahlen mit 24 OpenMP-Thread(s) ist korrekt.
		Durchschnittliche Ausfuehrungszeit des Programmes bei 50 Durchlaeufen mit 24 OpenMP-Thread(s): 3.485785 s. Alle berechneten Primzahlen mit 24 OpenMP-Thread(s) sind korrekt.
	Berechnung mittels 26 OpenMP-Thread(s):
		1. Berechnung: 3.385549 s. Die 1. Berechnung der Primzahlen mit 26 OpenMP-Thread(s) ist korrekt.
		2. Berechnung: 3.477860 s. Die 2. Berechnung der Primzahlen mit 26 OpenMP-Thread(s) ist korrekt.
		3. Berechnung: 3.550178 s. Die 3. Berechnung der Primzahlen mit 26 OpenMP-Thread(s) ist korrekt.
		4. Berechnung: 3.430877 s. Die 4. Berechnung der Primzahlen mit 26 OpenMP-Thread(s) ist korrekt.
		5. Berechnung: 3.483123 s. Die 5. Berechnung der Primzahlen mit 26 OpenMP-Thread(s) ist korrekt.
		6. Berechnung: 3.472316 s. Die 6. Berechnung der Primzahlen mit 26 OpenMP-Thread(s) ist korrekt.
		7. Berechnung: 3.396269 s. Die 7. Berechnung der Primzahlen mit 26 OpenMP-Thread(s) ist korrekt.
		8. Berechnung: 3.479624 s. Die 8. Berechnung der Primzahlen mit 26 OpenMP-Thread(s) ist korrekt.
		9. Berechnung: 3.455727 s. Die 9. Berechnung der Primzahlen mit 26 OpenMP-Thread(s) ist korrekt.
		10. Berechnung: 3.437730 s. Die 10. Berechnung der Primzahlen mit 26 OpenMP-Thread(s) ist korrekt.
		11. Berechnung: 3.542013 s. Die 11. Berechnung der Primzahlen mit 26 OpenMP-Thread(s) ist korrekt.
		12. Berechnung: 3.481602 s. Die 12. Berechnung der Primzahlen mit 26 OpenMP-Thread(s) ist korrekt.
		13. Berechnung: 3.413206 s. Die 13. Berechnung der Primzahlen mit 26 OpenMP-Thread(s) ist korrekt.
		14. Berechnung: 3.500803 s. Die 14. Berechnung der Primzahlen mit 26 OpenMP-Thread(s) ist korrekt.
		15. Berechnung: 3.424341 s. Die 15. Berechnung der Primzahlen mit 26 OpenMP-Thread(s) ist korrekt.
		16. Berechnung: 3.492175 s. Die 16. Berechnung der Primzahlen mit 26 OpenMP-Thread(s) ist korrekt.
		17. Berechnung: 3.497302 s. Die 17. Berechnung der Primzahlen mit 26 OpenMP-Thread(s) ist korrekt.
		18. Berechnung: 3.478085 s. Die 18. Berechnung der Primzahlen mit 26 OpenMP-Thread(s) ist korrekt.
		19. Berechnung: 3.478183 s. Die 19. Berechnung der Primzahlen mit 26 OpenMP-Thread(s) ist korrekt.
		20. Berechnung: 3.509227 s. Die 20. Berechnung der Primzahlen mit 26 OpenMP-Thread(s) ist korrekt.
		21. Berechnung: 3.523962 s. Die 21. Berechnung der Primzahlen mit 26 OpenMP-Thread(s) ist korrekt.
		22. Berechnung: 3.391509 s. Die 22. Berechnung der Primzahlen mit 26 OpenMP-Thread(s) ist korrekt.
		23. Berechnung: 3.430394 s. Die 23. Berechnung der Primzahlen mit 26 OpenMP-Thread(s) ist korrekt.
		24. Berechnung: 3.450763 s. Die 24. Berechnung der Primzahlen mit 26 OpenMP-Thread(s) ist korrekt.
		25. Berechnung: 3.525820 s. Die 25. Berechnung der Primzahlen mit 26 OpenMP-Thread(s) ist korrekt.
		26. Berechnung: 3.459631 s. Die 26. Berechnung der Primzahlen mit 26 OpenMP-Thread(s) ist korrekt.
		27. Berechnung: 3.349686 s. Die 27. Berechnung der Primzahlen mit 26 OpenMP-Thread(s) ist korrekt.
		28. Berechnung: 3.510448 s. Die 28. Berechnung der Primzahlen mit 26 OpenMP-Thread(s) ist korrekt.
		29. Berechnung: 3.510370 s. Die 29. Berechnung der Primzahlen mit 26 OpenMP-Thread(s) ist korrekt.
		30. Berechnung: 3.367454 s. Die 30. Berechnung der Primzahlen mit 26 OpenMP-Thread(s) ist korrekt.
		31. Berechnung: 3.493851 s. Die 31. Berechnung der Primzahlen mit 26 OpenMP-Thread(s) ist korrekt.
		32. Berechnung: 3.431328 s. Die 32. Berechnung der Primzahlen mit 26 OpenMP-Thread(s) ist korrekt.
		33. Berechnung: 3.406375 s. Die 33. Berechnung der Primzahlen mit 26 OpenMP-Thread(s) ist korrekt.
		34. Berechnung: 3.539157 s. Die 34. Berechnung der Primzahlen mit 26 OpenMP-Thread(s) ist korrekt.
		35. Berechnung: 3.629128 s. Die 35. Berechnung der Primzahlen mit 26 OpenMP-Thread(s) ist korrekt.
		36. Berechnung: 3.388357 s. Die 36. Berechnung der Primzahlen mit 26 OpenMP-Thread(s) ist korrekt.
		37. Berechnung: 3.482278 s. Die 37. Berechnung der Primzahlen mit 26 OpenMP-Thread(s) ist korrekt.
		38. Berechnung: 3.513796 s. Die 38. Berechnung der Primzahlen mit 26 OpenMP-Thread(s) ist korrekt.
		39. Berechnung: 3.366861 s. Die 39. Berechnung der Primzahlen mit 26 OpenMP-Thread(s) ist korrekt.
		40. Berechnung: 3.506277 s. Die 40. Berechnung der Primzahlen mit 26 OpenMP-Thread(s) ist korrekt.
		41. Berechnung: 3.451387 s. Die 41. Berechnung der Primzahlen mit 26 OpenMP-Thread(s) ist korrekt.
		42. Berechnung: 3.375759 s. Die 42. Berechnung der Primzahlen mit 26 OpenMP-Thread(s) ist korrekt.
		43. Berechnung: 3.479978 s. Die 43. Berechnung der Primzahlen mit 26 OpenMP-Thread(s) ist korrekt.
		44. Berechnung: 3.500499 s. Die 44. Berechnung der Primzahlen mit 26 OpenMP-Thread(s) ist korrekt.
		45. Berechnung: 3.393353 s. Die 45. Berechnung der Primzahlen mit 26 OpenMP-Thread(s) ist korrekt.
		46. Berechnung: 3.455732 s. Die 46. Berechnung der Primzahlen mit 26 OpenMP-Thread(s) ist korrekt.
		47. Berechnung: 3.457433 s. Die 47. Berechnung der Primzahlen mit 26 OpenMP-Thread(s) ist korrekt.
		48. Berechnung: 3.375017 s. Die 48. Berechnung der Primzahlen mit 26 OpenMP-Thread(s) ist korrekt.
		49. Berechnung: 3.499777 s. Die 49. Berechnung der Primzahlen mit 26 OpenMP-Thread(s) ist korrekt.
		50. Berechnung: 3.482211 s. Die 50. Berechnung der Primzahlen mit 26 OpenMP-Thread(s) ist korrekt.
		Durchschnittliche Ausfuehrungszeit des Programmes bei 50 Durchlaeufen mit 26 OpenMP-Thread(s): 3.462696 s. Alle berechneten Primzahlen mit 26 OpenMP-Thread(s) sind korrekt.
	Berechnung mittels 28 OpenMP-Thread(s):
		1. Berechnung: 3.352530 s. Die 1. Berechnung der Primzahlen mit 28 OpenMP-Thread(s) ist korrekt.
		2. Berechnung: 3.552125 s. Die 2. Berechnung der Primzahlen mit 28 OpenMP-Thread(s) ist korrekt.
		3. Berechnung: 3.462695 s. Die 3. Berechnung der Primzahlen mit 28 OpenMP-Thread(s) ist korrekt.
		4. Berechnung: 3.448231 s. Die 4. Berechnung der Primzahlen mit 28 OpenMP-Thread(s) ist korrekt.
		5. Berechnung: 3.494216 s. Die 5. Berechnung der Primzahlen mit 28 OpenMP-Thread(s) ist korrekt.
		6. Berechnung: 3.498494 s. Die 6. Berechnung der Primzahlen mit 28 OpenMP-Thread(s) ist korrekt.
		7. Berechnung: 3.405274 s. Die 7. Berechnung der Primzahlen mit 28 OpenMP-Thread(s) ist korrekt.
		8. Berechnung: 3.550876 s. Die 8. Berechnung der Primzahlen mit 28 OpenMP-Thread(s) ist korrekt.
		9. Berechnung: 3.490441 s. Die 9. Berechnung der Primzahlen mit 28 OpenMP-Thread(s) ist korrekt.
		10. Berechnung: 3.489336 s. Die 10. Berechnung der Primzahlen mit 28 OpenMP-Thread(s) ist korrekt.
		11. Berechnung: 3.475960 s. Die 11. Berechnung der Primzahlen mit 28 OpenMP-Thread(s) ist korrekt.
		12. Berechnung: 3.630788 s. Die 12. Berechnung der Primzahlen mit 28 OpenMP-Thread(s) ist korrekt.
		13. Berechnung: 4.298939 s. Die 13. Berechnung der Primzahlen mit 28 OpenMP-Thread(s) ist korrekt.
		14. Berechnung: 4.039510 s. Die 14. Berechnung der Primzahlen mit 28 OpenMP-Thread(s) ist korrekt.
		15. Berechnung: 4.146807 s. Die 15. Berechnung der Primzahlen mit 28 OpenMP-Thread(s) ist korrekt.
		16. Berechnung: 3.812538 s. Die 16. Berechnung der Primzahlen mit 28 OpenMP-Thread(s) ist korrekt.
		17. Berechnung: 3.444072 s. Die 17. Berechnung der Primzahlen mit 28 OpenMP-Thread(s) ist korrekt.
		18. Berechnung: 3.501851 s. Die 18. Berechnung der Primzahlen mit 28 OpenMP-Thread(s) ist korrekt.
		19. Berechnung: 3.473459 s. Die 19. Berechnung der Primzahlen mit 28 OpenMP-Thread(s) ist korrekt.
		20. Berechnung: 3.435983 s. Die 20. Berechnung der Primzahlen mit 28 OpenMP-Thread(s) ist korrekt.
		21. Berechnung: 3.473460 s. Die 21. Berechnung der Primzahlen mit 28 OpenMP-Thread(s) ist korrekt.
		22. Berechnung: 3.549013 s. Die 22. Berechnung der Primzahlen mit 28 OpenMP-Thread(s) ist korrekt.
		23. Berechnung: 3.365428 s. Die 23. Berechnung der Primzahlen mit 28 OpenMP-Thread(s) ist korrekt.
		24. Berechnung: 3.433901 s. Die 24. Berechnung der Primzahlen mit 28 OpenMP-Thread(s) ist korrekt.
		25. Berechnung: 3.560855 s. Die 25. Berechnung der Primzahlen mit 28 OpenMP-Thread(s) ist korrekt.
		26. Berechnung: 3.402078 s. Die 26. Berechnung der Primzahlen mit 28 OpenMP-Thread(s) ist korrekt.
		27. Berechnung: 3.525105 s. Die 27. Berechnung der Primzahlen mit 28 OpenMP-Thread(s) ist korrekt.
		28. Berechnung: 3.455868 s. Die 28. Berechnung der Primzahlen mit 28 OpenMP-Thread(s) ist korrekt.
		29. Berechnung: 3.423101 s. Die 29. Berechnung der Primzahlen mit 28 OpenMP-Thread(s) ist korrekt.
		30. Berechnung: 3.532475 s. Die 30. Berechnung der Primzahlen mit 28 OpenMP-Thread(s) ist korrekt.
		31. Berechnung: 3.502923 s. Die 31. Berechnung der Primzahlen mit 28 OpenMP-Thread(s) ist korrekt.
		32. Berechnung: 3.422849 s. Die 32. Berechnung der Primzahlen mit 28 OpenMP-Thread(s) ist korrekt.
		33. Berechnung: 3.505320 s. Die 33. Berechnung der Primzahlen mit 28 OpenMP-Thread(s) ist korrekt.
		34. Berechnung: 3.511869 s. Die 34. Berechnung der Primzahlen mit 28 OpenMP-Thread(s) ist korrekt.
		35. Berechnung: 3.399376 s. Die 35. Berechnung der Primzahlen mit 28 OpenMP-Thread(s) ist korrekt.
		36. Berechnung: 3.450939 s. Die 36. Berechnung der Primzahlen mit 28 OpenMP-Thread(s) ist korrekt.
		37. Berechnung: 3.492572 s. Die 37. Berechnung der Primzahlen mit 28 OpenMP-Thread(s) ist korrekt.
		38. Berechnung: 3.404635 s. Die 38. Berechnung der Primzahlen mit 28 OpenMP-Thread(s) ist korrekt.
		39. Berechnung: 3.527806 s. Die 39. Berechnung der Primzahlen mit 28 OpenMP-Thread(s) ist korrekt.
		40. Berechnung: 3.463847 s. Die 40. Berechnung der Primzahlen mit 28 OpenMP-Thread(s) ist korrekt.
		41. Berechnung: 3.424303 s. Die 41. Berechnung der Primzahlen mit 28 OpenMP-Thread(s) ist korrekt.
		42. Berechnung: 3.555202 s. Die 42. Berechnung der Primzahlen mit 28 OpenMP-Thread(s) ist korrekt.
		43. Berechnung: 3.514310 s. Die 43. Berechnung der Primzahlen mit 28 OpenMP-Thread(s) ist korrekt.
		44. Berechnung: 3.377338 s. Die 44. Berechnung der Primzahlen mit 28 OpenMP-Thread(s) ist korrekt.
		45. Berechnung: 3.547149 s. Die 45. Berechnung der Primzahlen mit 28 OpenMP-Thread(s) ist korrekt.
		46. Berechnung: 3.543628 s. Die 46. Berechnung der Primzahlen mit 28 OpenMP-Thread(s) ist korrekt.
		47. Berechnung: 3.372162 s. Die 47. Berechnung der Primzahlen mit 28 OpenMP-Thread(s) ist korrekt.
		48. Berechnung: 3.470135 s. Die 48. Berechnung der Primzahlen mit 28 OpenMP-Thread(s) ist korrekt.
		49. Berechnung: 3.519546 s. Die 49. Berechnung der Primzahlen mit 28 OpenMP-Thread(s) ist korrekt.
		50. Berechnung: 3.476082 s. Die 50. Berechnung der Primzahlen mit 28 OpenMP-Thread(s) ist korrekt.
		Durchschnittliche Ausfuehrungszeit des Programmes bei 50 Durchlaeufen mit 28 OpenMP-Thread(s): 3.524148 s. Alle berechneten Primzahlen mit 28 OpenMP-Thread(s) sind korrekt.
	Berechnung mittels 30 OpenMP-Thread(s):
		1. Berechnung: 3.466947 s. Die 1. Berechnung der Primzahlen mit 30 OpenMP-Thread(s) ist korrekt.
		2. Berechnung: 3.446041 s. Die 2. Berechnung der Primzahlen mit 30 OpenMP-Thread(s) ist korrekt.
		3. Berechnung: 3.405129 s. Die 3. Berechnung der Primzahlen mit 30 OpenMP-Thread(s) ist korrekt.
		4. Berechnung: 3.500127 s. Die 4. Berechnung der Primzahlen mit 30 OpenMP-Thread(s) ist korrekt.
		5. Berechnung: 3.496845 s. Die 5. Berechnung der Primzahlen mit 30 OpenMP-Thread(s) ist korrekt.
		6. Berechnung: 3.396380 s. Die 6. Berechnung der Primzahlen mit 30 OpenMP-Thread(s) ist korrekt.
		7. Berechnung: 3.488008 s. Die 7. Berechnung der Primzahlen mit 30 OpenMP-Thread(s) ist korrekt.
		8. Berechnung: 3.490545 s. Die 8. Berechnung der Primzahlen mit 30 OpenMP-Thread(s) ist korrekt.
		9. Berechnung: 3.392854 s. Die 9. Berechnung der Primzahlen mit 30 OpenMP-Thread(s) ist korrekt.
		10. Berechnung: 3.494017 s. Die 10. Berechnung der Primzahlen mit 30 OpenMP-Thread(s) ist korrekt.
		11. Berechnung: 3.492878 s. Die 11. Berechnung der Primzahlen mit 30 OpenMP-Thread(s) ist korrekt.
		12. Berechnung: 3.407782 s. Die 12. Berechnung der Primzahlen mit 30 OpenMP-Thread(s) ist korrekt.
		13. Berechnung: 3.495645 s. Die 13. Berechnung der Primzahlen mit 30 OpenMP-Thread(s) ist korrekt.
		14. Berechnung: 3.472429 s. Die 14. Berechnung der Primzahlen mit 30 OpenMP-Thread(s) ist korrekt.
		15. Berechnung: 3.415363 s. Die 15. Berechnung der Primzahlen mit 30 OpenMP-Thread(s) ist korrekt.
		16. Berechnung: 3.533535 s. Die 16. Berechnung der Primzahlen mit 30 OpenMP-Thread(s) ist korrekt.
		17. Berechnung: 3.509268 s. Die 17. Berechnung der Primzahlen mit 30 OpenMP-Thread(s) ist korrekt.
		18. Berechnung: 3.395290 s. Die 18. Berechnung der Primzahlen mit 30 OpenMP-Thread(s) ist korrekt.
		19. Berechnung: 3.477961 s. Die 19. Berechnung der Primzahlen mit 30 OpenMP-Thread(s) ist korrekt.
		20. Berechnung: 3.488191 s. Die 20. Berechnung der Primzahlen mit 30 OpenMP-Thread(s) ist korrekt.
		21. Berechnung: 3.380859 s. Die 21. Berechnung der Primzahlen mit 30 OpenMP-Thread(s) ist korrekt.
		22. Berechnung: 3.446400 s. Die 22. Berechnung der Primzahlen mit 30 OpenMP-Thread(s) ist korrekt.
		23. Berechnung: 3.539649 s. Die 23. Berechnung der Primzahlen mit 30 OpenMP-Thread(s) ist korrekt.
		24. Berechnung: 3.387009 s. Die 24. Berechnung der Primzahlen mit 30 OpenMP-Thread(s) ist korrekt.
		25. Berechnung: 3.532955 s. Die 25. Berechnung der Primzahlen mit 30 OpenMP-Thread(s) ist korrekt.
		26. Berechnung: 3.435008 s. Die 26. Berechnung der Primzahlen mit 30 OpenMP-Thread(s) ist korrekt.
		27. Berechnung: 3.407650 s. Die 27. Berechnung der Primzahlen mit 30 OpenMP-Thread(s) ist korrekt.
		28. Berechnung: 3.506782 s. Die 28. Berechnung der Primzahlen mit 30 OpenMP-Thread(s) ist korrekt.
		29. Berechnung: 3.475729 s. Die 29. Berechnung der Primzahlen mit 30 OpenMP-Thread(s) ist korrekt.
		30. Berechnung: 3.377467 s. Die 30. Berechnung der Primzahlen mit 30 OpenMP-Thread(s) ist korrekt.
		31. Berechnung: 3.442198 s. Die 31. Berechnung der Primzahlen mit 30 OpenMP-Thread(s) ist korrekt.
		32. Berechnung: 3.479419 s. Die 32. Berechnung der Primzahlen mit 30 OpenMP-Thread(s) ist korrekt.
		33. Berechnung: 3.432690 s. Die 33. Berechnung der Primzahlen mit 30 OpenMP-Thread(s) ist korrekt.
		34. Berechnung: 3.543098 s. Die 34. Berechnung der Primzahlen mit 30 OpenMP-Thread(s) ist korrekt.
		35. Berechnung: 3.413466 s. Die 35. Berechnung der Primzahlen mit 30 OpenMP-Thread(s) ist korrekt.
		36. Berechnung: 3.419218 s. Die 36. Berechnung der Primzahlen mit 30 OpenMP-Thread(s) ist korrekt.
		37. Berechnung: 3.558867 s. Die 37. Berechnung der Primzahlen mit 30 OpenMP-Thread(s) ist korrekt.
		38. Berechnung: 3.375195 s. Die 38. Berechnung der Primzahlen mit 30 OpenMP-Thread(s) ist korrekt.
		39. Berechnung: 3.450642 s. Die 39. Berechnung der Primzahlen mit 30 OpenMP-Thread(s) ist korrekt.
		40. Berechnung: 3.468449 s. Die 40. Berechnung der Primzahlen mit 30 OpenMP-Thread(s) ist korrekt.
		41. Berechnung: 3.394473 s. Die 41. Berechnung der Primzahlen mit 30 OpenMP-Thread(s) ist korrekt.
		42. Berechnung: 3.488762 s. Die 42. Berechnung der Primzahlen mit 30 OpenMP-Thread(s) ist korrekt.
		43. Berechnung: 3.488860 s. Die 43. Berechnung der Primzahlen mit 30 OpenMP-Thread(s) ist korrekt.
		44. Berechnung: 3.405109 s. Die 44. Berechnung der Primzahlen mit 30 OpenMP-Thread(s) ist korrekt.
		45. Berechnung: 3.528410 s. Die 45. Berechnung der Primzahlen mit 30 OpenMP-Thread(s) ist korrekt.
		46. Berechnung: 3.482792 s. Die 46. Berechnung der Primzahlen mit 30 OpenMP-Thread(s) ist korrekt.
		47. Berechnung: 3.425968 s. Die 47. Berechnung der Primzahlen mit 30 OpenMP-Thread(s) ist korrekt.
		48. Berechnung: 3.551700 s. Die 48. Berechnung der Primzahlen mit 30 OpenMP-Thread(s) ist korrekt.
		49. Berechnung: 3.511545 s. Die 49. Berechnung der Primzahlen mit 30 OpenMP-Thread(s) ist korrekt.
		50. Berechnung: 3.391700 s. Die 50. Berechnung der Primzahlen mit 30 OpenMP-Thread(s) ist korrekt.
		Durchschnittliche Ausfuehrungszeit des Programmes bei 50 Durchlaeufen mit 30 OpenMP-Thread(s): 3.460146 s. Alle berechneten Primzahlen mit 30 OpenMP-Thread(s) sind korrekt.
	Berechnung mittels 32 OpenMP-Thread(s):
		1. Berechnung: 3.458982 s. Die 1. Berechnung der Primzahlen mit 32 OpenMP-Thread(s) ist korrekt.
		2. Berechnung: 3.503862 s. Die 2. Berechnung der Primzahlen mit 32 OpenMP-Thread(s) ist korrekt.
		3. Berechnung: 3.359183 s. Die 3. Berechnung der Primzahlen mit 32 OpenMP-Thread(s) ist korrekt.
		4. Berechnung: 3.452791 s. Die 4. Berechnung der Primzahlen mit 32 OpenMP-Thread(s) ist korrekt.
		5. Berechnung: 3.460831 s. Die 5. Berechnung der Primzahlen mit 32 OpenMP-Thread(s) ist korrekt.
		6. Berechnung: 3.365906 s. Die 6. Berechnung der Primzahlen mit 32 OpenMP-Thread(s) ist korrekt.
		7. Berechnung: 3.461600 s. Die 7. Berechnung der Primzahlen mit 32 OpenMP-Thread(s) ist korrekt.
		8. Berechnung: 3.446929 s. Die 8. Berechnung der Primzahlen mit 32 OpenMP-Thread(s) ist korrekt.
		9. Berechnung: 3.365744 s. Die 9. Berechnung der Primzahlen mit 32 OpenMP-Thread(s) ist korrekt.
		10. Berechnung: 3.503399 s. Die 10. Berechnung der Primzahlen mit 32 OpenMP-Thread(s) ist korrekt.
		11. Berechnung: 3.465462 s. Die 11. Berechnung der Primzahlen mit 32 OpenMP-Thread(s) ist korrekt.
		12. Berechnung: 3.402859 s. Die 12. Berechnung der Primzahlen mit 32 OpenMP-Thread(s) ist korrekt.
		13. Berechnung: 3.486748 s. Die 13. Berechnung der Primzahlen mit 32 OpenMP-Thread(s) ist korrekt.
		14. Berechnung: 3.453982 s. Die 14. Berechnung der Primzahlen mit 32 OpenMP-Thread(s) ist korrekt.
		15. Berechnung: 3.363259 s. Die 15. Berechnung der Primzahlen mit 32 OpenMP-Thread(s) ist korrekt.
		16. Berechnung: 3.536013 s. Die 16. Berechnung der Primzahlen mit 32 OpenMP-Thread(s) ist korrekt.
		17. Berechnung: 3.511233 s. Die 17. Berechnung der Primzahlen mit 32 OpenMP-Thread(s) ist korrekt.
		18. Berechnung: 3.352728 s. Die 18. Berechnung der Primzahlen mit 32 OpenMP-Thread(s) ist korrekt.
		19. Berechnung: 3.438615 s. Die 19. Berechnung der Primzahlen mit 32 OpenMP-Thread(s) ist korrekt.
		20. Berechnung: 3.506722 s. Die 20. Berechnung der Primzahlen mit 32 OpenMP-Thread(s) ist korrekt.
		21. Berechnung: 3.391813 s. Die 21. Berechnung der Primzahlen mit 32 OpenMP-Thread(s) ist korrekt.
		22. Berechnung: 3.491885 s. Die 22. Berechnung der Primzahlen mit 32 OpenMP-Thread(s) ist korrekt.
		23. Berechnung: 3.460794 s. Die 23. Berechnung der Primzahlen mit 32 OpenMP-Thread(s) ist korrekt.
		24. Berechnung: 3.383002 s. Die 24. Berechnung der Primzahlen mit 32 OpenMP-Thread(s) ist korrekt.
		25. Berechnung: 3.460548 s. Die 25. Berechnung der Primzahlen mit 32 OpenMP-Thread(s) ist korrekt.
		26. Berechnung: 3.438881 s. Die 26. Berechnung der Primzahlen mit 32 OpenMP-Thread(s) ist korrekt.
		27. Berechnung: 3.417265 s. Die 27. Berechnung der Primzahlen mit 32 OpenMP-Thread(s) ist korrekt.
		28. Berechnung: 3.489683 s. Die 28. Berechnung der Primzahlen mit 32 OpenMP-Thread(s) ist korrekt.
		29. Berechnung: 3.483893 s. Die 29. Berechnung der Primzahlen mit 32 OpenMP-Thread(s) ist korrekt.
		30. Berechnung: 3.432577 s. Die 30. Berechnung der Primzahlen mit 32 OpenMP-Thread(s) ist korrekt.
		31. Berechnung: 3.484669 s. Die 31. Berechnung der Primzahlen mit 32 OpenMP-Thread(s) ist korrekt.
		32. Berechnung: 3.455281 s. Die 32. Berechnung der Primzahlen mit 32 OpenMP-Thread(s) ist korrekt.
		33. Berechnung: 3.401682 s. Die 33. Berechnung der Primzahlen mit 32 OpenMP-Thread(s) ist korrekt.
		34. Berechnung: 3.479966 s. Die 34. Berechnung der Primzahlen mit 32 OpenMP-Thread(s) ist korrekt.
		35. Berechnung: 3.427615 s. Die 35. Berechnung der Primzahlen mit 32 OpenMP-Thread(s) ist korrekt.
		36. Berechnung: 3.489008 s. Die 36. Berechnung der Primzahlen mit 32 OpenMP-Thread(s) ist korrekt.
		37. Berechnung: 3.487447 s. Die 37. Berechnung der Primzahlen mit 32 OpenMP-Thread(s) ist korrekt.
		38. Berechnung: 3.412982 s. Die 38. Berechnung der Primzahlen mit 32 OpenMP-Thread(s) ist korrekt.
		39. Berechnung: 3.488038 s. Die 39. Berechnung der Primzahlen mit 32 OpenMP-Thread(s) ist korrekt.
		40. Berechnung: 3.468427 s. Die 40. Berechnung der Primzahlen mit 32 OpenMP-Thread(s) ist korrekt.
		41. Berechnung: 3.421751 s. Die 41. Berechnung der Primzahlen mit 32 OpenMP-Thread(s) ist korrekt.
		42. Berechnung: 3.514484 s. Die 42. Berechnung der Primzahlen mit 32 OpenMP-Thread(s) ist korrekt.
		43. Berechnung: 3.476175 s. Die 43. Berechnung der Primzahlen mit 32 OpenMP-Thread(s) ist korrekt.
		44. Berechnung: 3.413543 s. Die 44. Berechnung der Primzahlen mit 32 OpenMP-Thread(s) ist korrekt.
		45. Berechnung: 3.493703 s. Die 45. Berechnung der Primzahlen mit 32 OpenMP-Thread(s) ist korrekt.
		46. Berechnung: 3.463835 s. Die 46. Berechnung der Primzahlen mit 32 OpenMP-Thread(s) ist korrekt.
		47. Berechnung: 3.384872 s. Die 47. Berechnung der Primzahlen mit 32 OpenMP-Thread(s) ist korrekt.
		48. Berechnung: 3.442595 s. Die 48. Berechnung der Primzahlen mit 32 OpenMP-Thread(s) ist korrekt.
		49. Berechnung: 3.470179 s. Die 49. Berechnung der Primzahlen mit 32 OpenMP-Thread(s) ist korrekt.
		50. Berechnung: 3.360421 s. Die 50. Berechnung der Primzahlen mit 32 OpenMP-Thread(s) ist korrekt.
		Durchschnittliche Ausfuehrungszeit des Programmes bei 50 Durchlaeufen mit 32 OpenMP-Thread(s): 3.447677 s. Alle berechneten Primzahlen mit 32 OpenMP-Thread(s) sind korrekt.
	Berechnung mittels 34 OpenMP-Thread(s):
		1. Berechnung: 3.464774 s. Die 1. Berechnung der Primzahlen mit 34 OpenMP-Thread(s) ist korrekt.
		2. Berechnung: 3.449674 s. Die 2. Berechnung der Primzahlen mit 34 OpenMP-Thread(s) ist korrekt.
		3. Berechnung: 3.407832 s. Die 3. Berechnung der Primzahlen mit 34 OpenMP-Thread(s) ist korrekt.
		4. Berechnung: 3.450781 s. Die 4. Berechnung der Primzahlen mit 34 OpenMP-Thread(s) ist korrekt.
		5. Berechnung: 3.483820 s. Die 5. Berechnung der Primzahlen mit 34 OpenMP-Thread(s) ist korrekt.
		6. Berechnung: 3.371327 s. Die 6. Berechnung der Primzahlen mit 34 OpenMP-Thread(s) ist korrekt.
		7. Berechnung: 3.514476 s. Die 7. Berechnung der Primzahlen mit 34 OpenMP-Thread(s) ist korrekt.
		8. Berechnung: 3.454394 s. Die 8. Berechnung der Primzahlen mit 34 OpenMP-Thread(s) ist korrekt.
		9. Berechnung: 3.372813 s. Die 9. Berechnung der Primzahlen mit 34 OpenMP-Thread(s) ist korrekt.
		10. Berechnung: 3.429398 s. Die 10. Berechnung der Primzahlen mit 34 OpenMP-Thread(s) ist korrekt.
		11. Berechnung: 3.447447 s. Die 11. Berechnung der Primzahlen mit 34 OpenMP-Thread(s) ist korrekt.
		12. Berechnung: 3.408675 s. Die 12. Berechnung der Primzahlen mit 34 OpenMP-Thread(s) ist korrekt.
		13. Berechnung: 3.492618 s. Die 13. Berechnung der Primzahlen mit 34 OpenMP-Thread(s) ist korrekt.
		14. Berechnung: 3.474297 s. Die 14. Berechnung der Primzahlen mit 34 OpenMP-Thread(s) ist korrekt.
		15. Berechnung: 3.362564 s. Die 15. Berechnung der Primzahlen mit 34 OpenMP-Thread(s) ist korrekt.
		16. Berechnung: 3.468576 s. Die 16. Berechnung der Primzahlen mit 34 OpenMP-Thread(s) ist korrekt.
		17. Berechnung: 3.526444 s. Die 17. Berechnung der Primzahlen mit 34 OpenMP-Thread(s) ist korrekt.
		18. Berechnung: 3.375226 s. Die 18. Berechnung der Primzahlen mit 34 OpenMP-Thread(s) ist korrekt.
		19. Berechnung: 3.483268 s. Die 19. Berechnung der Primzahlen mit 34 OpenMP-Thread(s) ist korrekt.
		20. Berechnung: 3.476385 s. Die 20. Berechnung der Primzahlen mit 34 OpenMP-Thread(s) ist korrekt.
		21. Berechnung: 3.402652 s. Die 21. Berechnung der Primzahlen mit 34 OpenMP-Thread(s) ist korrekt.
		22. Berechnung: 3.461510 s. Die 22. Berechnung der Primzahlen mit 34 OpenMP-Thread(s) ist korrekt.
		23. Berechnung: 3.441824 s. Die 23. Berechnung der Primzahlen mit 34 OpenMP-Thread(s) ist korrekt.
		24. Berechnung: 3.391833 s. Die 24. Berechnung der Primzahlen mit 34 OpenMP-Thread(s) ist korrekt.
		25. Berechnung: 3.504909 s. Die 25. Berechnung der Primzahlen mit 34 OpenMP-Thread(s) ist korrekt.
		26. Berechnung: 3.366340 s. Die 26. Berechnung der Primzahlen mit 34 OpenMP-Thread(s) ist korrekt.
		27. Berechnung: 3.449285 s. Die 27. Berechnung der Primzahlen mit 34 OpenMP-Thread(s) ist korrekt.
		28. Berechnung: 3.449380 s. Die 28. Berechnung der Primzahlen mit 34 OpenMP-Thread(s) ist korrekt.
		29. Berechnung: 3.360683 s. Die 29. Berechnung der Primzahlen mit 34 OpenMP-Thread(s) ist korrekt.
		30. Berechnung: 3.508574 s. Die 30. Berechnung der Primzahlen mit 34 OpenMP-Thread(s) ist korrekt.
		31. Berechnung: 3.510496 s. Die 31. Berechnung der Primzahlen mit 34 OpenMP-Thread(s) ist korrekt.
		32. Berechnung: 3.365070 s. Die 32. Berechnung der Primzahlen mit 34 OpenMP-Thread(s) ist korrekt.
		33. Berechnung: 3.504533 s. Die 33. Berechnung der Primzahlen mit 34 OpenMP-Thread(s) ist korrekt.
		34. Berechnung: 3.752819 s. Die 34. Berechnung der Primzahlen mit 34 OpenMP-Thread(s) ist korrekt.
		35. Berechnung: 3.390696 s. Die 35. Berechnung der Primzahlen mit 34 OpenMP-Thread(s) ist korrekt.
		36. Berechnung: 3.485357 s. Die 36. Berechnung der Primzahlen mit 34 OpenMP-Thread(s) ist korrekt.
		37. Berechnung: 3.501472 s. Die 37. Berechnung der Primzahlen mit 34 OpenMP-Thread(s) ist korrekt.
		38. Berechnung: 3.378144 s. Die 38. Berechnung der Primzahlen mit 34 OpenMP-Thread(s) ist korrekt.
		39. Berechnung: 3.513278 s. Die 39. Berechnung der Primzahlen mit 34 OpenMP-Thread(s) ist korrekt.
		40. Berechnung: 3.502374 s. Die 40. Berechnung der Primzahlen mit 34 OpenMP-Thread(s) ist korrekt.
		41. Berechnung: 3.414355 s. Die 41. Berechnung der Primzahlen mit 34 OpenMP-Thread(s) ist korrekt.
		42. Berechnung: 3.430080 s. Die 42. Berechnung der Primzahlen mit 34 OpenMP-Thread(s) ist korrekt.
		43. Berechnung: 3.442976 s. Die 43. Berechnung der Primzahlen mit 34 OpenMP-Thread(s) ist korrekt.
		44. Berechnung: 3.409252 s. Die 44. Berechnung der Primzahlen mit 34 OpenMP-Thread(s) ist korrekt.
		45. Berechnung: 3.523033 s. Die 45. Berechnung der Primzahlen mit 34 OpenMP-Thread(s) ist korrekt.
		46. Berechnung: 3.462484 s. Die 46. Berechnung der Primzahlen mit 34 OpenMP-Thread(s) ist korrekt.
		47. Berechnung: 3.440760 s. Die 47. Berechnung der Primzahlen mit 34 OpenMP-Thread(s) ist korrekt.
		48. Berechnung: 3.641951 s. Die 48. Berechnung der Primzahlen mit 34 OpenMP-Thread(s) ist korrekt.
		49. Berechnung: 3.477273 s. Die 49. Berechnung der Primzahlen mit 34 OpenMP-Thread(s) ist korrekt.
		50. Berechnung: 3.348109 s. Die 50. Berechnung der Primzahlen mit 34 OpenMP-Thread(s) ist korrekt.
		Durchschnittliche Ausfuehrungszeit des Programmes bei 50 Durchlaeufen mit 34 OpenMP-Thread(s): 3.454926 s. Alle berechneten Primzahlen mit 34 OpenMP-Thread(s) sind korrekt.
	Berechnung mittels 36 OpenMP-Thread(s):
		1. Berechnung: 3.431570 s. Die 1. Berechnung der Primzahlen mit 36 OpenMP-Thread(s) ist korrekt.
		2. Berechnung: 3.501061 s. Die 2. Berechnung der Primzahlen mit 36 OpenMP-Thread(s) ist korrekt.
		3. Berechnung: 3.373721 s. Die 3. Berechnung der Primzahlen mit 36 OpenMP-Thread(s) ist korrekt.
		4. Berechnung: 3.533656 s. Die 4. Berechnung der Primzahlen mit 36 OpenMP-Thread(s) ist korrekt.
		5. Berechnung: 3.466280 s. Die 5. Berechnung der Primzahlen mit 36 OpenMP-Thread(s) ist korrekt.
		6. Berechnung: 3.375304 s. Die 6. Berechnung der Primzahlen mit 36 OpenMP-Thread(s) ist korrekt.
		7. Berechnung: 3.458814 s. Die 7. Berechnung der Primzahlen mit 36 OpenMP-Thread(s) ist korrekt.
		8. Berechnung: 3.465298 s. Die 8. Berechnung der Primzahlen mit 36 OpenMP-Thread(s) ist korrekt.
		9. Berechnung: 3.403231 s. Die 9. Berechnung der Primzahlen mit 36 OpenMP-Thread(s) ist korrekt.
		10. Berechnung: 3.498328 s. Die 10. Berechnung der Primzahlen mit 36 OpenMP-Thread(s) ist korrekt.
		11. Berechnung: 3.513014 s. Die 11. Berechnung der Primzahlen mit 36 OpenMP-Thread(s) ist korrekt.
		12. Berechnung: 3.346647 s. Die 12. Berechnung der Primzahlen mit 36 OpenMP-Thread(s) ist korrekt.
		13. Berechnung: 3.442496 s. Die 13. Berechnung der Primzahlen mit 36 OpenMP-Thread(s) ist korrekt.
		14. Berechnung: 3.446966 s. Die 14. Berechnung der Primzahlen mit 36 OpenMP-Thread(s) ist korrekt.
		15. Berechnung: 3.434933 s. Die 15. Berechnung der Primzahlen mit 36 OpenMP-Thread(s) ist korrekt.
		16. Berechnung: 3.507265 s. Die 16. Berechnung der Primzahlen mit 36 OpenMP-Thread(s) ist korrekt.
		17. Berechnung: 3.485046 s. Die 17. Berechnung der Primzahlen mit 36 OpenMP-Thread(s) ist korrekt.
		18. Berechnung: 3.351989 s. Die 18. Berechnung der Primzahlen mit 36 OpenMP-Thread(s) ist korrekt.
		19. Berechnung: 3.509162 s. Die 19. Berechnung der Primzahlen mit 36 OpenMP-Thread(s) ist korrekt.
		20. Berechnung: 3.444462 s. Die 20. Berechnung der Primzahlen mit 36 OpenMP-Thread(s) ist korrekt.
		21. Berechnung: 3.379733 s. Die 21. Berechnung der Primzahlen mit 36 OpenMP-Thread(s) ist korrekt.
		22. Berechnung: 3.472806 s. Die 22. Berechnung der Primzahlen mit 36 OpenMP-Thread(s) ist korrekt.
		23. Berechnung: 3.480546 s. Die 23. Berechnung der Primzahlen mit 36 OpenMP-Thread(s) ist korrekt.
		24. Berechnung: 3.407071 s. Die 24. Berechnung der Primzahlen mit 36 OpenMP-Thread(s) ist korrekt.
		25. Berechnung: 3.477561 s. Die 25. Berechnung der Primzahlen mit 36 OpenMP-Thread(s) ist korrekt.
		26. Berechnung: 3.451341 s. Die 26. Berechnung der Primzahlen mit 36 OpenMP-Thread(s) ist korrekt.
		27. Berechnung: 3.348085 s. Die 27. Berechnung der Primzahlen mit 36 OpenMP-Thread(s) ist korrekt.
		28. Berechnung: 3.496713 s. Die 28. Berechnung der Primzahlen mit 36 OpenMP-Thread(s) ist korrekt.
		29. Berechnung: 3.379298 s. Die 29. Berechnung der Primzahlen mit 36 OpenMP-Thread(s) ist korrekt.
		30. Berechnung: 3.472533 s. Die 30. Berechnung der Primzahlen mit 36 OpenMP-Thread(s) ist korrekt.
		31. Berechnung: 3.447729 s. Die 31. Berechnung der Primzahlen mit 36 OpenMP-Thread(s) ist korrekt.
		32. Berechnung: 3.384481 s. Die 32. Berechnung der Primzahlen mit 36 OpenMP-Thread(s) ist korrekt.
		33. Berechnung: 3.457320 s. Die 33. Berechnung der Primzahlen mit 36 OpenMP-Thread(s) ist korrekt.
		34. Berechnung: 3.499226 s. Die 34. Berechnung der Primzahlen mit 36 OpenMP-Thread(s) ist korrekt.
		35. Berechnung: 3.419858 s. Die 35. Berechnung der Primzahlen mit 36 OpenMP-Thread(s) ist korrekt.
		36. Berechnung: 3.438395 s. Die 36. Berechnung der Primzahlen mit 36 OpenMP-Thread(s) ist korrekt.
		37. Berechnung: 3.482171 s. Die 37. Berechnung der Primzahlen mit 36 OpenMP-Thread(s) ist korrekt.
		38. Berechnung: 3.411426 s. Die 38. Berechnung der Primzahlen mit 36 OpenMP-Thread(s) ist korrekt.
		39. Berechnung: 3.472922 s. Die 39. Berechnung der Primzahlen mit 36 OpenMP-Thread(s) ist korrekt.
		40. Berechnung: 3.456351 s. Die 40. Berechnung der Primzahlen mit 36 OpenMP-Thread(s) ist korrekt.
		41. Berechnung: 3.385621 s. Die 41. Berechnung der Primzahlen mit 36 OpenMP-Thread(s) ist korrekt.
		42. Berechnung: 3.452660 s. Die 42. Berechnung der Primzahlen mit 36 OpenMP-Thread(s) ist korrekt.
		43. Berechnung: 3.436211 s. Die 43. Berechnung der Primzahlen mit 36 OpenMP-Thread(s) ist korrekt.
		44. Berechnung: 3.346977 s. Die 44. Berechnung der Primzahlen mit 36 OpenMP-Thread(s) ist korrekt.
		45. Berechnung: 3.487019 s. Die 45. Berechnung der Primzahlen mit 36 OpenMP-Thread(s) ist korrekt.
		46. Berechnung: 3.441488 s. Die 46. Berechnung der Primzahlen mit 36 OpenMP-Thread(s) ist korrekt.
		47. Berechnung: 3.353842 s. Die 47. Berechnung der Primzahlen mit 36 OpenMP-Thread(s) ist korrekt.
		48. Berechnung: 3.427864 s. Die 48. Berechnung der Primzahlen mit 36 OpenMP-Thread(s) ist korrekt.
		49. Berechnung: 3.447909 s. Die 49. Berechnung der Primzahlen mit 36 OpenMP-Thread(s) ist korrekt.
		50. Berechnung: 3.409298 s. Die 50. Berechnung der Primzahlen mit 36 OpenMP-Thread(s) ist korrekt.
		Durchschnittliche Ausfuehrungszeit des Programmes bei 50 Durchlaeufen mit 36 OpenMP-Thread(s): 3.440274 s. Alle berechneten Primzahlen mit 36 OpenMP-Thread(s) sind korrekt.
	Berechnung mittels 38 OpenMP-Thread(s):
		1. Berechnung: 3.472797 s. Die 1. Berechnung der Primzahlen mit 38 OpenMP-Thread(s) ist korrekt.
		2. Berechnung: 3.424827 s. Die 2. Berechnung der Primzahlen mit 38 OpenMP-Thread(s) ist korrekt.
		3. Berechnung: 3.366193 s. Die 3. Berechnung der Primzahlen mit 38 OpenMP-Thread(s) ist korrekt.
		4. Berechnung: 3.472162 s. Die 4. Berechnung der Primzahlen mit 38 OpenMP-Thread(s) ist korrekt.
		5. Berechnung: 3.486914 s. Die 5. Berechnung der Primzahlen mit 38 OpenMP-Thread(s) ist korrekt.
		6. Berechnung: 3.368923 s. Die 6. Berechnung der Primzahlen mit 38 OpenMP-Thread(s) ist korrekt.
		7. Berechnung: 3.482747 s. Die 7. Berechnung der Primzahlen mit 38 OpenMP-Thread(s) ist korrekt.
		8. Berechnung: 3.489672 s. Die 8. Berechnung der Primzahlen mit 38 OpenMP-Thread(s) ist korrekt.
		9. Berechnung: 3.393610 s. Die 9. Berechnung der Primzahlen mit 38 OpenMP-Thread(s) ist korrekt.
		10. Berechnung: 3.487651 s. Die 10. Berechnung der Primzahlen mit 38 OpenMP-Thread(s) ist korrekt.
		11. Berechnung: 3.442207 s. Die 11. Berechnung der Primzahlen mit 38 OpenMP-Thread(s) ist korrekt.
		12. Berechnung: 3.418809 s. Die 12. Berechnung der Primzahlen mit 38 OpenMP-Thread(s) ist korrekt.
		13. Berechnung: 3.456846 s. Die 13. Berechnung der Primzahlen mit 38 OpenMP-Thread(s) ist korrekt.
		14. Berechnung: 3.335113 s. Die 14. Berechnung der Primzahlen mit 38 OpenMP-Thread(s) ist korrekt.
		15. Berechnung: 3.527615 s. Die 15. Berechnung der Primzahlen mit 38 OpenMP-Thread(s) ist korrekt.
		16. Berechnung: 3.483694 s. Die 16. Berechnung der Primzahlen mit 38 OpenMP-Thread(s) ist korrekt.
		17. Berechnung: 3.410181 s. Die 17. Berechnung der Primzahlen mit 38 OpenMP-Thread(s) ist korrekt.
		18. Berechnung: 3.468260 s. Die 18. Berechnung der Primzahlen mit 38 OpenMP-Thread(s) ist korrekt.
		19. Berechnung: 3.482620 s. Die 19. Berechnung der Primzahlen mit 38 OpenMP-Thread(s) ist korrekt.
		20. Berechnung: 3.383121 s. Die 20. Berechnung der Primzahlen mit 38 OpenMP-Thread(s) ist korrekt.
		21. Berechnung: 3.481453 s. Die 21. Berechnung der Primzahlen mit 38 OpenMP-Thread(s) ist korrekt.
		22. Berechnung: 3.455794 s. Die 22. Berechnung der Primzahlen mit 38 OpenMP-Thread(s) ist korrekt.
		23. Berechnung: 3.404784 s. Die 23. Berechnung der Primzahlen mit 38 OpenMP-Thread(s) ist korrekt.
		24. Berechnung: 3.484552 s. Die 24. Berechnung der Primzahlen mit 38 OpenMP-Thread(s) ist korrekt.
		25. Berechnung: 3.464353 s. Die 25. Berechnung der Primzahlen mit 38 OpenMP-Thread(s) ist korrekt.
		26. Berechnung: 3.404060 s. Die 26. Berechnung der Primzahlen mit 38 OpenMP-Thread(s) ist korrekt.
		27. Berechnung: 3.453547 s. Die 27. Berechnung der Primzahlen mit 38 OpenMP-Thread(s) ist korrekt.
		28. Berechnung: 3.469596 s. Die 28. Berechnung der Primzahlen mit 38 OpenMP-Thread(s) ist korrekt.
		29. Berechnung: 3.347556 s. Die 29. Berechnung der Primzahlen mit 38 OpenMP-Thread(s) ist korrekt.
		30. Berechnung: 3.460405 s. Die 30. Berechnung der Primzahlen mit 38 OpenMP-Thread(s) ist korrekt.
		31. Berechnung: 3.469154 s. Die 31. Berechnung der Primzahlen mit 38 OpenMP-Thread(s) ist korrekt.
		32. Berechnung: 3.398327 s. Die 32. Berechnung der Primzahlen mit 38 OpenMP-Thread(s) ist korrekt.
		33. Berechnung: 3.432286 s. Die 33. Berechnung der Primzahlen mit 38 OpenMP-Thread(s) ist korrekt.
		34. Berechnung: 3.473905 s. Die 34. Berechnung der Primzahlen mit 38 OpenMP-Thread(s) ist korrekt.
		35. Berechnung: 3.375870 s. Die 35. Berechnung der Primzahlen mit 38 OpenMP-Thread(s) ist korrekt.
		36. Berechnung: 3.487421 s. Die 36. Berechnung der Primzahlen mit 38 OpenMP-Thread(s) ist korrekt.
		37. Berechnung: 3.482613 s. Die 37. Berechnung der Primzahlen mit 38 OpenMP-Thread(s) ist korrekt.
		38. Berechnung: 3.351912 s. Die 38. Berechnung der Primzahlen mit 38 OpenMP-Thread(s) ist korrekt.
		39. Berechnung: 3.476867 s. Die 39. Berechnung der Primzahlen mit 38 OpenMP-Thread(s) ist korrekt.
		40. Berechnung: 3.473092 s. Die 40. Berechnung der Primzahlen mit 38 OpenMP-Thread(s) ist korrekt.
		41. Berechnung: 3.359838 s. Die 41. Berechnung der Primzahlen mit 38 OpenMP-Thread(s) ist korrekt.
		42. Berechnung: 3.456848 s. Die 42. Berechnung der Primzahlen mit 38 OpenMP-Thread(s) ist korrekt.
		43. Berechnung: 3.452538 s. Die 43. Berechnung der Primzahlen mit 38 OpenMP-Thread(s) ist korrekt.
		44. Berechnung: 3.382540 s. Die 44. Berechnung der Primzahlen mit 38 OpenMP-Thread(s) ist korrekt.
		45. Berechnung: 3.479344 s. Die 45. Berechnung der Primzahlen mit 38 OpenMP-Thread(s) ist korrekt.
		46. Berechnung: 3.432858 s. Die 46. Berechnung der Primzahlen mit 38 OpenMP-Thread(s) ist korrekt.
		47. Berechnung: 3.414732 s. Die 47. Berechnung der Primzahlen mit 38 OpenMP-Thread(s) ist korrekt.
		48. Berechnung: 3.465457 s. Die 48. Berechnung der Primzahlen mit 38 OpenMP-Thread(s) ist korrekt.
		49. Berechnung: 3.382129 s. Die 49. Berechnung der Primzahlen mit 38 OpenMP-Thread(s) ist korrekt.
		50. Berechnung: 3.438215 s. Die 50. Berechnung der Primzahlen mit 38 OpenMP-Thread(s) ist korrekt.
		Durchschnittliche Ausfuehrungszeit des Programmes bei 50 Durchlaeufen mit 38 OpenMP-Thread(s): 3.439320 s. Alle berechneten Primzahlen mit 38 OpenMP-Thread(s) sind korrekt.
	Berechnung mittels 40 OpenMP-Thread(s):
		1. Berechnung: 3.456164 s. Die 1. Berechnung der Primzahlen mit 40 OpenMP-Thread(s) ist korrekt.
		2. Berechnung: 3.387201 s. Die 2. Berechnung der Primzahlen mit 40 OpenMP-Thread(s) ist korrekt.
		3. Berechnung: 3.496441 s. Die 3. Berechnung der Primzahlen mit 40 OpenMP-Thread(s) ist korrekt.
		4. Berechnung: 3.449754 s. Die 4. Berechnung der Primzahlen mit 40 OpenMP-Thread(s) ist korrekt.
		5. Berechnung: 3.346383 s. Die 5. Berechnung der Primzahlen mit 40 OpenMP-Thread(s) ist korrekt.
		6. Berechnung: 3.467451 s. Die 6. Berechnung der Primzahlen mit 40 OpenMP-Thread(s) ist korrekt.
		7. Berechnung: 3.471820 s. Die 7. Berechnung der Primzahlen mit 40 OpenMP-Thread(s) ist korrekt.
		8. Berechnung: 3.362777 s. Die 8. Berechnung der Primzahlen mit 40 OpenMP-Thread(s) ist korrekt.
		9. Berechnung: 3.495368 s. Die 9. Berechnung der Primzahlen mit 40 OpenMP-Thread(s) ist korrekt.
		10. Berechnung: 3.455821 s. Die 10. Berechnung der Primzahlen mit 40 OpenMP-Thread(s) ist korrekt.
		11. Berechnung: 3.393080 s. Die 11. Berechnung der Primzahlen mit 40 OpenMP-Thread(s) ist korrekt.
		12. Berechnung: 3.488515 s. Die 12. Berechnung der Primzahlen mit 40 OpenMP-Thread(s) ist korrekt.
		13. Berechnung: 3.443876 s. Die 13. Berechnung der Primzahlen mit 40 OpenMP-Thread(s) ist korrekt.
		14. Berechnung: 3.370488 s. Die 14. Berechnung der Primzahlen mit 40 OpenMP-Thread(s) ist korrekt.
		15. Berechnung: 3.524784 s. Die 15. Berechnung der Primzahlen mit 40 OpenMP-Thread(s) ist korrekt.
		16. Berechnung: 3.466736 s. Die 16. Berechnung der Primzahlen mit 40 OpenMP-Thread(s) ist korrekt.
		17. Berechnung: 3.386871 s. Die 17. Berechnung der Primzahlen mit 40 OpenMP-Thread(s) ist korrekt.
		18. Berechnung: 3.461407 s. Die 18. Berechnung der Primzahlen mit 40 OpenMP-Thread(s) ist korrekt.
		19. Berechnung: 3.462602 s. Die 19. Berechnung der Primzahlen mit 40 OpenMP-Thread(s) ist korrekt.
		20. Berechnung: 3.387696 s. Die 20. Berechnung der Primzahlen mit 40 OpenMP-Thread(s) ist korrekt.
		21. Berechnung: 3.471176 s. Die 21. Berechnung der Primzahlen mit 40 OpenMP-Thread(s) ist korrekt.
		22. Berechnung: 3.468841 s. Die 22. Berechnung der Primzahlen mit 40 OpenMP-Thread(s) ist korrekt.
		23. Berechnung: 3.368288 s. Die 23. Berechnung der Primzahlen mit 40 OpenMP-Thread(s) ist korrekt.
		24. Berechnung: 3.440589 s. Die 24. Berechnung der Primzahlen mit 40 OpenMP-Thread(s) ist korrekt.
		25. Berechnung: 3.454700 s. Die 25. Berechnung der Primzahlen mit 40 OpenMP-Thread(s) ist korrekt.
		26. Berechnung: 3.360991 s. Die 26. Berechnung der Primzahlen mit 40 OpenMP-Thread(s) ist korrekt.
		27. Berechnung: 3.452177 s. Die 27. Berechnung der Primzahlen mit 40 OpenMP-Thread(s) ist korrekt.
		28. Berechnung: 3.444153 s. Die 28. Berechnung der Primzahlen mit 40 OpenMP-Thread(s) ist korrekt.
		29. Berechnung: 3.387149 s. Die 29. Berechnung der Primzahlen mit 40 OpenMP-Thread(s) ist korrekt.
		30. Berechnung: 3.487781 s. Die 30. Berechnung der Primzahlen mit 40 OpenMP-Thread(s) ist korrekt.
		31. Berechnung: 3.399895 s. Die 31. Berechnung der Primzahlen mit 40 OpenMP-Thread(s) ist korrekt.
		32. Berechnung: 3.457976 s. Die 32. Berechnung der Primzahlen mit 40 OpenMP-Thread(s) ist korrekt.
		33. Berechnung: 3.436684 s. Die 33. Berechnung der Primzahlen mit 40 OpenMP-Thread(s) ist korrekt.
		34. Berechnung: 3.397239 s. Die 34. Berechnung der Primzahlen mit 40 OpenMP-Thread(s) ist korrekt.
		35. Berechnung: 3.483411 s. Die 35. Berechnung der Primzahlen mit 40 OpenMP-Thread(s) ist korrekt.
		36. Berechnung: 3.436574 s. Die 36. Berechnung der Primzahlen mit 40 OpenMP-Thread(s) ist korrekt.
		37. Berechnung: 3.393411 s. Die 37. Berechnung der Primzahlen mit 40 OpenMP-Thread(s) ist korrekt.
		38. Berechnung: 3.436461 s. Die 38. Berechnung der Primzahlen mit 40 OpenMP-Thread(s) ist korrekt.
		39. Berechnung: 3.435985 s. Die 39. Berechnung der Primzahlen mit 40 OpenMP-Thread(s) ist korrekt.
		40. Berechnung: 3.379368 s. Die 40. Berechnung der Primzahlen mit 40 OpenMP-Thread(s) ist korrekt.
		41. Berechnung: 3.457985 s. Die 41. Berechnung der Primzahlen mit 40 OpenMP-Thread(s) ist korrekt.
		42. Berechnung: 3.449217 s. Die 42. Berechnung der Primzahlen mit 40 OpenMP-Thread(s) ist korrekt.
		43. Berechnung: 3.372351 s. Die 43. Berechnung der Primzahlen mit 40 OpenMP-Thread(s) ist korrekt.
		44. Berechnung: 3.478278 s. Die 44. Berechnung der Primzahlen mit 40 OpenMP-Thread(s) ist korrekt.
		45. Berechnung: 3.447031 s. Die 45. Berechnung der Primzahlen mit 40 OpenMP-Thread(s) ist korrekt.
		46. Berechnung: 3.405310 s. Die 46. Berechnung der Primzahlen mit 40 OpenMP-Thread(s) ist korrekt.
		47. Berechnung: 3.439928 s. Die 47. Berechnung der Primzahlen mit 40 OpenMP-Thread(s) ist korrekt.
		48. Berechnung: 3.456960 s. Die 48. Berechnung der Primzahlen mit 40 OpenMP-Thread(s) ist korrekt.
		49. Berechnung: 3.384807 s. Die 49. Berechnung der Primzahlen mit 40 OpenMP-Thread(s) ist korrekt.
		50. Berechnung: 3.477858 s. Die 50. Berechnung der Primzahlen mit 40 OpenMP-Thread(s) ist korrekt.
		Durchschnittliche Ausfuehrungszeit des Programmes bei 50 Durchlaeufen mit 40 OpenMP-Thread(s): 3.434756 s. Alle berechneten Primzahlen mit 40 OpenMP-Thread(s) sind korrekt.
	Berechnung mittels 42 OpenMP-Thread(s):
		1. Berechnung: 3.503667 s. Die 1. Berechnung der Primzahlen mit 42 OpenMP-Thread(s) ist korrekt.
		2. Berechnung: 3.368934 s. Die 2. Berechnung der Primzahlen mit 42 OpenMP-Thread(s) ist korrekt.
		3. Berechnung: 3.440440 s. Die 3. Berechnung der Primzahlen mit 42 OpenMP-Thread(s) ist korrekt.
		4. Berechnung: 3.470019 s. Die 4. Berechnung der Primzahlen mit 42 OpenMP-Thread(s) ist korrekt.
		5. Berechnung: 3.382588 s. Die 5. Berechnung der Primzahlen mit 42 OpenMP-Thread(s) ist korrekt.
		6. Berechnung: 3.449247 s. Die 6. Berechnung der Primzahlen mit 42 OpenMP-Thread(s) ist korrekt.
		7. Berechnung: 3.477972 s. Die 7. Berechnung der Primzahlen mit 42 OpenMP-Thread(s) ist korrekt.
		8. Berechnung: 3.663112 s. Die 8. Berechnung der Primzahlen mit 42 OpenMP-Thread(s) ist korrekt.
		9. Berechnung: 4.351312 s. Die 9. Berechnung der Primzahlen mit 42 OpenMP-Thread(s) ist korrekt.
		10. Berechnung: 4.122155 s. Die 10. Berechnung der Primzahlen mit 42 OpenMP-Thread(s) ist korrekt.
		11. Berechnung: 4.325453 s. Die 11. Berechnung der Primzahlen mit 42 OpenMP-Thread(s) ist korrekt.
		12. Berechnung: 3.400728 s. Die 12. Berechnung der Primzahlen mit 42 OpenMP-Thread(s) ist korrekt.
		13. Berechnung: 3.501905 s. Die 13. Berechnung der Primzahlen mit 42 OpenMP-Thread(s) ist korrekt.
		14. Berechnung: 3.461367 s. Die 14. Berechnung der Primzahlen mit 42 OpenMP-Thread(s) ist korrekt.
		15. Berechnung: 3.383319 s. Die 15. Berechnung der Primzahlen mit 42 OpenMP-Thread(s) ist korrekt.
		16. Berechnung: 3.469678 s. Die 16. Berechnung der Primzahlen mit 42 OpenMP-Thread(s) ist korrekt.
		17. Berechnung: 3.464819 s. Die 17. Berechnung der Primzahlen mit 42 OpenMP-Thread(s) ist korrekt.
		18. Berechnung: 3.386276 s. Die 18. Berechnung der Primzahlen mit 42 OpenMP-Thread(s) ist korrekt.
		19. Berechnung: 3.512191 s. Die 19. Berechnung der Primzahlen mit 42 OpenMP-Thread(s) ist korrekt.
		20. Berechnung: 3.431236 s. Die 20. Berechnung der Primzahlen mit 42 OpenMP-Thread(s) ist korrekt.
		21. Berechnung: 3.411072 s. Die 21. Berechnung der Primzahlen mit 42 OpenMP-Thread(s) ist korrekt.
		22. Berechnung: 3.564774 s. Die 22. Berechnung der Primzahlen mit 42 OpenMP-Thread(s) ist korrekt.
		23. Berechnung: 3.451212 s. Die 23. Berechnung der Primzahlen mit 42 OpenMP-Thread(s) ist korrekt.
		24. Berechnung: 3.342098 s. Die 24. Berechnung der Primzahlen mit 42 OpenMP-Thread(s) ist korrekt.
		25. Berechnung: 3.444352 s. Die 25. Berechnung der Primzahlen mit 42 OpenMP-Thread(s) ist korrekt.
		26. Berechnung: 3.508116 s. Die 26. Berechnung der Primzahlen mit 42 OpenMP-Thread(s) ist korrekt.
		27. Berechnung: 3.371624 s. Die 27. Berechnung der Primzahlen mit 42 OpenMP-Thread(s) ist korrekt.
		28. Berechnung: 3.451030 s. Die 28. Berechnung der Primzahlen mit 42 OpenMP-Thread(s) ist korrekt.
		29. Berechnung: 3.455192 s. Die 29. Berechnung der Primzahlen mit 42 OpenMP-Thread(s) ist korrekt.
		30. Berechnung: 3.364713 s. Die 30. Berechnung der Primzahlen mit 42 OpenMP-Thread(s) ist korrekt.
		31. Berechnung: 3.453628 s. Die 31. Berechnung der Primzahlen mit 42 OpenMP-Thread(s) ist korrekt.
		32. Berechnung: 3.365511 s. Die 32. Berechnung der Primzahlen mit 42 OpenMP-Thread(s) ist korrekt.
		33. Berechnung: 3.427738 s. Die 33. Berechnung der Primzahlen mit 42 OpenMP-Thread(s) ist korrekt.
		34. Berechnung: 3.465276 s. Die 34. Berechnung der Primzahlen mit 42 OpenMP-Thread(s) ist korrekt.
		35. Berechnung: 3.371907 s. Die 35. Berechnung der Primzahlen mit 42 OpenMP-Thread(s) ist korrekt.
		36. Berechnung: 3.438584 s. Die 36. Berechnung der Primzahlen mit 42 OpenMP-Thread(s) ist korrekt.
		37. Berechnung: 3.483829 s. Die 37. Berechnung der Primzahlen mit 42 OpenMP-Thread(s) ist korrekt.
		38. Berechnung: 3.378420 s. Die 38. Berechnung der Primzahlen mit 42 OpenMP-Thread(s) ist korrekt.
		39. Berechnung: 3.486980 s. Die 39. Berechnung der Primzahlen mit 42 OpenMP-Thread(s) ist korrekt.
		40. Berechnung: 3.465399 s. Die 40. Berechnung der Primzahlen mit 42 OpenMP-Thread(s) ist korrekt.
		41. Berechnung: 3.368461 s. Die 41. Berechnung der Primzahlen mit 42 OpenMP-Thread(s) ist korrekt.
		42. Berechnung: 3.485715 s. Die 42. Berechnung der Primzahlen mit 42 OpenMP-Thread(s) ist korrekt.
		43. Berechnung: 3.475089 s. Die 43. Berechnung der Primzahlen mit 42 OpenMP-Thread(s) ist korrekt.
		44. Berechnung: 3.348838 s. Die 44. Berechnung der Primzahlen mit 42 OpenMP-Thread(s) ist korrekt.
		45. Berechnung: 3.505893 s. Die 45. Berechnung der Primzahlen mit 42 OpenMP-Thread(s) ist korrekt.
		46. Berechnung: 3.598383 s. Die 46. Berechnung der Primzahlen mit 42 OpenMP-Thread(s) ist korrekt.
		47. Berechnung: 3.401217 s. Die 47. Berechnung der Primzahlen mit 42 OpenMP-Thread(s) ist korrekt.
		48. Berechnung: 3.478345 s. Die 48. Berechnung der Primzahlen mit 42 OpenMP-Thread(s) ist korrekt.
		49. Berechnung: 3.475992 s. Die 49. Berechnung der Primzahlen mit 42 OpenMP-Thread(s) ist korrekt.
		50. Berechnung: 3.407325 s. Die 50. Berechnung der Primzahlen mit 42 OpenMP-Thread(s) ist korrekt.
		Durchschnittliche Ausfuehrungszeit des Programmes bei 50 Durchlaeufen mit 42 OpenMP-Thread(s): 3.496263 s. Alle berechneten Primzahlen mit 42 OpenMP-Thread(s) sind korrekt.
	Berechnung mittels 44 OpenMP-Thread(s):
		1. Berechnung: 3.520973 s. Die 1. Berechnung der Primzahlen mit 44 OpenMP-Thread(s) ist korrekt.
		2. Berechnung: 3.487982 s. Die 2. Berechnung der Primzahlen mit 44 OpenMP-Thread(s) ist korrekt.
		3. Berechnung: 3.385411 s. Die 3. Berechnung der Primzahlen mit 44 OpenMP-Thread(s) ist korrekt.
		4. Berechnung: 3.493663 s. Die 4. Berechnung der Primzahlen mit 44 OpenMP-Thread(s) ist korrekt.
		5. Berechnung: 3.490195 s. Die 5. Berechnung der Primzahlen mit 44 OpenMP-Thread(s) ist korrekt.
		6. Berechnung: 3.372189 s. Die 6. Berechnung der Primzahlen mit 44 OpenMP-Thread(s) ist korrekt.
		7. Berechnung: 3.463094 s. Die 7. Berechnung der Primzahlen mit 44 OpenMP-Thread(s) ist korrekt.
		8. Berechnung: 3.453387 s. Die 8. Berechnung der Primzahlen mit 44 OpenMP-Thread(s) ist korrekt.
		9. Berechnung: 3.398840 s. Die 9. Berechnung der Primzahlen mit 44 OpenMP-Thread(s) ist korrekt.
		10. Berechnung: 3.441258 s. Die 10. Berechnung der Primzahlen mit 44 OpenMP-Thread(s) ist korrekt.
		11. Berechnung: 3.449588 s. Die 11. Berechnung der Primzahlen mit 44 OpenMP-Thread(s) ist korrekt.
		12. Berechnung: 3.412536 s. Die 12. Berechnung der Primzahlen mit 44 OpenMP-Thread(s) ist korrekt.
		13. Berechnung: 3.486364 s. Die 13. Berechnung der Primzahlen mit 44 OpenMP-Thread(s) ist korrekt.
		14. Berechnung: 3.438378 s. Die 14. Berechnung der Primzahlen mit 44 OpenMP-Thread(s) ist korrekt.
		15. Berechnung: 3.392467 s. Die 15. Berechnung der Primzahlen mit 44 OpenMP-Thread(s) ist korrekt.
		16. Berechnung: 3.480926 s. Die 16. Berechnung der Primzahlen mit 44 OpenMP-Thread(s) ist korrekt.
		17. Berechnung: 3.457529 s. Die 17. Berechnung der Primzahlen mit 44 OpenMP-Thread(s) ist korrekt.
		18. Berechnung: 3.366691 s. Die 18. Berechnung der Primzahlen mit 44 OpenMP-Thread(s) ist korrekt.
		19. Berechnung: 3.426948 s. Die 19. Berechnung der Primzahlen mit 44 OpenMP-Thread(s) ist korrekt.
		20. Berechnung: 3.394494 s. Die 20. Berechnung der Primzahlen mit 44 OpenMP-Thread(s) ist korrekt.
		21. Berechnung: 3.400299 s. Die 21. Berechnung der Primzahlen mit 44 OpenMP-Thread(s) ist korrekt.
		22. Berechnung: 3.483406 s. Die 22. Berechnung der Primzahlen mit 44 OpenMP-Thread(s) ist korrekt.
		23. Berechnung: 3.386413 s. Die 23. Berechnung der Primzahlen mit 44 OpenMP-Thread(s) ist korrekt.
		24. Berechnung: 3.489343 s. Die 24. Berechnung der Primzahlen mit 44 OpenMP-Thread(s) ist korrekt.
		25. Berechnung: 3.430997 s. Die 25. Berechnung der Primzahlen mit 44 OpenMP-Thread(s) ist korrekt.
		26. Berechnung: 3.346150 s. Die 26. Berechnung der Primzahlen mit 44 OpenMP-Thread(s) ist korrekt.
		27. Berechnung: 3.434437 s. Die 27. Berechnung der Primzahlen mit 44 OpenMP-Thread(s) ist korrekt.
		28. Berechnung: 3.479741 s. Die 28. Berechnung der Primzahlen mit 44 OpenMP-Thread(s) ist korrekt.
		29. Berechnung: 3.379103 s. Die 29. Berechnung der Primzahlen mit 44 OpenMP-Thread(s) ist korrekt.
		30. Berechnung: 3.433768 s. Die 30. Berechnung der Primzahlen mit 44 OpenMP-Thread(s) ist korrekt.
		31. Berechnung: 3.467709 s. Die 31. Berechnung der Primzahlen mit 44 OpenMP-Thread(s) ist korrekt.
		32. Berechnung: 3.379386 s. Die 32. Berechnung der Primzahlen mit 44 OpenMP-Thread(s) ist korrekt.
		33. Berechnung: 3.459638 s. Die 33. Berechnung der Primzahlen mit 44 OpenMP-Thread(s) ist korrekt.
		34. Berechnung: 3.429532 s. Die 34. Berechnung der Primzahlen mit 44 OpenMP-Thread(s) ist korrekt.
		35. Berechnung: 3.396701 s. Die 35. Berechnung der Primzahlen mit 44 OpenMP-Thread(s) ist korrekt.
		36. Berechnung: 3.435889 s. Die 36. Berechnung der Primzahlen mit 44 OpenMP-Thread(s) ist korrekt.
		37. Berechnung: 3.454234 s. Die 37. Berechnung der Primzahlen mit 44 OpenMP-Thread(s) ist korrekt.
		38. Berechnung: 3.345516 s. Die 38. Berechnung der Primzahlen mit 44 OpenMP-Thread(s) ist korrekt.
		39. Berechnung: 3.458285 s. Die 39. Berechnung der Primzahlen mit 44 OpenMP-Thread(s) ist korrekt.
		40. Berechnung: 3.428832 s. Die 40. Berechnung der Primzahlen mit 44 OpenMP-Thread(s) ist korrekt.
		41. Berechnung: 3.384827 s. Die 41. Berechnung der Primzahlen mit 44 OpenMP-Thread(s) ist korrekt.
		42. Berechnung: 3.526915 s. Die 42. Berechnung der Primzahlen mit 44 OpenMP-Thread(s) ist korrekt.
		43. Berechnung: 3.572987 s. Die 43. Berechnung der Primzahlen mit 44 OpenMP-Thread(s) ist korrekt.
		44. Berechnung: 3.560590 s. Die 44. Berechnung der Primzahlen mit 44 OpenMP-Thread(s) ist korrekt.
		45. Berechnung: 3.496270 s. Die 45. Berechnung der Primzahlen mit 44 OpenMP-Thread(s) ist korrekt.
		46. Berechnung: 3.449986 s. Die 46. Berechnung der Primzahlen mit 44 OpenMP-Thread(s) ist korrekt.
		47. Berechnung: 3.365444 s. Die 47. Berechnung der Primzahlen mit 44 OpenMP-Thread(s) ist korrekt.
		48. Berechnung: 3.491975 s. Die 48. Berechnung der Primzahlen mit 44 OpenMP-Thread(s) ist korrekt.
		49. Berechnung: 3.454562 s. Die 49. Berechnung der Primzahlen mit 44 OpenMP-Thread(s) ist korrekt.
		50. Berechnung: 3.369377 s. Die 50. Berechnung der Primzahlen mit 44 OpenMP-Thread(s) ist korrekt.
		Durchschnittliche Ausfuehrungszeit des Programmes bei 50 Durchlaeufen mit 44 OpenMP-Thread(s): 3.440104 s. Alle berechneten Primzahlen mit 44 OpenMP-Thread(s) sind korrekt.
	Berechnung mittels 46 OpenMP-Thread(s):
		1. Berechnung: 3.456203 s. Die 1. Berechnung der Primzahlen mit 46 OpenMP-Thread(s) ist korrekt.
		2. Berechnung: 3.434803 s. Die 2. Berechnung der Primzahlen mit 46 OpenMP-Thread(s) ist korrekt.
		3. Berechnung: 3.386697 s. Die 3. Berechnung der Primzahlen mit 46 OpenMP-Thread(s) ist korrekt.
		4. Berechnung: 3.421937 s. Die 4. Berechnung der Primzahlen mit 46 OpenMP-Thread(s) ist korrekt.
		5. Berechnung: 3.369341 s. Die 5. Berechnung der Primzahlen mit 46 OpenMP-Thread(s) ist korrekt.
		6. Berechnung: 3.459531 s. Die 6. Berechnung der Primzahlen mit 46 OpenMP-Thread(s) ist korrekt.
		7. Berechnung: 3.469737 s. Die 7. Berechnung der Primzahlen mit 46 OpenMP-Thread(s) ist korrekt.
		8. Berechnung: 3.351376 s. Die 8. Berechnung der Primzahlen mit 46 OpenMP-Thread(s) ist korrekt.
		9. Berechnung: 3.484789 s. Die 9. Berechnung der Primzahlen mit 46 OpenMP-Thread(s) ist korrekt.
		10. Berechnung: 3.440923 s. Die 10. Berechnung der Primzahlen mit 46 OpenMP-Thread(s) ist korrekt.
		11. Berechnung: 3.375781 s. Die 11. Berechnung der Primzahlen mit 46 OpenMP-Thread(s) ist korrekt.
		12. Berechnung: 3.471494 s. Die 12. Berechnung der Primzahlen mit 46 OpenMP-Thread(s) ist korrekt.
		13. Berechnung: 3.435321 s. Die 13. Berechnung der Primzahlen mit 46 OpenMP-Thread(s) ist korrekt.
		14. Berechnung: 3.380514 s. Die 14. Berechnung der Primzahlen mit 46 OpenMP-Thread(s) ist korrekt.
		15. Berechnung: 3.474871 s. Die 15. Berechnung der Primzahlen mit 46 OpenMP-Thread(s) ist korrekt.
		16. Berechnung: 3.451092 s. Die 16. Berechnung der Primzahlen mit 46 OpenMP-Thread(s) ist korrekt.
		17. Berechnung: 3.366029 s. Die 17. Berechnung der Primzahlen mit 46 OpenMP-Thread(s) ist korrekt.
		18. Berechnung: 3.468308 s. Die 18. Berechnung der Primzahlen mit 46 OpenMP-Thread(s) ist korrekt.
		19. Berechnung: 3.465503 s. Die 19. Berechnung der Primzahlen mit 46 OpenMP-Thread(s) ist korrekt.
		20. Berechnung: 3.328895 s. Die 20. Berechnung der Primzahlen mit 46 OpenMP-Thread(s) ist korrekt.
		21. Berechnung: 3.460446 s. Die 21. Berechnung der Primzahlen mit 46 OpenMP-Thread(s) ist korrekt.
		22. Berechnung: 3.444715 s. Die 22. Berechnung der Primzahlen mit 46 OpenMP-Thread(s) ist korrekt.
		23. Berechnung: 3.371437 s. Die 23. Berechnung der Primzahlen mit 46 OpenMP-Thread(s) ist korrekt.
		24. Berechnung: 3.450163 s. Die 24. Berechnung der Primzahlen mit 46 OpenMP-Thread(s) ist korrekt.
		25. Berechnung: 3.447643 s. Die 25. Berechnung der Primzahlen mit 46 OpenMP-Thread(s) ist korrekt.
		26. Berechnung: 3.368650 s. Die 26. Berechnung der Primzahlen mit 46 OpenMP-Thread(s) ist korrekt.
		27. Berechnung: 3.459588 s. Die 27. Berechnung der Primzahlen mit 46 OpenMP-Thread(s) ist korrekt.
		28. Berechnung: 3.433890 s. Die 28. Berechnung der Primzahlen mit 46 OpenMP-Thread(s) ist korrekt.
		29. Berechnung: 3.369368 s. Die 29. Berechnung der Primzahlen mit 46 OpenMP-Thread(s) ist korrekt.
		30. Berechnung: 3.470412 s. Die 30. Berechnung der Primzahlen mit 46 OpenMP-Thread(s) ist korrekt.
		31. Berechnung: 3.425890 s. Die 31. Berechnung der Primzahlen mit 46 OpenMP-Thread(s) ist korrekt.
		32. Berechnung: 3.382006 s. Die 32. Berechnung der Primzahlen mit 46 OpenMP-Thread(s) ist korrekt.
		33. Berechnung: 3.432015 s. Die 33. Berechnung der Primzahlen mit 46 OpenMP-Thread(s) ist korrekt.
		34. Berechnung: 3.377356 s. Die 34. Berechnung der Primzahlen mit 46 OpenMP-Thread(s) ist korrekt.
		35. Berechnung: 3.448863 s. Die 35. Berechnung der Primzahlen mit 46 OpenMP-Thread(s) ist korrekt.
		36. Berechnung: 3.422998 s. Die 36. Berechnung der Primzahlen mit 46 OpenMP-Thread(s) ist korrekt.
		37. Berechnung: 3.355610 s. Die 37. Berechnung der Primzahlen mit 46 OpenMP-Thread(s) ist korrekt.
		38. Berechnung: 3.463057 s. Die 38. Berechnung der Primzahlen mit 46 OpenMP-Thread(s) ist korrekt.
		39. Berechnung: 3.481253 s. Die 39. Berechnung der Primzahlen mit 46 OpenMP-Thread(s) ist korrekt.
		40. Berechnung: 3.372712 s. Die 40. Berechnung der Primzahlen mit 46 OpenMP-Thread(s) ist korrekt.
		41. Berechnung: 3.467203 s. Die 41. Berechnung der Primzahlen mit 46 OpenMP-Thread(s) ist korrekt.
		42. Berechnung: 3.434169 s. Die 42. Berechnung der Primzahlen mit 46 OpenMP-Thread(s) ist korrekt.
		43. Berechnung: 3.360758 s. Die 43. Berechnung der Primzahlen mit 46 OpenMP-Thread(s) ist korrekt.
		44. Berechnung: 3.457488 s. Die 44. Berechnung der Primzahlen mit 46 OpenMP-Thread(s) ist korrekt.
		45. Berechnung: 3.479375 s. Die 45. Berechnung der Primzahlen mit 46 OpenMP-Thread(s) ist korrekt.
		46. Berechnung: 3.366659 s. Die 46. Berechnung der Primzahlen mit 46 OpenMP-Thread(s) ist korrekt.
		47. Berechnung: 3.458120 s. Die 47. Berechnung der Primzahlen mit 46 OpenMP-Thread(s) ist korrekt.
		48. Berechnung: 3.467480 s. Die 48. Berechnung der Primzahlen mit 46 OpenMP-Thread(s) ist korrekt.
		49. Berechnung: 3.375872 s. Die 49. Berechnung der Primzahlen mit 46 OpenMP-Thread(s) ist korrekt.
		50. Berechnung: 3.504993 s. Die 50. Berechnung der Primzahlen mit 46 OpenMP-Thread(s) ist korrekt.
		Durchschnittliche Ausfuehrungszeit des Programmes bei 50 Durchlaeufen mit 46 OpenMP-Thread(s): 3.426067 s. Alle berechneten Primzahlen mit 46 OpenMP-Thread(s) sind korrekt.
	Berechnung mittels 48 OpenMP-Thread(s):
		1. Berechnung: 3.478517 s. Die 1. Berechnung der Primzahlen mit 48 OpenMP-Thread(s) ist korrekt.
		2. Berechnung: 3.423781 s. Die 2. Berechnung der Primzahlen mit 48 OpenMP-Thread(s) ist korrekt.
		3. Berechnung: 3.514570 s. Die 3. Berechnung der Primzahlen mit 48 OpenMP-Thread(s) ist korrekt.
		4. Berechnung: 3.527569 s. Die 4. Berechnung der Primzahlen mit 48 OpenMP-Thread(s) ist korrekt.
		5. Berechnung: 3.425043 s. Die 5. Berechnung der Primzahlen mit 48 OpenMP-Thread(s) ist korrekt.
		6. Berechnung: 3.480318 s. Die 6. Berechnung der Primzahlen mit 48 OpenMP-Thread(s) ist korrekt.
		7. Berechnung: 3.456090 s. Die 7. Berechnung der Primzahlen mit 48 OpenMP-Thread(s) ist korrekt.
		8. Berechnung: 3.408633 s. Die 8. Berechnung der Primzahlen mit 48 OpenMP-Thread(s) ist korrekt.
		9. Berechnung: 3.526612 s. Die 9. Berechnung der Primzahlen mit 48 OpenMP-Thread(s) ist korrekt.
		10. Berechnung: 3.493777 s. Die 10. Berechnung der Primzahlen mit 48 OpenMP-Thread(s) ist korrekt.
		11. Berechnung: 3.408626 s. Die 11. Berechnung der Primzahlen mit 48 OpenMP-Thread(s) ist korrekt.
		12. Berechnung: 3.537595 s. Die 12. Berechnung der Primzahlen mit 48 OpenMP-Thread(s) ist korrekt.
		13. Berechnung: 3.508231 s. Die 13. Berechnung der Primzahlen mit 48 OpenMP-Thread(s) ist korrekt.
		14. Berechnung: 3.437876 s. Die 14. Berechnung der Primzahlen mit 48 OpenMP-Thread(s) ist korrekt.
		15. Berechnung: 3.504777 s. Die 15. Berechnung der Primzahlen mit 48 OpenMP-Thread(s) ist korrekt.
		16. Berechnung: 3.485903 s. Die 16. Berechnung der Primzahlen mit 48 OpenMP-Thread(s) ist korrekt.
		17. Berechnung: 3.418023 s. Die 17. Berechnung der Primzahlen mit 48 OpenMP-Thread(s) ist korrekt.
		18. Berechnung: 3.484458 s. Die 18. Berechnung der Primzahlen mit 48 OpenMP-Thread(s) ist korrekt.
		19. Berechnung: 3.492825 s. Die 19. Berechnung der Primzahlen mit 48 OpenMP-Thread(s) ist korrekt.
		20. Berechnung: 3.427590 s. Die 20. Berechnung der Primzahlen mit 48 OpenMP-Thread(s) ist korrekt.
		21. Berechnung: 3.525085 s. Die 21. Berechnung der Primzahlen mit 48 OpenMP-Thread(s) ist korrekt.
		22. Berechnung: 3.492078 s. Die 22. Berechnung der Primzahlen mit 48 OpenMP-Thread(s) ist korrekt.
		23. Berechnung: 3.425488 s. Die 23. Berechnung der Primzahlen mit 48 OpenMP-Thread(s) ist korrekt.
		24. Berechnung: 3.503910 s. Die 24. Berechnung der Primzahlen mit 48 OpenMP-Thread(s) ist korrekt.
		25. Berechnung: 3.502764 s. Die 25. Berechnung der Primzahlen mit 48 OpenMP-Thread(s) ist korrekt.
		26. Berechnung: 3.339768 s. Die 26. Berechnung der Primzahlen mit 48 OpenMP-Thread(s) ist korrekt.
		27. Berechnung: 3.456243 s. Die 27. Berechnung der Primzahlen mit 48 OpenMP-Thread(s) ist korrekt.
		28. Berechnung: 3.402229 s. Die 28. Berechnung der Primzahlen mit 48 OpenMP-Thread(s) ist korrekt.
		29. Berechnung: 3.429569 s. Die 29. Berechnung der Primzahlen mit 48 OpenMP-Thread(s) ist korrekt.
		30. Berechnung: 3.419461 s. Die 30. Berechnung der Primzahlen mit 48 OpenMP-Thread(s) ist korrekt.
		31. Berechnung: 3.398029 s. Die 31. Berechnung der Primzahlen mit 48 OpenMP-Thread(s) ist korrekt.
		32. Berechnung: 3.491549 s. Die 32. Berechnung der Primzahlen mit 48 OpenMP-Thread(s) ist korrekt.
		33. Berechnung: 3.450199 s. Die 33. Berechnung der Primzahlen mit 48 OpenMP-Thread(s) ist korrekt.
		34. Berechnung: 3.368728 s. Die 34. Berechnung der Primzahlen mit 48 OpenMP-Thread(s) ist korrekt.
		35. Berechnung: 3.478762 s. Die 35. Berechnung der Primzahlen mit 48 OpenMP-Thread(s) ist korrekt.
		36. Berechnung: 3.446099 s. Die 36. Berechnung der Primzahlen mit 48 OpenMP-Thread(s) ist korrekt.
		37. Berechnung: 3.357870 s. Die 37. Berechnung der Primzahlen mit 48 OpenMP-Thread(s) ist korrekt.
		38. Berechnung: 3.447222 s. Die 38. Berechnung der Primzahlen mit 48 OpenMP-Thread(s) ist korrekt.
		39. Berechnung: 3.472410 s. Die 39. Berechnung der Primzahlen mit 48 OpenMP-Thread(s) ist korrekt.
		40. Berechnung: 3.362567 s. Die 40. Berechnung der Primzahlen mit 48 OpenMP-Thread(s) ist korrekt.
		41. Berechnung: 3.542221 s. Die 41. Berechnung der Primzahlen mit 48 OpenMP-Thread(s) ist korrekt.
		42. Berechnung: 3.437850 s. Die 42. Berechnung der Primzahlen mit 48 OpenMP-Thread(s) ist korrekt.
		43. Berechnung: 3.347840 s. Die 43. Berechnung der Primzahlen mit 48 OpenMP-Thread(s) ist korrekt.
		44. Berechnung: 3.444538 s. Die 44. Berechnung der Primzahlen mit 48 OpenMP-Thread(s) ist korrekt.
		45. Berechnung: 3.469915 s. Die 45. Berechnung der Primzahlen mit 48 OpenMP-Thread(s) ist korrekt.
		46. Berechnung: 3.433420 s. Die 46. Berechnung der Primzahlen mit 48 OpenMP-Thread(s) ist korrekt.
		47. Berechnung: 3.433407 s. Die 47. Berechnung der Primzahlen mit 48 OpenMP-Thread(s) ist korrekt.
		48. Berechnung: 3.437275 s. Die 48. Berechnung der Primzahlen mit 48 OpenMP-Thread(s) ist korrekt.
		49. Berechnung: 3.356130 s. Die 49. Berechnung der Primzahlen mit 48 OpenMP-Thread(s) ist korrekt.
		50. Berechnung: 3.417604 s. Die 50. Berechnung der Primzahlen mit 48 OpenMP-Thread(s) ist korrekt.
		Durchschnittliche Ausfuehrungszeit des Programmes bei 50 Durchlaeufen mit 48 OpenMP-Thread(s): 3.450621 s. Alle berechneten Primzahlen mit 48 OpenMP-Thread(s) sind korrekt.
	Berechnung mittels 50 OpenMP-Thread(s):
		1. Berechnung: 3.465969 s. Die 1. Berechnung der Primzahlen mit 50 OpenMP-Thread(s) ist korrekt.
		2. Berechnung: 3.376679 s. Die 2. Berechnung der Primzahlen mit 50 OpenMP-Thread(s) ist korrekt.
		3. Berechnung: 3.463297 s. Die 3. Berechnung der Primzahlen mit 50 OpenMP-Thread(s) ist korrekt.
		4. Berechnung: 3.445586 s. Die 4. Berechnung der Primzahlen mit 50 OpenMP-Thread(s) ist korrekt.
		5. Berechnung: 3.362224 s. Die 5. Berechnung der Primzahlen mit 50 OpenMP-Thread(s) ist korrekt.
		6. Berechnung: 3.459682 s. Die 6. Berechnung der Primzahlen mit 50 OpenMP-Thread(s) ist korrekt.
		7. Berechnung: 3.407139 s. Die 7. Berechnung der Primzahlen mit 50 OpenMP-Thread(s) ist korrekt.
		8. Berechnung: 3.397451 s. Die 8. Berechnung der Primzahlen mit 50 OpenMP-Thread(s) ist korrekt.
		9. Berechnung: 3.456289 s. Die 9. Berechnung der Primzahlen mit 50 OpenMP-Thread(s) ist korrekt.
		10. Berechnung: 3.404032 s. Die 10. Berechnung der Primzahlen mit 50 OpenMP-Thread(s) ist korrekt.
		11. Berechnung: 3.448967 s. Die 11. Berechnung der Primzahlen mit 50 OpenMP-Thread(s) ist korrekt.
		12. Berechnung: 3.456974 s. Die 12. Berechnung der Primzahlen mit 50 OpenMP-Thread(s) ist korrekt.
		13. Berechnung: 3.403604 s. Die 13. Berechnung der Primzahlen mit 50 OpenMP-Thread(s) ist korrekt.
		14. Berechnung: 3.464695 s. Die 14. Berechnung der Primzahlen mit 50 OpenMP-Thread(s) ist korrekt.
		15. Berechnung: 3.482717 s. Die 15. Berechnung der Primzahlen mit 50 OpenMP-Thread(s) ist korrekt.
		16. Berechnung: 3.324835 s. Die 16. Berechnung der Primzahlen mit 50 OpenMP-Thread(s) ist korrekt.
		17. Berechnung: 3.468593 s. Die 17. Berechnung der Primzahlen mit 50 OpenMP-Thread(s) ist korrekt.
		18. Berechnung: 3.477611 s. Die 18. Berechnung der Primzahlen mit 50 OpenMP-Thread(s) ist korrekt.
		19. Berechnung: 3.367331 s. Die 19. Berechnung der Primzahlen mit 50 OpenMP-Thread(s) ist korrekt.
		20. Berechnung: 3.490697 s. Die 20. Berechnung der Primzahlen mit 50 OpenMP-Thread(s) ist korrekt.
		21. Berechnung: 3.485949 s. Die 21. Berechnung der Primzahlen mit 50 OpenMP-Thread(s) ist korrekt.
		22. Berechnung: 3.370333 s. Die 22. Berechnung der Primzahlen mit 50 OpenMP-Thread(s) ist korrekt.
		23. Berechnung: 3.523563 s. Die 23. Berechnung der Primzahlen mit 50 OpenMP-Thread(s) ist korrekt.
		24. Berechnung: 3.499784 s. Die 24. Berechnung der Primzahlen mit 50 OpenMP-Thread(s) ist korrekt.
		25. Berechnung: 3.363378 s. Die 25. Berechnung der Primzahlen mit 50 OpenMP-Thread(s) ist korrekt.
		26. Berechnung: 3.519389 s. Die 26. Berechnung der Primzahlen mit 50 OpenMP-Thread(s) ist korrekt.
		27. Berechnung: 3.474229 s. Die 27. Berechnung der Primzahlen mit 50 OpenMP-Thread(s) ist korrekt.
		28. Berechnung: 3.421918 s. Die 28. Berechnung der Primzahlen mit 50 OpenMP-Thread(s) ist korrekt.
		29. Berechnung: 3.489714 s. Die 29. Berechnung der Primzahlen mit 50 OpenMP-Thread(s) ist korrekt.
		30. Berechnung: 3.483552 s. Die 30. Berechnung der Primzahlen mit 50 OpenMP-Thread(s) ist korrekt.
		31. Berechnung: 3.508038 s. Die 31. Berechnung der Primzahlen mit 50 OpenMP-Thread(s) ist korrekt.
		32. Berechnung: 3.470591 s. Die 32. Berechnung der Primzahlen mit 50 OpenMP-Thread(s) ist korrekt.
		33. Berechnung: 3.528730 s. Die 33. Berechnung der Primzahlen mit 50 OpenMP-Thread(s) ist korrekt.
		34. Berechnung: 3.462656 s. Die 34. Berechnung der Primzahlen mit 50 OpenMP-Thread(s) ist korrekt.
		35. Berechnung: 3.493222 s. Die 35. Berechnung der Primzahlen mit 50 OpenMP-Thread(s) ist korrekt.
		36. Berechnung: 3.510356 s. Die 36. Berechnung der Primzahlen mit 50 OpenMP-Thread(s) ist korrekt.
		37. Berechnung: 3.392802 s. Die 37. Berechnung der Primzahlen mit 50 OpenMP-Thread(s) ist korrekt.
		38. Berechnung: 3.466474 s. Die 38. Berechnung der Primzahlen mit 50 OpenMP-Thread(s) ist korrekt.
		39. Berechnung: 3.535153 s. Die 39. Berechnung der Primzahlen mit 50 OpenMP-Thread(s) ist korrekt.
		40. Berechnung: 3.409666 s. Die 40. Berechnung der Primzahlen mit 50 OpenMP-Thread(s) ist korrekt.
		41. Berechnung: 3.499982 s. Die 41. Berechnung der Primzahlen mit 50 OpenMP-Thread(s) ist korrekt.
		42. Berechnung: 3.530590 s. Die 42. Berechnung der Primzahlen mit 50 OpenMP-Thread(s) ist korrekt.
		43. Berechnung: 3.451028 s. Die 43. Berechnung der Primzahlen mit 50 OpenMP-Thread(s) ist korrekt.
		44. Berechnung: 3.510231 s. Die 44. Berechnung der Primzahlen mit 50 OpenMP-Thread(s) ist korrekt.
		45. Berechnung: 3.495363 s. Die 45. Berechnung der Primzahlen mit 50 OpenMP-Thread(s) ist korrekt.
		46. Berechnung: 3.382910 s. Die 46. Berechnung der Primzahlen mit 50 OpenMP-Thread(s) ist korrekt.
		47. Berechnung: 3.470451 s. Die 47. Berechnung der Primzahlen mit 50 OpenMP-Thread(s) ist korrekt.
		48. Berechnung: 3.488644 s. Die 48. Berechnung der Primzahlen mit 50 OpenMP-Thread(s) ist korrekt.
		49. Berechnung: 3.453927 s. Die 49. Berechnung der Primzahlen mit 50 OpenMP-Thread(s) ist korrekt.
		50. Berechnung: 3.482517 s. Die 50. Berechnung der Primzahlen mit 50 OpenMP-Thread(s) ist korrekt.
		Durchschnittliche Ausfuehrungszeit des Programmes bei 50 Durchlaeufen mit 50 OpenMP-Thread(s): 3.455990 s. Alle berechneten Primzahlen mit 50 OpenMP-Thread(s) sind korrekt.
	Berechnung mittels 100 OpenMP-Thread(s):
		1. Berechnung: 3.482424 s. Die 1. Berechnung der Primzahlen mit 100 OpenMP-Thread(s) ist korrekt.
		2. Berechnung: 3.387252 s. Die 2. Berechnung der Primzahlen mit 100 OpenMP-Thread(s) ist korrekt.
		3. Berechnung: 3.506175 s. Die 3. Berechnung der Primzahlen mit 100 OpenMP-Thread(s) ist korrekt.
		4. Berechnung: 3.508450 s. Die 4. Berechnung der Primzahlen mit 100 OpenMP-Thread(s) ist korrekt.
		5. Berechnung: 3.400197 s. Die 5. Berechnung der Primzahlen mit 100 OpenMP-Thread(s) ist korrekt.
		6. Berechnung: 3.493245 s. Die 6. Berechnung der Primzahlen mit 100 OpenMP-Thread(s) ist korrekt.
		7. Berechnung: 3.476926 s. Die 7. Berechnung der Primzahlen mit 100 OpenMP-Thread(s) ist korrekt.
		8. Berechnung: 3.382120 s. Die 8. Berechnung der Primzahlen mit 100 OpenMP-Thread(s) ist korrekt.
		9. Berechnung: 3.499508 s. Die 9. Berechnung der Primzahlen mit 100 OpenMP-Thread(s) ist korrekt.
		10. Berechnung: 3.470547 s. Die 10. Berechnung der Primzahlen mit 100 OpenMP-Thread(s) ist korrekt.
		11. Berechnung: 3.392777 s. Die 11. Berechnung der Primzahlen mit 100 OpenMP-Thread(s) ist korrekt.
		12. Berechnung: 3.482248 s. Die 12. Berechnung der Primzahlen mit 100 OpenMP-Thread(s) ist korrekt.
		13. Berechnung: 3.468950 s. Die 13. Berechnung der Primzahlen mit 100 OpenMP-Thread(s) ist korrekt.
		14. Berechnung: 3.395508 s. Die 14. Berechnung der Primzahlen mit 100 OpenMP-Thread(s) ist korrekt.
		15. Berechnung: 3.470942 s. Die 15. Berechnung der Primzahlen mit 100 OpenMP-Thread(s) ist korrekt.
		16. Berechnung: 3.454250 s. Die 16. Berechnung der Primzahlen mit 100 OpenMP-Thread(s) ist korrekt.
		17. Berechnung: 3.394195 s. Die 17. Berechnung der Primzahlen mit 100 OpenMP-Thread(s) ist korrekt.
		18. Berechnung: 3.432140 s. Die 18. Berechnung der Primzahlen mit 100 OpenMP-Thread(s) ist korrekt.
		19. Berechnung: 3.399542 s. Die 19. Berechnung der Primzahlen mit 100 OpenMP-Thread(s) ist korrekt.
		20. Berechnung: 3.426176 s. Die 20. Berechnung der Primzahlen mit 100 OpenMP-Thread(s) ist korrekt.
		21. Berechnung: 3.441197 s. Die 21. Berechnung der Primzahlen mit 100 OpenMP-Thread(s) ist korrekt.
		22. Berechnung: 3.343851 s. Die 22. Berechnung der Primzahlen mit 100 OpenMP-Thread(s) ist korrekt.
		23. Berechnung: 3.430314 s. Die 23. Berechnung der Primzahlen mit 100 OpenMP-Thread(s) ist korrekt.
		24. Berechnung: 3.429930 s. Die 24. Berechnung der Primzahlen mit 100 OpenMP-Thread(s) ist korrekt.
		25. Berechnung: 3.370225 s. Die 25. Berechnung der Primzahlen mit 100 OpenMP-Thread(s) ist korrekt.
		26. Berechnung: 3.449463 s. Die 26. Berechnung der Primzahlen mit 100 OpenMP-Thread(s) ist korrekt.
		27. Berechnung: 3.443942 s. Die 27. Berechnung der Primzahlen mit 100 OpenMP-Thread(s) ist korrekt.
		28. Berechnung: 3.346635 s. Die 28. Berechnung der Primzahlen mit 100 OpenMP-Thread(s) ist korrekt.
		29. Berechnung: 3.431063 s. Die 29. Berechnung der Primzahlen mit 100 OpenMP-Thread(s) ist korrekt.
		30. Berechnung: 3.437460 s. Die 30. Berechnung der Primzahlen mit 100 OpenMP-Thread(s) ist korrekt.
		31. Berechnung: 3.363536 s. Die 31. Berechnung der Primzahlen mit 100 OpenMP-Thread(s) ist korrekt.
		32. Berechnung: 3.444762 s. Die 32. Berechnung der Primzahlen mit 100 OpenMP-Thread(s) ist korrekt.
		33. Berechnung: 3.425869 s. Die 33. Berechnung der Primzahlen mit 100 OpenMP-Thread(s) ist korrekt.
		34. Berechnung: 3.351290 s. Die 34. Berechnung der Primzahlen mit 100 OpenMP-Thread(s) ist korrekt.
		35. Berechnung: 3.420829 s. Die 35. Berechnung der Primzahlen mit 100 OpenMP-Thread(s) ist korrekt.
		36. Berechnung: 3.427494 s. Die 36. Berechnung der Primzahlen mit 100 OpenMP-Thread(s) ist korrekt.
		37. Berechnung: 3.358978 s. Die 37. Berechnung der Primzahlen mit 100 OpenMP-Thread(s) ist korrekt.
		38. Berechnung: 3.420746 s. Die 38. Berechnung der Primzahlen mit 100 OpenMP-Thread(s) ist korrekt.
		39. Berechnung: 3.359796 s. Die 39. Berechnung der Primzahlen mit 100 OpenMP-Thread(s) ist korrekt.
		40. Berechnung: 3.454165 s. Die 40. Berechnung der Primzahlen mit 100 OpenMP-Thread(s) ist korrekt.
		41. Berechnung: 3.437068 s. Die 41. Berechnung der Primzahlen mit 100 OpenMP-Thread(s) ist korrekt.
		42. Berechnung: 3.349345 s. Die 42. Berechnung der Primzahlen mit 100 OpenMP-Thread(s) ist korrekt.
		43. Berechnung: 3.457798 s. Die 43. Berechnung der Primzahlen mit 100 OpenMP-Thread(s) ist korrekt.
		44. Berechnung: 3.433331 s. Die 44. Berechnung der Primzahlen mit 100 OpenMP-Thread(s) ist korrekt.
		45. Berechnung: 3.340326 s. Die 45. Berechnung der Primzahlen mit 100 OpenMP-Thread(s) ist korrekt.
		46. Berechnung: 3.430943 s. Die 46. Berechnung der Primzahlen mit 100 OpenMP-Thread(s) ist korrekt.
		47. Berechnung: 3.430934 s. Die 47. Berechnung der Primzahlen mit 100 OpenMP-Thread(s) ist korrekt.
		48. Berechnung: 3.344934 s. Die 48. Berechnung der Primzahlen mit 100 OpenMP-Thread(s) ist korrekt.
		49. Berechnung: 3.440880 s. Die 49. Berechnung der Primzahlen mit 100 OpenMP-Thread(s) ist korrekt.
		50. Berechnung: 3.426279 s. Die 50. Berechnung der Primzahlen mit 100 OpenMP-Thread(s) ist korrekt.
		Durchschnittliche Ausfuehrungszeit des Programmes bei 50 Durchlaeufen mit 100 OpenMP-Thread(s): 3.423339 s. Alle berechneten Primzahlen mit 100 OpenMP-Thread(s) sind korrekt.
	Berechnung mittels 150 OpenMP-Thread(s):
		1. Berechnung: 3.343936 s. Die 1. Berechnung der Primzahlen mit 150 OpenMP-Thread(s) ist korrekt.
		2. Berechnung: 3.451713 s. Die 2. Berechnung der Primzahlen mit 150 OpenMP-Thread(s) ist korrekt.
		3. Berechnung: 3.430146 s. Die 3. Berechnung der Primzahlen mit 150 OpenMP-Thread(s) ist korrekt.
		4. Berechnung: 3.358555 s. Die 4. Berechnung der Primzahlen mit 150 OpenMP-Thread(s) ist korrekt.
		5. Berechnung: 3.436020 s. Die 5. Berechnung der Primzahlen mit 150 OpenMP-Thread(s) ist korrekt.
		6. Berechnung: 3.423001 s. Die 6. Berechnung der Primzahlen mit 150 OpenMP-Thread(s) ist korrekt.
		7. Berechnung: 3.353703 s. Die 7. Berechnung der Primzahlen mit 150 OpenMP-Thread(s) ist korrekt.
		8. Berechnung: 3.431368 s. Die 8. Berechnung der Primzahlen mit 150 OpenMP-Thread(s) ist korrekt.
		9. Berechnung: 3.390267 s. Die 9. Berechnung der Primzahlen mit 150 OpenMP-Thread(s) ist korrekt.
		10. Berechnung: 3.407571 s. Die 10. Berechnung der Primzahlen mit 150 OpenMP-Thread(s) ist korrekt.
		11. Berechnung: 3.449206 s. Die 11. Berechnung der Primzahlen mit 150 OpenMP-Thread(s) ist korrekt.
		12. Berechnung: 3.332268 s. Die 12. Berechnung der Primzahlen mit 150 OpenMP-Thread(s) ist korrekt.
		13. Berechnung: 3.484074 s. Die 13. Berechnung der Primzahlen mit 150 OpenMP-Thread(s) ist korrekt.
		14. Berechnung: 3.441994 s. Die 14. Berechnung der Primzahlen mit 150 OpenMP-Thread(s) ist korrekt.
		15. Berechnung: 3.349461 s. Die 15. Berechnung der Primzahlen mit 150 OpenMP-Thread(s) ist korrekt.
		16. Berechnung: 3.428117 s. Die 16. Berechnung der Primzahlen mit 150 OpenMP-Thread(s) ist korrekt.
		17. Berechnung: 3.446999 s. Die 17. Berechnung der Primzahlen mit 150 OpenMP-Thread(s) ist korrekt.
		18. Berechnung: 3.341708 s. Die 18. Berechnung der Primzahlen mit 150 OpenMP-Thread(s) ist korrekt.
		19. Berechnung: 3.456865 s. Die 19. Berechnung der Primzahlen mit 150 OpenMP-Thread(s) ist korrekt.
		20. Berechnung: 3.418909 s. Die 20. Berechnung der Primzahlen mit 150 OpenMP-Thread(s) ist korrekt.
		21. Berechnung: 3.345779 s. Die 21. Berechnung der Primzahlen mit 150 OpenMP-Thread(s) ist korrekt.
		22. Berechnung: 3.444532 s. Die 22. Berechnung der Primzahlen mit 150 OpenMP-Thread(s) ist korrekt.
		23. Berechnung: 3.424914 s. Die 23. Berechnung der Primzahlen mit 150 OpenMP-Thread(s) ist korrekt.
		24. Berechnung: 3.341323 s. Die 24. Berechnung der Primzahlen mit 150 OpenMP-Thread(s) ist korrekt.
		25. Berechnung: 3.451732 s. Die 25. Berechnung der Primzahlen mit 150 OpenMP-Thread(s) ist korrekt.
		26. Berechnung: 3.433765 s. Die 26. Berechnung der Primzahlen mit 150 OpenMP-Thread(s) ist korrekt.
		27. Berechnung: 3.348985 s. Die 27. Berechnung der Primzahlen mit 150 OpenMP-Thread(s) ist korrekt.
		28. Berechnung: 3.431308 s. Die 28. Berechnung der Primzahlen mit 150 OpenMP-Thread(s) ist korrekt.
		29. Berechnung: 3.422711 s. Die 29. Berechnung der Primzahlen mit 150 OpenMP-Thread(s) ist korrekt.
		30. Berechnung: 3.347493 s. Die 30. Berechnung der Primzahlen mit 150 OpenMP-Thread(s) ist korrekt.
		31. Berechnung: 3.430186 s. Die 31. Berechnung der Primzahlen mit 150 OpenMP-Thread(s) ist korrekt.
		32. Berechnung: 3.337667 s. Die 32. Berechnung der Primzahlen mit 150 OpenMP-Thread(s) ist korrekt.
		33. Berechnung: 3.459431 s. Die 33. Berechnung der Primzahlen mit 150 OpenMP-Thread(s) ist korrekt.
		34. Berechnung: 3.444373 s. Die 34. Berechnung der Primzahlen mit 150 OpenMP-Thread(s) ist korrekt.
		35. Berechnung: 3.341050 s. Die 35. Berechnung der Primzahlen mit 150 OpenMP-Thread(s) ist korrekt.
		36. Berechnung: 3.422194 s. Die 36. Berechnung der Primzahlen mit 150 OpenMP-Thread(s) ist korrekt.
		37. Berechnung: 3.451487 s. Die 37. Berechnung der Primzahlen mit 150 OpenMP-Thread(s) ist korrekt.
		38. Berechnung: 3.343049 s. Die 38. Berechnung der Primzahlen mit 150 OpenMP-Thread(s) ist korrekt.
		39. Berechnung: 3.440010 s. Die 39. Berechnung der Primzahlen mit 150 OpenMP-Thread(s) ist korrekt.
		40. Berechnung: 3.425642 s. Die 40. Berechnung der Primzahlen mit 150 OpenMP-Thread(s) ist korrekt.
		41. Berechnung: 3.341333 s. Die 41. Berechnung der Primzahlen mit 150 OpenMP-Thread(s) ist korrekt.
		42. Berechnung: 3.462059 s. Die 42. Berechnung der Primzahlen mit 150 OpenMP-Thread(s) ist korrekt.
		43. Berechnung: 3.431833 s. Die 43. Berechnung der Primzahlen mit 150 OpenMP-Thread(s) ist korrekt.
		44. Berechnung: 3.345865 s. Die 44. Berechnung der Primzahlen mit 150 OpenMP-Thread(s) ist korrekt.
		45. Berechnung: 3.446676 s. Die 45. Berechnung der Primzahlen mit 150 OpenMP-Thread(s) ist korrekt.
		46. Berechnung: 3.458653 s. Die 46. Berechnung der Primzahlen mit 150 OpenMP-Thread(s) ist korrekt.
		47. Berechnung: 3.349422 s. Die 47. Berechnung der Primzahlen mit 150 OpenMP-Thread(s) ist korrekt.
		48. Berechnung: 3.421265 s. Die 48. Berechnung der Primzahlen mit 150 OpenMP-Thread(s) ist korrekt.
		49. Berechnung: 3.441866 s. Die 49. Berechnung der Primzahlen mit 150 OpenMP-Thread(s) ist korrekt.
		50. Berechnung: 3.347135 s. Die 50. Berechnung der Primzahlen mit 150 OpenMP-Thread(s) ist korrekt.
		Durchschnittliche Ausfuehrungszeit des Programmes bei 50 Durchlaeufen mit 150 OpenMP-Thread(s): 3.406192 s. Alle berechneten Primzahlen mit 150 OpenMP-Thread(s) sind korrekt.
	Berechnung mittels 200 OpenMP-Thread(s):
		1. Berechnung: 3.434027 s. Die 1. Berechnung der Primzahlen mit 200 OpenMP-Thread(s) ist korrekt.
		2. Berechnung: 3.385175 s. Die 2. Berechnung der Primzahlen mit 200 OpenMP-Thread(s) ist korrekt.
		3. Berechnung: 3.407092 s. Die 3. Berechnung der Primzahlen mit 200 OpenMP-Thread(s) ist korrekt.
		4. Berechnung: 3.548495 s. Die 4. Berechnung der Primzahlen mit 200 OpenMP-Thread(s) ist korrekt.
		5. Berechnung: 3.719976 s. Die 5. Berechnung der Primzahlen mit 200 OpenMP-Thread(s) ist korrekt.
		6. Berechnung: 4.273705 s. Die 6. Berechnung der Primzahlen mit 200 OpenMP-Thread(s) ist korrekt.
		7. Berechnung: 4.213981 s. Die 7. Berechnung der Primzahlen mit 200 OpenMP-Thread(s) ist korrekt.
		8. Berechnung: 4.131858 s. Die 8. Berechnung der Primzahlen mit 200 OpenMP-Thread(s) ist korrekt.
		9. Berechnung: 3.636789 s. Die 9. Berechnung der Primzahlen mit 200 OpenMP-Thread(s) ist korrekt.
		10. Berechnung: 3.363684 s. Die 10. Berechnung der Primzahlen mit 200 OpenMP-Thread(s) ist korrekt.
		11. Berechnung: 3.444562 s. Die 11. Berechnung der Primzahlen mit 200 OpenMP-Thread(s) ist korrekt.
		12. Berechnung: 3.446130 s. Die 12. Berechnung der Primzahlen mit 200 OpenMP-Thread(s) ist korrekt.
		13. Berechnung: 3.342479 s. Die 13. Berechnung der Primzahlen mit 200 OpenMP-Thread(s) ist korrekt.
		14. Berechnung: 3.426171 s. Die 14. Berechnung der Primzahlen mit 200 OpenMP-Thread(s) ist korrekt.
		15. Berechnung: 3.431321 s. Die 15. Berechnung der Primzahlen mit 200 OpenMP-Thread(s) ist korrekt.
		16. Berechnung: 3.351793 s. Die 16. Berechnung der Primzahlen mit 200 OpenMP-Thread(s) ist korrekt.
		17. Berechnung: 3.433156 s. Die 17. Berechnung der Primzahlen mit 200 OpenMP-Thread(s) ist korrekt.
		18. Berechnung: 3.346258 s. Die 18. Berechnung der Primzahlen mit 200 OpenMP-Thread(s) ist korrekt.
		19. Berechnung: 3.583790 s. Die 19. Berechnung der Primzahlen mit 200 OpenMP-Thread(s) ist korrekt.
		20. Berechnung: 3.439427 s. Die 20. Berechnung der Primzahlen mit 200 OpenMP-Thread(s) ist korrekt.
		21. Berechnung: 3.345495 s. Die 21. Berechnung der Primzahlen mit 200 OpenMP-Thread(s) ist korrekt.
		22. Berechnung: 3.433634 s. Die 22. Berechnung der Primzahlen mit 200 OpenMP-Thread(s) ist korrekt.
		23. Berechnung: 3.503683 s. Die 23. Berechnung der Primzahlen mit 200 OpenMP-Thread(s) ist korrekt.
		24. Berechnung: 3.336233 s. Die 24. Berechnung der Primzahlen mit 200 OpenMP-Thread(s) ist korrekt.
		25. Berechnung: 3.413987 s. Die 25. Berechnung der Primzahlen mit 200 OpenMP-Thread(s) ist korrekt.
		26. Berechnung: 3.456743 s. Die 26. Berechnung der Primzahlen mit 200 OpenMP-Thread(s) ist korrekt.
		27. Berechnung: 3.338268 s. Die 27. Berechnung der Primzahlen mit 200 OpenMP-Thread(s) ist korrekt.
		28. Berechnung: 3.446222 s. Die 28. Berechnung der Primzahlen mit 200 OpenMP-Thread(s) ist korrekt.
		29. Berechnung: 3.447566 s. Die 29. Berechnung der Primzahlen mit 200 OpenMP-Thread(s) ist korrekt.
		30. Berechnung: 3.391317 s. Die 30. Berechnung der Primzahlen mit 200 OpenMP-Thread(s) ist korrekt.
		31. Berechnung: 3.440691 s. Die 31. Berechnung der Primzahlen mit 200 OpenMP-Thread(s) ist korrekt.
		32. Berechnung: 3.451340 s. Die 32. Berechnung der Primzahlen mit 200 OpenMP-Thread(s) ist korrekt.
		33. Berechnung: 3.365191 s. Die 33. Berechnung der Primzahlen mit 200 OpenMP-Thread(s) ist korrekt.
		34. Berechnung: 3.431204 s. Die 34. Berechnung der Primzahlen mit 200 OpenMP-Thread(s) ist korrekt.
		35. Berechnung: 3.431470 s. Die 35. Berechnung der Primzahlen mit 200 OpenMP-Thread(s) ist korrekt.
		36. Berechnung: 3.339254 s. Die 36. Berechnung der Primzahlen mit 200 OpenMP-Thread(s) ist korrekt.
		37. Berechnung: 3.476509 s. Die 37. Berechnung der Primzahlen mit 200 OpenMP-Thread(s) ist korrekt.
		38. Berechnung: 3.429713 s. Die 38. Berechnung der Primzahlen mit 200 OpenMP-Thread(s) ist korrekt.
		39. Berechnung: 3.363327 s. Die 39. Berechnung der Primzahlen mit 200 OpenMP-Thread(s) ist korrekt.
		40. Berechnung: 3.469691 s. Die 40. Berechnung der Primzahlen mit 200 OpenMP-Thread(s) ist korrekt.
		41. Berechnung: 3.442311 s. Die 41. Berechnung der Primzahlen mit 200 OpenMP-Thread(s) ist korrekt.
		42. Berechnung: 3.361384 s. Die 42. Berechnung der Primzahlen mit 200 OpenMP-Thread(s) ist korrekt.
		43. Berechnung: 3.431838 s. Die 43. Berechnung der Primzahlen mit 200 OpenMP-Thread(s) ist korrekt.
		44. Berechnung: 3.496437 s. Die 44. Berechnung der Primzahlen mit 200 OpenMP-Thread(s) ist korrekt.
		45. Berechnung: 3.396377 s. Die 45. Berechnung der Primzahlen mit 200 OpenMP-Thread(s) ist korrekt.
		46. Berechnung: 3.431085 s. Die 46. Berechnung der Primzahlen mit 200 OpenMP-Thread(s) ist korrekt.
		47. Berechnung: 3.362482 s. Die 47. Berechnung der Primzahlen mit 200 OpenMP-Thread(s) ist korrekt.
		48. Berechnung: 3.466137 s. Die 48. Berechnung der Primzahlen mit 200 OpenMP-Thread(s) ist korrekt.
		49. Berechnung: 3.461739 s. Die 49. Berechnung der Primzahlen mit 200 OpenMP-Thread(s) ist korrekt.
		50. Berechnung: 3.342801 s. Die 50. Berechnung der Primzahlen mit 200 OpenMP-Thread(s) ist korrekt.
		Durchschnittliche Ausfuehrungszeit des Programmes bei 50 Durchlaeufen mit 200 OpenMP-Thread(s): 3.477280 s. Alle berechneten Primzahlen mit 200 OpenMP-Thread(s) sind korrekt.
	Berechnung mittels 250 OpenMP-Thread(s):
		1. Berechnung: 3.439914 s. Die 1. Berechnung der Primzahlen mit 250 OpenMP-Thread(s) ist korrekt.
		2. Berechnung: 3.434230 s. Die 2. Berechnung der Primzahlen mit 250 OpenMP-Thread(s) ist korrekt.
		3. Berechnung: 3.332906 s. Die 3. Berechnung der Primzahlen mit 250 OpenMP-Thread(s) ist korrekt.
		4. Berechnung: 3.429101 s. Die 4. Berechnung der Primzahlen mit 250 OpenMP-Thread(s) ist korrekt.
		5. Berechnung: 3.422825 s. Die 5. Berechnung der Primzahlen mit 250 OpenMP-Thread(s) ist korrekt.
		6. Berechnung: 3.355944 s. Die 6. Berechnung der Primzahlen mit 250 OpenMP-Thread(s) ist korrekt.
		7. Berechnung: 3.427180 s. Die 7. Berechnung der Primzahlen mit 250 OpenMP-Thread(s) ist korrekt.
		8. Berechnung: 3.431698 s. Die 8. Berechnung der Primzahlen mit 250 OpenMP-Thread(s) ist korrekt.
		9. Berechnung: 3.357409 s. Die 9. Berechnung der Primzahlen mit 250 OpenMP-Thread(s) ist korrekt.
		10. Berechnung: 3.447086 s. Die 10. Berechnung der Primzahlen mit 250 OpenMP-Thread(s) ist korrekt.
		11. Berechnung: 3.423528 s. Die 11. Berechnung der Primzahlen mit 250 OpenMP-Thread(s) ist korrekt.
		12. Berechnung: 3.338921 s. Die 12. Berechnung der Primzahlen mit 250 OpenMP-Thread(s) ist korrekt.
		13. Berechnung: 3.433827 s. Die 13. Berechnung der Primzahlen mit 250 OpenMP-Thread(s) ist korrekt.
		14. Berechnung: 3.420165 s. Die 14. Berechnung der Primzahlen mit 250 OpenMP-Thread(s) ist korrekt.
		15. Berechnung: 3.369891 s. Die 15. Berechnung der Primzahlen mit 250 OpenMP-Thread(s) ist korrekt.
		16. Berechnung: 3.435659 s. Die 16. Berechnung der Primzahlen mit 250 OpenMP-Thread(s) ist korrekt.
		17. Berechnung: 3.346472 s. Die 17. Berechnung der Primzahlen mit 250 OpenMP-Thread(s) ist korrekt.
		18. Berechnung: 3.427411 s. Die 18. Berechnung der Primzahlen mit 250 OpenMP-Thread(s) ist korrekt.
		19. Berechnung: 3.410269 s. Die 19. Berechnung der Primzahlen mit 250 OpenMP-Thread(s) ist korrekt.
		20. Berechnung: 3.333110 s. Die 20. Berechnung der Primzahlen mit 250 OpenMP-Thread(s) ist korrekt.
		21. Berechnung: 3.433604 s. Die 21. Berechnung der Primzahlen mit 250 OpenMP-Thread(s) ist korrekt.
		22. Berechnung: 3.428264 s. Die 22. Berechnung der Primzahlen mit 250 OpenMP-Thread(s) ist korrekt.
		23. Berechnung: 3.357150 s. Die 23. Berechnung der Primzahlen mit 250 OpenMP-Thread(s) ist korrekt.
		24. Berechnung: 3.449658 s. Die 24. Berechnung der Primzahlen mit 250 OpenMP-Thread(s) ist korrekt.
		25. Berechnung: 3.428551 s. Die 25. Berechnung der Primzahlen mit 250 OpenMP-Thread(s) ist korrekt.
		26. Berechnung: 3.368777 s. Die 26. Berechnung der Primzahlen mit 250 OpenMP-Thread(s) ist korrekt.
		27. Berechnung: 3.425241 s. Die 27. Berechnung der Primzahlen mit 250 OpenMP-Thread(s) ist korrekt.
		28. Berechnung: 3.419298 s. Die 28. Berechnung der Primzahlen mit 250 OpenMP-Thread(s) ist korrekt.
		29. Berechnung: 3.344905 s. Die 29. Berechnung der Primzahlen mit 250 OpenMP-Thread(s) ist korrekt.
		30. Berechnung: 3.439171 s. Die 30. Berechnung der Primzahlen mit 250 OpenMP-Thread(s) ist korrekt.
		31. Berechnung: 3.437318 s. Die 31. Berechnung der Primzahlen mit 250 OpenMP-Thread(s) ist korrekt.
		32. Berechnung: 3.351728 s. Die 32. Berechnung der Primzahlen mit 250 OpenMP-Thread(s) ist korrekt.
		33. Berechnung: 3.456886 s. Die 33. Berechnung der Primzahlen mit 250 OpenMP-Thread(s) ist korrekt.
		34. Berechnung: 3.429362 s. Die 34. Berechnung der Primzahlen mit 250 OpenMP-Thread(s) ist korrekt.
		35. Berechnung: 3.339926 s. Die 35. Berechnung der Primzahlen mit 250 OpenMP-Thread(s) ist korrekt.
		36. Berechnung: 3.432073 s. Die 36. Berechnung der Primzahlen mit 250 OpenMP-Thread(s) ist korrekt.
		37. Berechnung: 3.339401 s. Die 37. Berechnung der Primzahlen mit 250 OpenMP-Thread(s) ist korrekt.
		38. Berechnung: 3.455734 s. Die 38. Berechnung der Primzahlen mit 250 OpenMP-Thread(s) ist korrekt.
		39. Berechnung: 3.426744 s. Die 39. Berechnung der Primzahlen mit 250 OpenMP-Thread(s) ist korrekt.
		40. Berechnung: 3.348565 s. Die 40. Berechnung der Primzahlen mit 250 OpenMP-Thread(s) ist korrekt.
		41. Berechnung: 3.439715 s. Die 41. Berechnung der Primzahlen mit 250 OpenMP-Thread(s) ist korrekt.
		42. Berechnung: 3.447852 s. Die 42. Berechnung der Primzahlen mit 250 OpenMP-Thread(s) ist korrekt.
		43. Berechnung: 3.381686 s. Die 43. Berechnung der Primzahlen mit 250 OpenMP-Thread(s) ist korrekt.
		44. Berechnung: 3.431836 s. Die 44. Berechnung der Primzahlen mit 250 OpenMP-Thread(s) ist korrekt.
		45. Berechnung: 3.433545 s. Die 45. Berechnung der Primzahlen mit 250 OpenMP-Thread(s) ist korrekt.
		46. Berechnung: 3.340511 s. Die 46. Berechnung der Primzahlen mit 250 OpenMP-Thread(s) ist korrekt.
		47. Berechnung: 3.430260 s. Die 47. Berechnung der Primzahlen mit 250 OpenMP-Thread(s) ist korrekt.
		48. Berechnung: 3.435180 s. Die 48. Berechnung der Primzahlen mit 250 OpenMP-Thread(s) ist korrekt.
		49. Berechnung: 3.367579 s. Die 49. Berechnung der Primzahlen mit 250 OpenMP-Thread(s) ist korrekt.
		50. Berechnung: 3.446794 s. Die 50. Berechnung der Primzahlen mit 250 OpenMP-Thread(s) ist korrekt.
		Durchschnittliche Ausfuehrungszeit des Programmes bei 50 Durchlaeufen mit 250 OpenMP-Thread(s): 3.405697 s. Alle berechneten Primzahlen mit 250 OpenMP-Thread(s) sind korrekt.
	Berechnung mittels 300 OpenMP-Thread(s):
		1. Berechnung: 3.439021 s. Die 1. Berechnung der Primzahlen mit 300 OpenMP-Thread(s) ist korrekt.
		2. Berechnung: 3.344260 s. Die 2. Berechnung der Primzahlen mit 300 OpenMP-Thread(s) ist korrekt.
		3. Berechnung: 3.434168 s. Die 3. Berechnung der Primzahlen mit 300 OpenMP-Thread(s) ist korrekt.
		4. Berechnung: 3.428443 s. Die 4. Berechnung der Primzahlen mit 300 OpenMP-Thread(s) ist korrekt.
		5. Berechnung: 3.328651 s. Die 5. Berechnung der Primzahlen mit 300 OpenMP-Thread(s) ist korrekt.
		6. Berechnung: 3.429602 s. Die 6. Berechnung der Primzahlen mit 300 OpenMP-Thread(s) ist korrekt.
		7. Berechnung: 3.410911 s. Die 7. Berechnung der Primzahlen mit 300 OpenMP-Thread(s) ist korrekt.
		8. Berechnung: 3.370043 s. Die 8. Berechnung der Primzahlen mit 300 OpenMP-Thread(s) ist korrekt.
		9. Berechnung: 3.430962 s. Die 9. Berechnung der Primzahlen mit 300 OpenMP-Thread(s) ist korrekt.
		10. Berechnung: 3.351581 s. Die 10. Berechnung der Primzahlen mit 300 OpenMP-Thread(s) ist korrekt.
		11. Berechnung: 3.427057 s. Die 11. Berechnung der Primzahlen mit 300 OpenMP-Thread(s) ist korrekt.
		12. Berechnung: 3.455068 s. Die 12. Berechnung der Primzahlen mit 300 OpenMP-Thread(s) ist korrekt.
		13. Berechnung: 3.336080 s. Die 13. Berechnung der Primzahlen mit 300 OpenMP-Thread(s) ist korrekt.
		14. Berechnung: 3.442877 s. Die 14. Berechnung der Primzahlen mit 300 OpenMP-Thread(s) ist korrekt.
		15. Berechnung: 3.432487 s. Die 15. Berechnung der Primzahlen mit 300 OpenMP-Thread(s) ist korrekt.
		16. Berechnung: 3.341242 s. Die 16. Berechnung der Primzahlen mit 300 OpenMP-Thread(s) ist korrekt.
		17. Berechnung: 3.408500 s. Die 17. Berechnung der Primzahlen mit 300 OpenMP-Thread(s) ist korrekt.
		18. Berechnung: 3.448318 s. Die 18. Berechnung der Primzahlen mit 300 OpenMP-Thread(s) ist korrekt.
		19. Berechnung: 3.350492 s. Die 19. Berechnung der Primzahlen mit 300 OpenMP-Thread(s) ist korrekt.
		20. Berechnung: 3.451111 s. Die 20. Berechnung der Primzahlen mit 300 OpenMP-Thread(s) ist korrekt.
		21. Berechnung: 3.418363 s. Die 21. Berechnung der Primzahlen mit 300 OpenMP-Thread(s) ist korrekt.
		22. Berechnung: 3.342945 s. Die 22. Berechnung der Primzahlen mit 300 OpenMP-Thread(s) ist korrekt.
		23. Berechnung: 3.424832 s. Die 23. Berechnung der Primzahlen mit 300 OpenMP-Thread(s) ist korrekt.
		24. Berechnung: 3.438684 s. Die 24. Berechnung der Primzahlen mit 300 OpenMP-Thread(s) ist korrekt.
		25. Berechnung: 3.339114 s. Die 25. Berechnung der Primzahlen mit 300 OpenMP-Thread(s) ist korrekt.
		26. Berechnung: 3.426187 s. Die 26. Berechnung der Primzahlen mit 300 OpenMP-Thread(s) ist korrekt.
		27. Berechnung: 3.422665 s. Die 27. Berechnung der Primzahlen mit 300 OpenMP-Thread(s) ist korrekt.
		28. Berechnung: 3.365141 s. Die 28. Berechnung der Primzahlen mit 300 OpenMP-Thread(s) ist korrekt.
		29. Berechnung: 3.435917 s. Die 29. Berechnung der Primzahlen mit 300 OpenMP-Thread(s) ist korrekt.
		30. Berechnung: 3.346643 s. Die 30. Berechnung der Primzahlen mit 300 OpenMP-Thread(s) ist korrekt.
		31. Berechnung: 3.437568 s. Die 31. Berechnung der Primzahlen mit 300 OpenMP-Thread(s) ist korrekt.
		32. Berechnung: 3.459646 s. Die 32. Berechnung der Primzahlen mit 300 OpenMP-Thread(s) ist korrekt.
		33. Berechnung: 3.324226 s. Die 33. Berechnung der Primzahlen mit 300 OpenMP-Thread(s) ist korrekt.
		34. Berechnung: 3.425585 s. Die 34. Berechnung der Primzahlen mit 300 OpenMP-Thread(s) ist korrekt.
		35. Berechnung: 3.450072 s. Die 35. Berechnung der Primzahlen mit 300 OpenMP-Thread(s) ist korrekt.
		36. Berechnung: 3.364178 s. Die 36. Berechnung der Primzahlen mit 300 OpenMP-Thread(s) ist korrekt.
		37. Berechnung: 3.447421 s. Die 37. Berechnung der Primzahlen mit 300 OpenMP-Thread(s) ist korrekt.
		38. Berechnung: 3.462880 s. Die 38. Berechnung der Primzahlen mit 300 OpenMP-Thread(s) ist korrekt.
		39. Berechnung: 3.340998 s. Die 39. Berechnung der Primzahlen mit 300 OpenMP-Thread(s) ist korrekt.
		40. Berechnung: 3.428691 s. Die 40. Berechnung der Primzahlen mit 300 OpenMP-Thread(s) ist korrekt.
		41. Berechnung: 3.429547 s. Die 41. Berechnung der Primzahlen mit 300 OpenMP-Thread(s) ist korrekt.
		42. Berechnung: 3.339680 s. Die 42. Berechnung der Primzahlen mit 300 OpenMP-Thread(s) ist korrekt.
		43. Berechnung: 3.429301 s. Die 43. Berechnung der Primzahlen mit 300 OpenMP-Thread(s) ist korrekt.
		44. Berechnung: 3.431423 s. Die 44. Berechnung der Primzahlen mit 300 OpenMP-Thread(s) ist korrekt.
		45. Berechnung: 3.347832 s. Die 45. Berechnung der Primzahlen mit 300 OpenMP-Thread(s) ist korrekt.
		46. Berechnung: 3.433761 s. Die 46. Berechnung der Primzahlen mit 300 OpenMP-Thread(s) ist korrekt.
		47. Berechnung: 3.445964 s. Die 47. Berechnung der Primzahlen mit 300 OpenMP-Thread(s) ist korrekt.
		48. Berechnung: 3.361997 s. Die 48. Berechnung der Primzahlen mit 300 OpenMP-Thread(s) ist korrekt.
		49. Berechnung: 3.428244 s. Die 49. Berechnung der Primzahlen mit 300 OpenMP-Thread(s) ist korrekt.
		50. Berechnung: 3.350812 s. Die 50. Berechnung der Primzahlen mit 300 OpenMP-Thread(s) ist korrekt.
		Durchschnittliche Ausfuehrungszeit des Programmes bei 50 Durchlaeufen mit 300 OpenMP-Thread(s): 3.403224 s. Alle berechneten Primzahlen mit 300 OpenMP-Thread(s) sind korrekt.
	Berechnung mittels 350 OpenMP-Thread(s):
		1. Berechnung: 3.446508 s. Die 1. Berechnung der Primzahlen mit 350 OpenMP-Thread(s) ist korrekt.
		2. Berechnung: 3.421193 s. Die 2. Berechnung der Primzahlen mit 350 OpenMP-Thread(s) ist korrekt.
		3. Berechnung: 3.330289 s. Die 3. Berechnung der Primzahlen mit 350 OpenMP-Thread(s) ist korrekt.
		4. Berechnung: 3.455815 s. Die 4. Berechnung der Primzahlen mit 350 OpenMP-Thread(s) ist korrekt.
		5. Berechnung: 3.426283 s. Die 5. Berechnung der Primzahlen mit 350 OpenMP-Thread(s) ist korrekt.
		6. Berechnung: 3.342811 s. Die 6. Berechnung der Primzahlen mit 350 OpenMP-Thread(s) ist korrekt.
		7. Berechnung: 3.426087 s. Die 7. Berechnung der Primzahlen mit 350 OpenMP-Thread(s) ist korrekt.
		8. Berechnung: 3.415707 s. Die 8. Berechnung der Primzahlen mit 350 OpenMP-Thread(s) ist korrekt.
		9. Berechnung: 3.346912 s. Die 9. Berechnung der Primzahlen mit 350 OpenMP-Thread(s) ist korrekt.
		10. Berechnung: 3.438871 s. Die 10. Berechnung der Primzahlen mit 350 OpenMP-Thread(s) ist korrekt.
		11. Berechnung: 3.415424 s. Die 11. Berechnung der Primzahlen mit 350 OpenMP-Thread(s) ist korrekt.
		12. Berechnung: 3.346574 s. Die 12. Berechnung der Primzahlen mit 350 OpenMP-Thread(s) ist korrekt.
		13. Berechnung: 3.431980 s. Die 13. Berechnung der Primzahlen mit 350 OpenMP-Thread(s) ist korrekt.
		14. Berechnung: 3.439722 s. Die 14. Berechnung der Primzahlen mit 350 OpenMP-Thread(s) ist korrekt.
		15. Berechnung: 3.325859 s. Die 15. Berechnung der Primzahlen mit 350 OpenMP-Thread(s) ist korrekt.
		16. Berechnung: 3.444081 s. Die 16. Berechnung der Primzahlen mit 350 OpenMP-Thread(s) ist korrekt.
		17. Berechnung: 3.430154 s. Die 17. Berechnung der Primzahlen mit 350 OpenMP-Thread(s) ist korrekt.
		18. Berechnung: 3.342592 s. Die 18. Berechnung der Primzahlen mit 350 OpenMP-Thread(s) ist korrekt.
		19. Berechnung: 3.432969 s. Die 19. Berechnung der Primzahlen mit 350 OpenMP-Thread(s) ist korrekt.
		20. Berechnung: 3.336216 s. Die 20. Berechnung der Primzahlen mit 350 OpenMP-Thread(s) ist korrekt.
		21. Berechnung: 3.445662 s. Die 21. Berechnung der Primzahlen mit 350 OpenMP-Thread(s) ist korrekt.
		22. Berechnung: 3.432878 s. Die 22. Berechnung der Primzahlen mit 350 OpenMP-Thread(s) ist korrekt.
		23. Berechnung: 3.330365 s. Die 23. Berechnung der Primzahlen mit 350 OpenMP-Thread(s) ist korrekt.
		24. Berechnung: 3.425418 s. Die 24. Berechnung der Primzahlen mit 350 OpenMP-Thread(s) ist korrekt.
		25. Berechnung: 3.432805 s. Die 25. Berechnung der Primzahlen mit 350 OpenMP-Thread(s) ist korrekt.
		26. Berechnung: 3.338646 s. Die 26. Berechnung der Primzahlen mit 350 OpenMP-Thread(s) ist korrekt.
		27. Berechnung: 3.426243 s. Die 27. Berechnung der Primzahlen mit 350 OpenMP-Thread(s) ist korrekt.
		28. Berechnung: 3.445120 s. Die 28. Berechnung der Primzahlen mit 350 OpenMP-Thread(s) ist korrekt.
		29. Berechnung: 3.360764 s. Die 29. Berechnung der Primzahlen mit 350 OpenMP-Thread(s) ist korrekt.
		30. Berechnung: 3.461839 s. Die 30. Berechnung der Primzahlen mit 350 OpenMP-Thread(s) ist korrekt.
		31. Berechnung: 3.468528 s. Die 31. Berechnung der Primzahlen mit 350 OpenMP-Thread(s) ist korrekt.
		32. Berechnung: 3.357129 s. Die 32. Berechnung der Primzahlen mit 350 OpenMP-Thread(s) ist korrekt.
		33. Berechnung: 3.442500 s. Die 33. Berechnung der Primzahlen mit 350 OpenMP-Thread(s) ist korrekt.
		34. Berechnung: 3.439266 s. Die 34. Berechnung der Primzahlen mit 350 OpenMP-Thread(s) ist korrekt.
		35. Berechnung: 3.341435 s. Die 35. Berechnung der Primzahlen mit 350 OpenMP-Thread(s) ist korrekt.
		36. Berechnung: 3.420527 s. Die 36. Berechnung der Primzahlen mit 350 OpenMP-Thread(s) ist korrekt.
		37. Berechnung: 3.421821 s. Die 37. Berechnung der Primzahlen mit 350 OpenMP-Thread(s) ist korrekt.
		38. Berechnung: 3.338854 s. Die 38. Berechnung der Primzahlen mit 350 OpenMP-Thread(s) ist korrekt.
		39. Berechnung: 3.422739 s. Die 39. Berechnung der Primzahlen mit 350 OpenMP-Thread(s) ist korrekt.
		40. Berechnung: 3.346574 s. Die 40. Berechnung der Primzahlen mit 350 OpenMP-Thread(s) ist korrekt.
		41. Berechnung: 3.422445 s. Die 41. Berechnung der Primzahlen mit 350 OpenMP-Thread(s) ist korrekt.
		42. Berechnung: 3.445170 s. Die 42. Berechnung der Primzahlen mit 350 OpenMP-Thread(s) ist korrekt.
		43. Berechnung: 3.333623 s. Die 43. Berechnung der Primzahlen mit 350 OpenMP-Thread(s) ist korrekt.
		44. Berechnung: 3.433263 s. Die 44. Berechnung der Primzahlen mit 350 OpenMP-Thread(s) ist korrekt.
		45. Berechnung: 3.552551 s. Die 45. Berechnung der Primzahlen mit 350 OpenMP-Thread(s) ist korrekt.
		46. Berechnung: 3.340187 s. Die 46. Berechnung der Primzahlen mit 350 OpenMP-Thread(s) ist korrekt.
		47. Berechnung: 3.423208 s. Die 47. Berechnung der Primzahlen mit 350 OpenMP-Thread(s) ist korrekt.
		48. Berechnung: 3.438341 s. Die 48. Berechnung der Primzahlen mit 350 OpenMP-Thread(s) ist korrekt.
		49. Berechnung: 3.352186 s. Die 49. Berechnung der Primzahlen mit 350 OpenMP-Thread(s) ist korrekt.
		50. Berechnung: 3.462402 s. Die 50. Berechnung der Primzahlen mit 350 OpenMP-Thread(s) ist korrekt.
		Durchschnittliche Ausfuehrungszeit des Programmes bei 50 Durchlaeufen mit 350 OpenMP-Thread(s): 3.405971 s. Alle berechneten Primzahlen mit 350 OpenMP-Thread(s) sind korrekt.
	Berechnung mittels 400 OpenMP-Thread(s):
		1. Berechnung: 3.440125 s. Die 1. Berechnung der Primzahlen mit 400 OpenMP-Thread(s) ist korrekt.
		2. Berechnung: 3.360682 s. Die 2. Berechnung der Primzahlen mit 400 OpenMP-Thread(s) ist korrekt.
		3. Berechnung: 3.450714 s. Die 3. Berechnung der Primzahlen mit 400 OpenMP-Thread(s) ist korrekt.
		4. Berechnung: 3.445065 s. Die 4. Berechnung der Primzahlen mit 400 OpenMP-Thread(s) ist korrekt.
		5. Berechnung: 3.330633 s. Die 5. Berechnung der Primzahlen mit 400 OpenMP-Thread(s) ist korrekt.
		6. Berechnung: 3.437309 s. Die 6. Berechnung der Primzahlen mit 400 OpenMP-Thread(s) ist korrekt.
		7. Berechnung: 3.468065 s. Die 7. Berechnung der Primzahlen mit 400 OpenMP-Thread(s) ist korrekt.
		8. Berechnung: 3.354416 s. Die 8. Berechnung der Primzahlen mit 400 OpenMP-Thread(s) ist korrekt.
		9. Berechnung: 3.437419 s. Die 9. Berechnung der Primzahlen mit 400 OpenMP-Thread(s) ist korrekt.
		10. Berechnung: 3.434972 s. Die 10. Berechnung der Primzahlen mit 400 OpenMP-Thread(s) ist korrekt.
		11. Berechnung: 3.353635 s. Die 11. Berechnung der Primzahlen mit 400 OpenMP-Thread(s) ist korrekt.
		12. Berechnung: 3.431943 s. Die 12. Berechnung der Primzahlen mit 400 OpenMP-Thread(s) ist korrekt.
		13. Berechnung: 3.351592 s. Die 13. Berechnung der Primzahlen mit 400 OpenMP-Thread(s) ist korrekt.
		14. Berechnung: 3.439522 s. Die 14. Berechnung der Primzahlen mit 400 OpenMP-Thread(s) ist korrekt.
		15. Berechnung: 3.466534 s. Die 15. Berechnung der Primzahlen mit 400 OpenMP-Thread(s) ist korrekt.
		16. Berechnung: 3.363663 s. Die 16. Berechnung der Primzahlen mit 400 OpenMP-Thread(s) ist korrekt.
		17. Berechnung: 3.421614 s. Die 17. Berechnung der Primzahlen mit 400 OpenMP-Thread(s) ist korrekt.
		18. Berechnung: 3.448182 s. Die 18. Berechnung der Primzahlen mit 400 OpenMP-Thread(s) ist korrekt.
		19. Berechnung: 3.345380 s. Die 19. Berechnung der Primzahlen mit 400 OpenMP-Thread(s) ist korrekt.
		20. Berechnung: 3.436671 s. Die 20. Berechnung der Primzahlen mit 400 OpenMP-Thread(s) ist korrekt.
		21. Berechnung: 3.426904 s. Die 21. Berechnung der Primzahlen mit 400 OpenMP-Thread(s) ist korrekt.
		22. Berechnung: 3.332678 s. Die 22. Berechnung der Primzahlen mit 400 OpenMP-Thread(s) ist korrekt.
		23. Berechnung: 3.426597 s. Die 23. Berechnung der Primzahlen mit 400 OpenMP-Thread(s) ist korrekt.
		24. Berechnung: 3.445173 s. Die 24. Berechnung der Primzahlen mit 400 OpenMP-Thread(s) ist korrekt.
		25. Berechnung: 3.371656 s. Die 25. Berechnung der Primzahlen mit 400 OpenMP-Thread(s) ist korrekt.
		26. Berechnung: 3.431972 s. Die 26. Berechnung der Primzahlen mit 400 OpenMP-Thread(s) ist korrekt.
		27. Berechnung: 3.433019 s. Die 27. Berechnung der Primzahlen mit 400 OpenMP-Thread(s) ist korrekt.
		28. Berechnung: 3.357565 s. Die 28. Berechnung der Primzahlen mit 400 OpenMP-Thread(s) ist korrekt.
		29. Berechnung: 3.487467 s. Die 29. Berechnung der Primzahlen mit 400 OpenMP-Thread(s) ist korrekt.
		30. Berechnung: 3.421307 s. Die 30. Berechnung der Primzahlen mit 400 OpenMP-Thread(s) ist korrekt.
		31. Berechnung: 3.343578 s. Die 31. Berechnung der Primzahlen mit 400 OpenMP-Thread(s) ist korrekt.
		32. Berechnung: 3.430285 s. Die 32. Berechnung der Primzahlen mit 400 OpenMP-Thread(s) ist korrekt.
		33. Berechnung: 3.410931 s. Die 33. Berechnung der Primzahlen mit 400 OpenMP-Thread(s) ist korrekt.
		34. Berechnung: 3.359234 s. Die 34. Berechnung der Primzahlen mit 400 OpenMP-Thread(s) ist korrekt.
		35. Berechnung: 3.438985 s. Die 35. Berechnung der Primzahlen mit 400 OpenMP-Thread(s) ist korrekt.
		36. Berechnung: 3.343294 s. Die 36. Berechnung der Primzahlen mit 400 OpenMP-Thread(s) ist korrekt.
		37. Berechnung: 3.425900 s. Die 37. Berechnung der Primzahlen mit 400 OpenMP-Thread(s) ist korrekt.
		38. Berechnung: 3.431988 s. Die 38. Berechnung der Primzahlen mit 400 OpenMP-Thread(s) ist korrekt.
		39. Berechnung: 3.341886 s. Die 39. Berechnung der Primzahlen mit 400 OpenMP-Thread(s) ist korrekt.
		40. Berechnung: 3.432011 s. Die 40. Berechnung der Primzahlen mit 400 OpenMP-Thread(s) ist korrekt.
		41. Berechnung: 3.421639 s. Die 41. Berechnung der Primzahlen mit 400 OpenMP-Thread(s) ist korrekt.
		42. Berechnung: 3.356109 s. Die 42. Berechnung der Primzahlen mit 400 OpenMP-Thread(s) ist korrekt.
		43. Berechnung: 3.435178 s. Die 43. Berechnung der Primzahlen mit 400 OpenMP-Thread(s) ist korrekt.
		44. Berechnung: 3.436892 s. Die 44. Berechnung der Primzahlen mit 400 OpenMP-Thread(s) ist korrekt.
		45. Berechnung: 3.335169 s. Die 45. Berechnung der Primzahlen mit 400 OpenMP-Thread(s) ist korrekt.
		46. Berechnung: 3.423763 s. Die 46. Berechnung der Primzahlen mit 400 OpenMP-Thread(s) ist korrekt.
		47. Berechnung: 3.429669 s. Die 47. Berechnung der Primzahlen mit 400 OpenMP-Thread(s) ist korrekt.
		48. Berechnung: 3.340534 s. Die 48. Berechnung der Primzahlen mit 400 OpenMP-Thread(s) ist korrekt.
		49. Berechnung: 3.418674 s. Die 49. Berechnung der Primzahlen mit 400 OpenMP-Thread(s) ist korrekt.
		50. Berechnung: 3.439263 s. Die 50. Berechnung der Primzahlen mit 400 OpenMP-Thread(s) ist korrekt.
		Durchschnittliche Ausfuehrungszeit des Programmes bei 50 Durchlaeufen mit 400 OpenMP-Thread(s): 3.406949 s. Alle berechneten Primzahlen mit 400 OpenMP-Thread(s) sind korrekt.
	Berechnung mittels 450 OpenMP-Thread(s):
		1. Berechnung: 3.365713 s. Die 1. Berechnung der Primzahlen mit 450 OpenMP-Thread(s) ist korrekt.
		2. Berechnung: 3.437186 s. Die 2. Berechnung der Primzahlen mit 450 OpenMP-Thread(s) ist korrekt.
		3. Berechnung: 3.434505 s. Die 3. Berechnung der Primzahlen mit 450 OpenMP-Thread(s) ist korrekt.
		4. Berechnung: 3.347186 s. Die 4. Berechnung der Primzahlen mit 450 OpenMP-Thread(s) ist korrekt.
		5. Berechnung: 3.443214 s. Die 5. Berechnung der Primzahlen mit 450 OpenMP-Thread(s) ist korrekt.
		6. Berechnung: 3.349550 s. Die 6. Berechnung der Primzahlen mit 450 OpenMP-Thread(s) ist korrekt.
		7. Berechnung: 3.414365 s. Die 7. Berechnung der Primzahlen mit 450 OpenMP-Thread(s) ist korrekt.
		8. Berechnung: 3.436172 s. Die 8. Berechnung der Primzahlen mit 450 OpenMP-Thread(s) ist korrekt.
		9. Berechnung: 3.339820 s. Die 9. Berechnung der Primzahlen mit 450 OpenMP-Thread(s) ist korrekt.
		10. Berechnung: 3.445927 s. Die 10. Berechnung der Primzahlen mit 450 OpenMP-Thread(s) ist korrekt.
		11. Berechnung: 3.428271 s. Die 11. Berechnung der Primzahlen mit 450 OpenMP-Thread(s) ist korrekt.
		12. Berechnung: 3.343312 s. Die 12. Berechnung der Primzahlen mit 450 OpenMP-Thread(s) ist korrekt.
		13. Berechnung: 3.440466 s. Die 13. Berechnung der Primzahlen mit 450 OpenMP-Thread(s) ist korrekt.
		14. Berechnung: 3.427666 s. Die 14. Berechnung der Primzahlen mit 450 OpenMP-Thread(s) ist korrekt.
		15. Berechnung: 3.323325 s. Die 15. Berechnung der Primzahlen mit 450 OpenMP-Thread(s) ist korrekt.
		16. Berechnung: 3.449320 s. Die 16. Berechnung der Primzahlen mit 450 OpenMP-Thread(s) ist korrekt.
		17. Berechnung: 3.721406 s. Die 17. Berechnung der Primzahlen mit 450 OpenMP-Thread(s) ist korrekt.
		18. Berechnung: 3.355327 s. Die 18. Berechnung der Primzahlen mit 450 OpenMP-Thread(s) ist korrekt.
		19. Berechnung: 3.471136 s. Die 19. Berechnung der Primzahlen mit 450 OpenMP-Thread(s) ist korrekt.
		20. Berechnung: 3.436625 s. Die 20. Berechnung der Primzahlen mit 450 OpenMP-Thread(s) ist korrekt.
		21. Berechnung: 3.345786 s. Die 21. Berechnung der Primzahlen mit 450 OpenMP-Thread(s) ist korrekt.
		22. Berechnung: 3.467655 s. Die 22. Berechnung der Primzahlen mit 450 OpenMP-Thread(s) ist korrekt.
		23. Berechnung: 3.425094 s. Die 23. Berechnung der Primzahlen mit 450 OpenMP-Thread(s) ist korrekt.
		24. Berechnung: 3.360894 s. Die 24. Berechnung der Primzahlen mit 450 OpenMP-Thread(s) ist korrekt.
		25. Berechnung: 3.430228 s. Die 25. Berechnung der Primzahlen mit 450 OpenMP-Thread(s) ist korrekt.
		26. Berechnung: 3.424634 s. Die 26. Berechnung der Primzahlen mit 450 OpenMP-Thread(s) ist korrekt.
		27. Berechnung: 3.338716 s. Die 27. Berechnung der Primzahlen mit 450 OpenMP-Thread(s) ist korrekt.
		28. Berechnung: 3.432168 s. Die 28. Berechnung der Primzahlen mit 450 OpenMP-Thread(s) ist korrekt.
		29. Berechnung: 3.354657 s. Die 29. Berechnung der Primzahlen mit 450 OpenMP-Thread(s) ist korrekt.
		30. Berechnung: 3.422096 s. Die 30. Berechnung der Primzahlen mit 450 OpenMP-Thread(s) ist korrekt.
		31. Berechnung: 3.422740 s. Die 31. Berechnung der Primzahlen mit 450 OpenMP-Thread(s) ist korrekt.
		32. Berechnung: 3.365263 s. Die 32. Berechnung der Primzahlen mit 450 OpenMP-Thread(s) ist korrekt.
		33. Berechnung: 3.439574 s. Die 33. Berechnung der Primzahlen mit 450 OpenMP-Thread(s) ist korrekt.
		34. Berechnung: 3.423303 s. Die 34. Berechnung der Primzahlen mit 450 OpenMP-Thread(s) ist korrekt.
		35. Berechnung: 3.339025 s. Die 35. Berechnung der Primzahlen mit 450 OpenMP-Thread(s) ist korrekt.
		36. Berechnung: 3.442866 s. Die 36. Berechnung der Primzahlen mit 450 OpenMP-Thread(s) ist korrekt.
		37. Berechnung: 3.435591 s. Die 37. Berechnung der Primzahlen mit 450 OpenMP-Thread(s) ist korrekt.
		38. Berechnung: 3.355795 s. Die 38. Berechnung der Primzahlen mit 450 OpenMP-Thread(s) ist korrekt.
		39. Berechnung: 3.418818 s. Die 39. Berechnung der Primzahlen mit 450 OpenMP-Thread(s) ist korrekt.
		40. Berechnung: 3.438888 s. Die 40. Berechnung der Primzahlen mit 450 OpenMP-Thread(s) ist korrekt.
		41. Berechnung: 3.350257 s. Die 41. Berechnung der Primzahlen mit 450 OpenMP-Thread(s) ist korrekt.
		42. Berechnung: 3.432188 s. Die 42. Berechnung der Primzahlen mit 450 OpenMP-Thread(s) ist korrekt.
		43. Berechnung: 3.430514 s. Die 43. Berechnung der Primzahlen mit 450 OpenMP-Thread(s) ist korrekt.
		44. Berechnung: 3.366945 s. Die 44. Berechnung der Primzahlen mit 450 OpenMP-Thread(s) ist korrekt.
		45. Berechnung: 3.459257 s. Die 45. Berechnung der Primzahlen mit 450 OpenMP-Thread(s) ist korrekt.
		46. Berechnung: 3.434100 s. Die 46. Berechnung der Primzahlen mit 450 OpenMP-Thread(s) ist korrekt.
		47. Berechnung: 3.335023 s. Die 47. Berechnung der Primzahlen mit 450 OpenMP-Thread(s) ist korrekt.
		48. Berechnung: 3.464763 s. Die 48. Berechnung der Primzahlen mit 450 OpenMP-Thread(s) ist korrekt.
		49. Berechnung: 3.435266 s. Die 49. Berechnung der Primzahlen mit 450 OpenMP-Thread(s) ist korrekt.
		50. Berechnung: 3.420254 s. Die 50. Berechnung der Primzahlen mit 450 OpenMP-Thread(s) ist korrekt.
		Durchschnittliche Ausfuehrungszeit des Programmes bei 50 Durchlaeufen mit 450 OpenMP-Thread(s): 3.412457 s. Alle berechneten Primzahlen mit 450 OpenMP-Thread(s) sind korrekt.
	Berechnung mittels 500 OpenMP-Thread(s):
		1. Berechnung: 3.457129 s. Die 1. Berechnung der Primzahlen mit 500 OpenMP-Thread(s) ist korrekt.
		2. Berechnung: 3.406117 s. Die 2. Berechnung der Primzahlen mit 500 OpenMP-Thread(s) ist korrekt.
		3. Berechnung: 3.451544 s. Die 3. Berechnung der Primzahlen mit 500 OpenMP-Thread(s) ist korrekt.
		4. Berechnung: 3.485124 s. Die 4. Berechnung der Primzahlen mit 500 OpenMP-Thread(s) ist korrekt.
		5. Berechnung: 3.355884 s. Die 5. Berechnung der Primzahlen mit 500 OpenMP-Thread(s) ist korrekt.
		6. Berechnung: 3.485616 s. Die 6. Berechnung der Primzahlen mit 500 OpenMP-Thread(s) ist korrekt.
		7. Berechnung: 3.463012 s. Die 7. Berechnung der Primzahlen mit 500 OpenMP-Thread(s) ist korrekt.
		8. Berechnung: 3.371330 s. Die 8. Berechnung der Primzahlen mit 500 OpenMP-Thread(s) ist korrekt.
		9. Berechnung: 3.439832 s. Die 9. Berechnung der Primzahlen mit 500 OpenMP-Thread(s) ist korrekt.
		10. Berechnung: 3.456666 s. Die 10. Berechnung der Primzahlen mit 500 OpenMP-Thread(s) ist korrekt.
		11. Berechnung: 3.429105 s. Die 11. Berechnung der Primzahlen mit 500 OpenMP-Thread(s) ist korrekt.
		12. Berechnung: 3.540413 s. Die 12. Berechnung der Primzahlen mit 500 OpenMP-Thread(s) ist korrekt.
		13. Berechnung: 3.482340 s. Die 13. Berechnung der Primzahlen mit 500 OpenMP-Thread(s) ist korrekt.
		14. Berechnung: 3.412889 s. Die 14. Berechnung der Primzahlen mit 500 OpenMP-Thread(s) ist korrekt.
		15. Berechnung: 3.463368 s. Die 15. Berechnung der Primzahlen mit 500 OpenMP-Thread(s) ist korrekt.
		16. Berechnung: 3.479742 s. Die 16. Berechnung der Primzahlen mit 500 OpenMP-Thread(s) ist korrekt.
		17. Berechnung: 3.369459 s. Die 17. Berechnung der Primzahlen mit 500 OpenMP-Thread(s) ist korrekt.
		18. Berechnung: 3.488821 s. Die 18. Berechnung der Primzahlen mit 500 OpenMP-Thread(s) ist korrekt.
		19. Berechnung: 3.492424 s. Die 19. Berechnung der Primzahlen mit 500 OpenMP-Thread(s) ist korrekt.
		20. Berechnung: 3.416496 s. Die 20. Berechnung der Primzahlen mit 500 OpenMP-Thread(s) ist korrekt.
		21. Berechnung: 3.497917 s. Die 21. Berechnung der Primzahlen mit 500 OpenMP-Thread(s) ist korrekt.
		22. Berechnung: 3.478584 s. Die 22. Berechnung der Primzahlen mit 500 OpenMP-Thread(s) ist korrekt.
		23. Berechnung: 3.407600 s. Die 23. Berechnung der Primzahlen mit 500 OpenMP-Thread(s) ist korrekt.
		24. Berechnung: 3.494329 s. Die 24. Berechnung der Primzahlen mit 500 OpenMP-Thread(s) ist korrekt.
		25. Berechnung: 3.453437 s. Die 25. Berechnung der Primzahlen mit 500 OpenMP-Thread(s) ist korrekt.
		26. Berechnung: 3.377280 s. Die 26. Berechnung der Primzahlen mit 500 OpenMP-Thread(s) ist korrekt.
		27. Berechnung: 3.451067 s. Die 27. Berechnung der Primzahlen mit 500 OpenMP-Thread(s) ist korrekt.
		28. Berechnung: 3.441256 s. Die 28. Berechnung der Primzahlen mit 500 OpenMP-Thread(s) ist korrekt.
		29. Berechnung: 3.364416 s. Die 29. Berechnung der Primzahlen mit 500 OpenMP-Thread(s) ist korrekt.
		30. Berechnung: 3.485188 s. Die 30. Berechnung der Primzahlen mit 500 OpenMP-Thread(s) ist korrekt.
		31. Berechnung: 3.464921 s. Die 31. Berechnung der Primzahlen mit 500 OpenMP-Thread(s) ist korrekt.
		32. Berechnung: 3.395738 s. Die 32. Berechnung der Primzahlen mit 500 OpenMP-Thread(s) ist korrekt.
		33. Berechnung: 3.479835 s. Die 33. Berechnung der Primzahlen mit 500 OpenMP-Thread(s) ist korrekt.
		34. Berechnung: 3.458691 s. Die 34. Berechnung der Primzahlen mit 500 OpenMP-Thread(s) ist korrekt.
		35. Berechnung: 3.397064 s. Die 35. Berechnung der Primzahlen mit 500 OpenMP-Thread(s) ist korrekt.
		36. Berechnung: 3.525820 s. Die 36. Berechnung der Primzahlen mit 500 OpenMP-Thread(s) ist korrekt.
		37. Berechnung: 3.467493 s. Die 37. Berechnung der Primzahlen mit 500 OpenMP-Thread(s) ist korrekt.
		38. Berechnung: 3.346877 s. Die 38. Berechnung der Primzahlen mit 500 OpenMP-Thread(s) ist korrekt.
		39. Berechnung: 3.492162 s. Die 39. Berechnung der Primzahlen mit 500 OpenMP-Thread(s) ist korrekt.
		40. Berechnung: 3.441611 s. Die 40. Berechnung der Primzahlen mit 500 OpenMP-Thread(s) ist korrekt.
		41. Berechnung: 3.442478 s. Die 41. Berechnung der Primzahlen mit 500 OpenMP-Thread(s) ist korrekt.
		42. Berechnung: 3.459971 s. Die 42. Berechnung der Primzahlen mit 500 OpenMP-Thread(s) ist korrekt.
		43. Berechnung: 3.367156 s. Die 43. Berechnung der Primzahlen mit 500 OpenMP-Thread(s) ist korrekt.
		44. Berechnung: 3.500162 s. Die 44. Berechnung der Primzahlen mit 500 OpenMP-Thread(s) ist korrekt.
		45. Berechnung: 3.454842 s. Die 45. Berechnung der Primzahlen mit 500 OpenMP-Thread(s) ist korrekt.
		46. Berechnung: 3.378691 s. Die 46. Berechnung der Primzahlen mit 500 OpenMP-Thread(s) ist korrekt.
		47. Berechnung: 3.470633 s. Die 47. Berechnung der Primzahlen mit 500 OpenMP-Thread(s) ist korrekt.
		48. Berechnung: 3.474216 s. Die 48. Berechnung der Primzahlen mit 500 OpenMP-Thread(s) ist korrekt.
		49. Berechnung: 3.397708 s. Die 49. Berechnung der Primzahlen mit 500 OpenMP-Thread(s) ist korrekt.
		50. Berechnung: 3.483637 s. Die 50. Berechnung der Primzahlen mit 500 OpenMP-Thread(s) ist korrekt.
		Durchschnittliche Ausfuehrungszeit des Programmes bei 50 Durchlaeufen mit 500 OpenMP-Thread(s): 3.445962 s. Alle berechneten Primzahlen mit 500 OpenMP-Thread(s) sind korrekt.
	Berechnung mittels 550 OpenMP-Thread(s):
		1. Berechnung: 3.461201 s. Die 1. Berechnung der Primzahlen mit 550 OpenMP-Thread(s) ist korrekt.
		2. Berechnung: 3.450411 s. Die 2. Berechnung der Primzahlen mit 550 OpenMP-Thread(s) ist korrekt.
		3. Berechnung: 3.457212 s. Die 3. Berechnung der Primzahlen mit 550 OpenMP-Thread(s) ist korrekt.
		4. Berechnung: 3.480030 s. Die 4. Berechnung der Primzahlen mit 550 OpenMP-Thread(s) ist korrekt.
		5. Berechnung: 4.032023 s. Die 5. Berechnung der Primzahlen mit 550 OpenMP-Thread(s) ist korrekt.
		6. Berechnung: 4.279064 s. Die 6. Berechnung der Primzahlen mit 550 OpenMP-Thread(s) ist korrekt.
		7. Berechnung: 4.150965 s. Die 7. Berechnung der Primzahlen mit 550 OpenMP-Thread(s) ist korrekt.
		8. Berechnung: 3.810365 s. Die 8. Berechnung der Primzahlen mit 550 OpenMP-Thread(s) ist korrekt.
		9. Berechnung: 3.349956 s. Die 9. Berechnung der Primzahlen mit 550 OpenMP-Thread(s) ist korrekt.
		10. Berechnung: 3.427388 s. Die 10. Berechnung der Primzahlen mit 550 OpenMP-Thread(s) ist korrekt.
		11. Berechnung: 3.424399 s. Die 11. Berechnung der Primzahlen mit 550 OpenMP-Thread(s) ist korrekt.
		12. Berechnung: 3.339917 s. Die 12. Berechnung der Primzahlen mit 550 OpenMP-Thread(s) ist korrekt.
		13. Berechnung: 3.433038 s. Die 13. Berechnung der Primzahlen mit 550 OpenMP-Thread(s) ist korrekt.
		14. Berechnung: 3.460299 s. Die 14. Berechnung der Primzahlen mit 550 OpenMP-Thread(s) ist korrekt.
		15. Berechnung: 3.343637 s. Die 15. Berechnung der Primzahlen mit 550 OpenMP-Thread(s) ist korrekt.
		16. Berechnung: 3.427570 s. Die 16. Berechnung der Primzahlen mit 550 OpenMP-Thread(s) ist korrekt.
		17. Berechnung: 3.430768 s. Die 17. Berechnung der Primzahlen mit 550 OpenMP-Thread(s) ist korrekt.
		18. Berechnung: 3.344008 s. Die 18. Berechnung der Primzahlen mit 550 OpenMP-Thread(s) ist korrekt.
		19. Berechnung: 3.490560 s. Die 19. Berechnung der Primzahlen mit 550 OpenMP-Thread(s) ist korrekt.
		20. Berechnung: 3.454224 s. Die 20. Berechnung der Primzahlen mit 550 OpenMP-Thread(s) ist korrekt.
		21. Berechnung: 3.324664 s. Die 21. Berechnung der Primzahlen mit 550 OpenMP-Thread(s) ist korrekt.
		22. Berechnung: 3.424453 s. Die 22. Berechnung der Primzahlen mit 550 OpenMP-Thread(s) ist korrekt.
		23. Berechnung: 3.508460 s. Die 23. Berechnung der Primzahlen mit 550 OpenMP-Thread(s) ist korrekt.
		24. Berechnung: 3.352016 s. Die 24. Berechnung der Primzahlen mit 550 OpenMP-Thread(s) ist korrekt.
		25. Berechnung: 3.423017 s. Die 25. Berechnung der Primzahlen mit 550 OpenMP-Thread(s) ist korrekt.
		26. Berechnung: 3.427041 s. Die 26. Berechnung der Primzahlen mit 550 OpenMP-Thread(s) ist korrekt.
		27. Berechnung: 3.353313 s. Die 27. Berechnung der Primzahlen mit 550 OpenMP-Thread(s) ist korrekt.
		28. Berechnung: 3.447701 s. Die 28. Berechnung der Primzahlen mit 550 OpenMP-Thread(s) ist korrekt.
		29. Berechnung: 3.353312 s. Die 29. Berechnung der Primzahlen mit 550 OpenMP-Thread(s) ist korrekt.
		30. Berechnung: 3.404126 s. Die 30. Berechnung der Primzahlen mit 550 OpenMP-Thread(s) ist korrekt.
		31. Berechnung: 3.440502 s. Die 31. Berechnung der Primzahlen mit 550 OpenMP-Thread(s) ist korrekt.
		32. Berechnung: 3.354856 s. Die 32. Berechnung der Primzahlen mit 550 OpenMP-Thread(s) ist korrekt.
		33. Berechnung: 3.421539 s. Die 33. Berechnung der Primzahlen mit 550 OpenMP-Thread(s) ist korrekt.
		34. Berechnung: 3.425226 s. Die 34. Berechnung der Primzahlen mit 550 OpenMP-Thread(s) ist korrekt.
		35. Berechnung: 3.343373 s. Die 35. Berechnung der Primzahlen mit 550 OpenMP-Thread(s) ist korrekt.
		36. Berechnung: 3.429358 s. Die 36. Berechnung der Primzahlen mit 550 OpenMP-Thread(s) ist korrekt.
		37. Berechnung: 3.413355 s. Die 37. Berechnung der Primzahlen mit 550 OpenMP-Thread(s) ist korrekt.
		38. Berechnung: 3.338175 s. Die 38. Berechnung der Primzahlen mit 550 OpenMP-Thread(s) ist korrekt.
		39. Berechnung: 3.442150 s. Die 39. Berechnung der Primzahlen mit 550 OpenMP-Thread(s) ist korrekt.
		40. Berechnung: 3.431703 s. Die 40. Berechnung der Primzahlen mit 550 OpenMP-Thread(s) ist korrekt.
		41. Berechnung: 3.359491 s. Die 41. Berechnung der Primzahlen mit 550 OpenMP-Thread(s) ist korrekt.
		42. Berechnung: 3.444987 s. Die 42. Berechnung der Primzahlen mit 550 OpenMP-Thread(s) ist korrekt.
		43. Berechnung: 3.541933 s. Die 43. Berechnung der Primzahlen mit 550 OpenMP-Thread(s) ist korrekt.
		44. Berechnung: 3.345292 s. Die 44. Berechnung der Primzahlen mit 550 OpenMP-Thread(s) ist korrekt.
		45. Berechnung: 3.417427 s. Die 45. Berechnung der Primzahlen mit 550 OpenMP-Thread(s) ist korrekt.
		46. Berechnung: 3.440140 s. Die 46. Berechnung der Primzahlen mit 550 OpenMP-Thread(s) ist korrekt.
		47. Berechnung: 3.349077 s. Die 47. Berechnung der Primzahlen mit 550 OpenMP-Thread(s) ist korrekt.
		48. Berechnung: 3.431566 s. Die 48. Berechnung der Primzahlen mit 550 OpenMP-Thread(s) ist korrekt.
		49. Berechnung: 3.469679 s. Die 49. Berechnung der Primzahlen mit 550 OpenMP-Thread(s) ist korrekt.
		50. Berechnung: 3.349132 s. Die 50. Berechnung der Primzahlen mit 550 OpenMP-Thread(s) ist korrekt.
		Durchschnittliche Ausfuehrungszeit des Programmes bei 50 Durchlaeufen mit 550 OpenMP-Thread(s): 3.465082 s. Alle berechneten Primzahlen mit 550 OpenMP-Thread(s) sind korrekt.
	Berechnung mittels 600 OpenMP-Thread(s):
		1. Berechnung: 3.437594 s. Die 1. Berechnung der Primzahlen mit 600 OpenMP-Thread(s) ist korrekt.
		2. Berechnung: 3.351948 s. Die 2. Berechnung der Primzahlen mit 600 OpenMP-Thread(s) ist korrekt.
		3. Berechnung: 3.434746 s. Die 3. Berechnung der Primzahlen mit 600 OpenMP-Thread(s) ist korrekt.
		4. Berechnung: 3.442259 s. Die 4. Berechnung der Primzahlen mit 600 OpenMP-Thread(s) ist korrekt.
		5. Berechnung: 3.349592 s. Die 5. Berechnung der Primzahlen mit 600 OpenMP-Thread(s) ist korrekt.
		6. Berechnung: 3.425912 s. Die 6. Berechnung der Primzahlen mit 600 OpenMP-Thread(s) ist korrekt.
		7. Berechnung: 3.406806 s. Die 7. Berechnung der Primzahlen mit 600 OpenMP-Thread(s) ist korrekt.
		8. Berechnung: 3.357461 s. Die 8. Berechnung der Primzahlen mit 600 OpenMP-Thread(s) ist korrekt.
		9. Berechnung: 3.446203 s. Die 9. Berechnung der Primzahlen mit 600 OpenMP-Thread(s) ist korrekt.
		10. Berechnung: 3.441118 s. Die 10. Berechnung der Primzahlen mit 600 OpenMP-Thread(s) ist korrekt.
		11. Berechnung: 3.355110 s. Die 11. Berechnung der Primzahlen mit 600 OpenMP-Thread(s) ist korrekt.
		12. Berechnung: 3.431741 s. Die 12. Berechnung der Primzahlen mit 600 OpenMP-Thread(s) ist korrekt.
		13. Berechnung: 3.432080 s. Die 13. Berechnung der Primzahlen mit 600 OpenMP-Thread(s) ist korrekt.
		14. Berechnung: 3.341568 s. Die 14. Berechnung der Primzahlen mit 600 OpenMP-Thread(s) ist korrekt.
		15. Berechnung: 3.423736 s. Die 15. Berechnung der Primzahlen mit 600 OpenMP-Thread(s) ist korrekt.
		16. Berechnung: 3.426785 s. Die 16. Berechnung der Primzahlen mit 600 OpenMP-Thread(s) ist korrekt.
		17. Berechnung: 3.357059 s. Die 17. Berechnung der Primzahlen mit 600 OpenMP-Thread(s) ist korrekt.
		18. Berechnung: 3.469278 s. Die 18. Berechnung der Primzahlen mit 600 OpenMP-Thread(s) ist korrekt.
		19. Berechnung: 3.426894 s. Die 19. Berechnung der Primzahlen mit 600 OpenMP-Thread(s) ist korrekt.
		20. Berechnung: 3.348935 s. Die 20. Berechnung der Primzahlen mit 600 OpenMP-Thread(s) ist korrekt.
		21. Berechnung: 3.427983 s. Die 21. Berechnung der Primzahlen mit 600 OpenMP-Thread(s) ist korrekt.
		22. Berechnung: 3.343309 s. Die 22. Berechnung der Primzahlen mit 600 OpenMP-Thread(s) ist korrekt.
		23. Berechnung: 3.440115 s. Die 23. Berechnung der Primzahlen mit 600 OpenMP-Thread(s) ist korrekt.
		24. Berechnung: 3.426933 s. Die 24. Berechnung der Primzahlen mit 600 OpenMP-Thread(s) ist korrekt.
		25. Berechnung: 3.355774 s. Die 25. Berechnung der Primzahlen mit 600 OpenMP-Thread(s) ist korrekt.
		26. Berechnung: 3.454830 s. Die 26. Berechnung der Primzahlen mit 600 OpenMP-Thread(s) ist korrekt.
		27. Berechnung: 3.437697 s. Die 27. Berechnung der Primzahlen mit 600 OpenMP-Thread(s) ist korrekt.
		28. Berechnung: 3.343156 s. Die 28. Berechnung der Primzahlen mit 600 OpenMP-Thread(s) ist korrekt.
		29. Berechnung: 3.428609 s. Die 29. Berechnung der Primzahlen mit 600 OpenMP-Thread(s) ist korrekt.
		30. Berechnung: 3.457873 s. Die 30. Berechnung der Primzahlen mit 600 OpenMP-Thread(s) ist korrekt.
		31. Berechnung: 3.330918 s. Die 31. Berechnung der Primzahlen mit 600 OpenMP-Thread(s) ist korrekt.
		32. Berechnung: 3.431619 s. Die 32. Berechnung der Primzahlen mit 600 OpenMP-Thread(s) ist korrekt.
		33. Berechnung: 3.437559 s. Die 33. Berechnung der Primzahlen mit 600 OpenMP-Thread(s) ist korrekt.
		34. Berechnung: 3.349835 s. Die 34. Berechnung der Primzahlen mit 600 OpenMP-Thread(s) ist korrekt.
		35. Berechnung: 3.438275 s. Die 35. Berechnung der Primzahlen mit 600 OpenMP-Thread(s) ist korrekt.
		36. Berechnung: 3.460497 s. Die 36. Berechnung der Primzahlen mit 600 OpenMP-Thread(s) ist korrekt.
		37. Berechnung: 3.345222 s. Die 37. Berechnung der Primzahlen mit 600 OpenMP-Thread(s) ist korrekt.
		38. Berechnung: 3.446573 s. Die 38. Berechnung der Primzahlen mit 600 OpenMP-Thread(s) ist korrekt.
		39. Berechnung: 3.419566 s. Die 39. Berechnung der Primzahlen mit 600 OpenMP-Thread(s) ist korrekt.
		40. Berechnung: 3.361099 s. Die 40. Berechnung der Primzahlen mit 600 OpenMP-Thread(s) ist korrekt.
		41. Berechnung: 3.424961 s. Die 41. Berechnung der Primzahlen mit 600 OpenMP-Thread(s) ist korrekt.
		42. Berechnung: 3.396017 s. Die 42. Berechnung der Primzahlen mit 600 OpenMP-Thread(s) ist korrekt.
		43. Berechnung: 3.423025 s. Die 43. Berechnung der Primzahlen mit 600 OpenMP-Thread(s) ist korrekt.
		44. Berechnung: 3.450986 s. Die 44. Berechnung der Primzahlen mit 600 OpenMP-Thread(s) ist korrekt.
		45. Berechnung: 3.336718 s. Die 45. Berechnung der Primzahlen mit 600 OpenMP-Thread(s) ist korrekt.
		46. Berechnung: 3.435034 s. Die 46. Berechnung der Primzahlen mit 600 OpenMP-Thread(s) ist korrekt.
		47. Berechnung: 3.438568 s. Die 47. Berechnung der Primzahlen mit 600 OpenMP-Thread(s) ist korrekt.
		48. Berechnung: 3.342999 s. Die 48. Berechnung der Primzahlen mit 600 OpenMP-Thread(s) ist korrekt.
		49. Berechnung: 3.435750 s. Die 49. Berechnung der Primzahlen mit 600 OpenMP-Thread(s) ist korrekt.
		50. Berechnung: 3.437972 s. Die 50. Berechnung der Primzahlen mit 600 OpenMP-Thread(s) ist korrekt.
		Durchschnittliche Ausfuehrungszeit des Programmes bei 50 Durchlaeufen mit 600 OpenMP-Thread(s): 3.407326 s. Alle berechneten Primzahlen mit 600 OpenMP-Thread(s) sind korrekt.
	Berechnung mittels 650 OpenMP-Thread(s):
		1. Berechnung: 3.340017 s. Die 1. Berechnung der Primzahlen mit 650 OpenMP-Thread(s) ist korrekt.
		2. Berechnung: 3.450978 s. Die 2. Berechnung der Primzahlen mit 650 OpenMP-Thread(s) ist korrekt.
		3. Berechnung: 3.446363 s. Die 3. Berechnung der Primzahlen mit 650 OpenMP-Thread(s) ist korrekt.
		4. Berechnung: 3.348255 s. Die 4. Berechnung der Primzahlen mit 650 OpenMP-Thread(s) ist korrekt.
		5. Berechnung: 3.435119 s. Die 5. Berechnung der Primzahlen mit 650 OpenMP-Thread(s) ist korrekt.
		6. Berechnung: 3.443372 s. Die 6. Berechnung der Primzahlen mit 650 OpenMP-Thread(s) ist korrekt.
		7. Berechnung: 3.355656 s. Die 7. Berechnung der Primzahlen mit 650 OpenMP-Thread(s) ist korrekt.
		8. Berechnung: 3.496307 s. Die 8. Berechnung der Primzahlen mit 650 OpenMP-Thread(s) ist korrekt.
		9. Berechnung: 3.413954 s. Die 9. Berechnung der Primzahlen mit 650 OpenMP-Thread(s) ist korrekt.
		10. Berechnung: 3.347116 s. Die 10. Berechnung der Primzahlen mit 650 OpenMP-Thread(s) ist korrekt.
		11. Berechnung: 3.445112 s. Die 11. Berechnung der Primzahlen mit 650 OpenMP-Thread(s) ist korrekt.
		12. Berechnung: 3.430340 s. Die 12. Berechnung der Primzahlen mit 650 OpenMP-Thread(s) ist korrekt.
		13. Berechnung: 3.331992 s. Die 13. Berechnung der Primzahlen mit 650 OpenMP-Thread(s) ist korrekt.
		14. Berechnung: 3.431756 s. Die 14. Berechnung der Primzahlen mit 650 OpenMP-Thread(s) ist korrekt.
		15. Berechnung: 3.355244 s. Die 15. Berechnung der Primzahlen mit 650 OpenMP-Thread(s) ist korrekt.
		16. Berechnung: 3.437125 s. Die 16. Berechnung der Primzahlen mit 650 OpenMP-Thread(s) ist korrekt.
		17. Berechnung: 3.423140 s. Die 17. Berechnung der Primzahlen mit 650 OpenMP-Thread(s) ist korrekt.
		18. Berechnung: 3.342517 s. Die 18. Berechnung der Primzahlen mit 650 OpenMP-Thread(s) ist korrekt.
		19. Berechnung: 3.427311 s. Die 19. Berechnung der Primzahlen mit 650 OpenMP-Thread(s) ist korrekt.
		20. Berechnung: 3.439474 s. Die 20. Berechnung der Primzahlen mit 650 OpenMP-Thread(s) ist korrekt.
		21. Berechnung: 3.339097 s. Die 21. Berechnung der Primzahlen mit 650 OpenMP-Thread(s) ist korrekt.
		22. Berechnung: 3.447627 s. Die 22. Berechnung der Primzahlen mit 650 OpenMP-Thread(s) ist korrekt.
		23. Berechnung: 3.435226 s. Die 23. Berechnung der Primzahlen mit 650 OpenMP-Thread(s) ist korrekt.
		24. Berechnung: 3.345387 s. Die 24. Berechnung der Primzahlen mit 650 OpenMP-Thread(s) ist korrekt.
		25. Berechnung: 3.426086 s. Die 25. Berechnung der Primzahlen mit 650 OpenMP-Thread(s) ist korrekt.
		26. Berechnung: 3.430273 s. Die 26. Berechnung der Primzahlen mit 650 OpenMP-Thread(s) ist korrekt.
		27. Berechnung: 3.348008 s. Die 27. Berechnung der Primzahlen mit 650 OpenMP-Thread(s) ist korrekt.
		28. Berechnung: 3.453674 s. Die 28. Berechnung der Primzahlen mit 650 OpenMP-Thread(s) ist korrekt.
		29. Berechnung: 3.455827 s. Die 29. Berechnung der Primzahlen mit 650 OpenMP-Thread(s) ist korrekt.
		30. Berechnung: 3.361863 s. Die 30. Berechnung der Primzahlen mit 650 OpenMP-Thread(s) ist korrekt.
		31. Berechnung: 3.426418 s. Die 31. Berechnung der Primzahlen mit 650 OpenMP-Thread(s) ist korrekt.
		32. Berechnung: 3.447092 s. Die 32. Berechnung der Primzahlen mit 650 OpenMP-Thread(s) ist korrekt.
		33. Berechnung: 3.350131 s. Die 33. Berechnung der Primzahlen mit 650 OpenMP-Thread(s) ist korrekt.
		34. Berechnung: 3.419692 s. Die 34. Berechnung der Primzahlen mit 650 OpenMP-Thread(s) ist korrekt.
		35. Berechnung: 3.378514 s. Die 35. Berechnung der Primzahlen mit 650 OpenMP-Thread(s) ist korrekt.
		36. Berechnung: 3.399806 s. Die 36. Berechnung der Primzahlen mit 650 OpenMP-Thread(s) ist korrekt.
		37. Berechnung: 3.465399 s. Die 37. Berechnung der Primzahlen mit 650 OpenMP-Thread(s) ist korrekt.
		38. Berechnung: 3.370208 s. Die 38. Berechnung der Primzahlen mit 650 OpenMP-Thread(s) ist korrekt.
		39. Berechnung: 3.451810 s. Die 39. Berechnung der Primzahlen mit 650 OpenMP-Thread(s) ist korrekt.
		40. Berechnung: 3.441736 s. Die 40. Berechnung der Primzahlen mit 650 OpenMP-Thread(s) ist korrekt.
		41. Berechnung: 3.337441 s. Die 41. Berechnung der Primzahlen mit 650 OpenMP-Thread(s) ist korrekt.
		42. Berechnung: 3.431513 s. Die 42. Berechnung der Primzahlen mit 650 OpenMP-Thread(s) ist korrekt.
		43. Berechnung: 3.459119 s. Die 43. Berechnung der Primzahlen mit 650 OpenMP-Thread(s) ist korrekt.
		44. Berechnung: 3.344047 s. Die 44. Berechnung der Primzahlen mit 650 OpenMP-Thread(s) ist korrekt.
		45. Berechnung: 3.431377 s. Die 45. Berechnung der Primzahlen mit 650 OpenMP-Thread(s) ist korrekt.
		46. Berechnung: 3.436017 s. Die 46. Berechnung der Primzahlen mit 650 OpenMP-Thread(s) ist korrekt.
		47. Berechnung: 3.350133 s. Die 47. Berechnung der Primzahlen mit 650 OpenMP-Thread(s) ist korrekt.
		48. Berechnung: 3.433917 s. Die 48. Berechnung der Primzahlen mit 650 OpenMP-Thread(s) ist korrekt.
		49. Berechnung: 3.416107 s. Die 49. Berechnung der Primzahlen mit 650 OpenMP-Thread(s) ist korrekt.
		50. Berechnung: 3.345571 s. Die 50. Berechnung der Primzahlen mit 650 OpenMP-Thread(s) ist korrekt.
		Durchschnittliche Ausfuehrungszeit des Programmes bei 50 Durchlaeufen mit 650 OpenMP-Thread(s): 3.406405 s. Alle berechneten Primzahlen mit 650 OpenMP-Thread(s) sind korrekt.
	Berechnung mittels 700 OpenMP-Thread(s):
		1. Berechnung: 3.438567 s. Die 1. Berechnung der Primzahlen mit 700 OpenMP-Thread(s) ist korrekt.
		2. Berechnung: 3.442549 s. Die 2. Berechnung der Primzahlen mit 700 OpenMP-Thread(s) ist korrekt.
		3. Berechnung: 3.337839 s. Die 3. Berechnung der Primzahlen mit 700 OpenMP-Thread(s) ist korrekt.
		4. Berechnung: 3.426298 s. Die 4. Berechnung der Primzahlen mit 700 OpenMP-Thread(s) ist korrekt.
		5. Berechnung: 3.431710 s. Die 5. Berechnung der Primzahlen mit 700 OpenMP-Thread(s) ist korrekt.
		6. Berechnung: 3.360978 s. Die 6. Berechnung der Primzahlen mit 700 OpenMP-Thread(s) ist korrekt.
		7. Berechnung: 3.420923 s. Die 7. Berechnung der Primzahlen mit 700 OpenMP-Thread(s) ist korrekt.
		8. Berechnung: 3.348468 s. Die 8. Berechnung der Primzahlen mit 700 OpenMP-Thread(s) ist korrekt.
		9. Berechnung: 3.425927 s. Die 9. Berechnung der Primzahlen mit 700 OpenMP-Thread(s) ist korrekt.
		10. Berechnung: 3.450362 s. Die 10. Berechnung der Primzahlen mit 700 OpenMP-Thread(s) ist korrekt.
		11. Berechnung: 3.336535 s. Die 11. Berechnung der Primzahlen mit 700 OpenMP-Thread(s) ist korrekt.
		12. Berechnung: 3.438947 s. Die 12. Berechnung der Primzahlen mit 700 OpenMP-Thread(s) ist korrekt.
		13. Berechnung: 3.441564 s. Die 13. Berechnung der Primzahlen mit 700 OpenMP-Thread(s) ist korrekt.
		14. Berechnung: 3.364702 s. Die 14. Berechnung der Primzahlen mit 700 OpenMP-Thread(s) ist korrekt.
		15. Berechnung: 3.419234 s. Die 15. Berechnung der Primzahlen mit 700 OpenMP-Thread(s) ist korrekt.
		16. Berechnung: 3.412817 s. Die 16. Berechnung der Primzahlen mit 700 OpenMP-Thread(s) ist korrekt.
		17. Berechnung: 3.345773 s. Die 17. Berechnung der Primzahlen mit 700 OpenMP-Thread(s) ist korrekt.
		18. Berechnung: 3.432057 s. Die 18. Berechnung der Primzahlen mit 700 OpenMP-Thread(s) ist korrekt.
		19. Berechnung: 3.432816 s. Die 19. Berechnung der Primzahlen mit 700 OpenMP-Thread(s) ist korrekt.
		20. Berechnung: 3.338442 s. Die 20. Berechnung der Primzahlen mit 700 OpenMP-Thread(s) ist korrekt.
		21. Berechnung: 3.430126 s. Die 21. Berechnung der Primzahlen mit 700 OpenMP-Thread(s) ist korrekt.
		22. Berechnung: 3.426034 s. Die 22. Berechnung der Primzahlen mit 700 OpenMP-Thread(s) ist korrekt.
		23. Berechnung: 3.352853 s. Die 23. Berechnung der Primzahlen mit 700 OpenMP-Thread(s) ist korrekt.
		24. Berechnung: 3.428063 s. Die 24. Berechnung der Primzahlen mit 700 OpenMP-Thread(s) ist korrekt.
		25. Berechnung: 3.410894 s. Die 25. Berechnung der Primzahlen mit 700 OpenMP-Thread(s) ist korrekt.
		26. Berechnung: 3.355862 s. Die 26. Berechnung der Primzahlen mit 700 OpenMP-Thread(s) ist korrekt.
		27. Berechnung: 3.427574 s. Die 27. Berechnung der Primzahlen mit 700 OpenMP-Thread(s) ist korrekt.
		28. Berechnung: 3.691287 s. Die 28. Berechnung der Primzahlen mit 700 OpenMP-Thread(s) ist korrekt.
		29. Berechnung: 3.422705 s. Die 29. Berechnung der Primzahlen mit 700 OpenMP-Thread(s) ist korrekt.
		30. Berechnung: 3.443719 s. Die 30. Berechnung der Primzahlen mit 700 OpenMP-Thread(s) ist korrekt.
		31. Berechnung: 3.391710 s. Die 31. Berechnung der Primzahlen mit 700 OpenMP-Thread(s) ist korrekt.
		32. Berechnung: 3.451405 s. Die 32. Berechnung der Primzahlen mit 700 OpenMP-Thread(s) ist korrekt.
		33. Berechnung: 3.493737 s. Die 33. Berechnung der Primzahlen mit 700 OpenMP-Thread(s) ist korrekt.
		34. Berechnung: 3.351761 s. Die 34. Berechnung der Primzahlen mit 700 OpenMP-Thread(s) ist korrekt.
		35. Berechnung: 3.426866 s. Die 35. Berechnung der Primzahlen mit 700 OpenMP-Thread(s) ist korrekt.
		36. Berechnung: 3.437705 s. Die 36. Berechnung der Primzahlen mit 700 OpenMP-Thread(s) ist korrekt.
		37. Berechnung: 3.349385 s. Die 37. Berechnung der Primzahlen mit 700 OpenMP-Thread(s) ist korrekt.
		38. Berechnung: 3.450637 s. Die 38. Berechnung der Primzahlen mit 700 OpenMP-Thread(s) ist korrekt.
		39. Berechnung: 3.429647 s. Die 39. Berechnung der Primzahlen mit 700 OpenMP-Thread(s) ist korrekt.
		40. Berechnung: 3.346121 s. Die 40. Berechnung der Primzahlen mit 700 OpenMP-Thread(s) ist korrekt.
		41. Berechnung: 3.445940 s. Die 41. Berechnung der Primzahlen mit 700 OpenMP-Thread(s) ist korrekt.
		42. Berechnung: 3.443538 s. Die 42. Berechnung der Primzahlen mit 700 OpenMP-Thread(s) ist korrekt.
		43. Berechnung: 3.336788 s. Die 43. Berechnung der Primzahlen mit 700 OpenMP-Thread(s) ist korrekt.
		44. Berechnung: 3.446652 s. Die 44. Berechnung der Primzahlen mit 700 OpenMP-Thread(s) ist korrekt.
		45. Berechnung: 3.576298 s. Die 45. Berechnung der Primzahlen mit 700 OpenMP-Thread(s) ist korrekt.
		46. Berechnung: 3.360972 s. Die 46. Berechnung der Primzahlen mit 700 OpenMP-Thread(s) ist korrekt.
		47. Berechnung: 3.414579 s. Die 47. Berechnung der Primzahlen mit 700 OpenMP-Thread(s) ist korrekt.
		48. Berechnung: 3.435509 s. Die 48. Berechnung der Primzahlen mit 700 OpenMP-Thread(s) ist korrekt.
		49. Berechnung: 3.337446 s. Die 49. Berechnung der Primzahlen mit 700 OpenMP-Thread(s) ist korrekt.
		50. Berechnung: 3.436708 s. Die 50. Berechnung der Primzahlen mit 700 OpenMP-Thread(s) ist korrekt.
		Durchschnittliche Ausfuehrungszeit des Programmes bei 50 Durchlaeufen mit 700 OpenMP-Thread(s): 3.415981 s. Alle berechneten Primzahlen mit 700 OpenMP-Thread(s) sind korrekt.
	Berechnung mittels 750 OpenMP-Thread(s):
		1. Berechnung: 3.424914 s. Die 1. Berechnung der Primzahlen mit 750 OpenMP-Thread(s) ist korrekt.
		2. Berechnung: 3.352639 s. Die 2. Berechnung der Primzahlen mit 750 OpenMP-Thread(s) ist korrekt.
		3. Berechnung: 3.459313 s. Die 3. Berechnung der Primzahlen mit 750 OpenMP-Thread(s) ist korrekt.
		4. Berechnung: 3.399279 s. Die 4. Berechnung der Primzahlen mit 750 OpenMP-Thread(s) ist korrekt.
		5. Berechnung: 3.389340 s. Die 5. Berechnung der Primzahlen mit 750 OpenMP-Thread(s) ist korrekt.
		6. Berechnung: 3.436034 s. Die 6. Berechnung der Primzahlen mit 750 OpenMP-Thread(s) ist korrekt.
		7. Berechnung: 3.341951 s. Die 7. Berechnung der Primzahlen mit 750 OpenMP-Thread(s) ist korrekt.
		8. Berechnung: 3.447714 s. Die 8. Berechnung der Primzahlen mit 750 OpenMP-Thread(s) ist korrekt.
		9. Berechnung: 3.422786 s. Die 9. Berechnung der Primzahlen mit 750 OpenMP-Thread(s) ist korrekt.
		10. Berechnung: 3.352125 s. Die 10. Berechnung der Primzahlen mit 750 OpenMP-Thread(s) ist korrekt.
		11. Berechnung: 3.427404 s. Die 11. Berechnung der Primzahlen mit 750 OpenMP-Thread(s) ist korrekt.
		12. Berechnung: 3.427159 s. Die 12. Berechnung der Primzahlen mit 750 OpenMP-Thread(s) ist korrekt.
		13. Berechnung: 3.326064 s. Die 13. Berechnung der Primzahlen mit 750 OpenMP-Thread(s) ist korrekt.
		14. Berechnung: 3.425469 s. Die 14. Berechnung der Primzahlen mit 750 OpenMP-Thread(s) ist korrekt.
		15. Berechnung: 3.442631 s. Die 15. Berechnung der Primzahlen mit 750 OpenMP-Thread(s) ist korrekt.
		16. Berechnung: 3.344420 s. Die 16. Berechnung der Primzahlen mit 750 OpenMP-Thread(s) ist korrekt.
		17. Berechnung: 3.435326 s. Die 17. Berechnung der Primzahlen mit 750 OpenMP-Thread(s) ist korrekt.
		18. Berechnung: 3.454014 s. Die 18. Berechnung der Primzahlen mit 750 OpenMP-Thread(s) ist korrekt.
		19. Berechnung: 3.354276 s. Die 19. Berechnung der Primzahlen mit 750 OpenMP-Thread(s) ist korrekt.
		20. Berechnung: 3.449613 s. Die 20. Berechnung der Primzahlen mit 750 OpenMP-Thread(s) ist korrekt.
		21. Berechnung: 3.430366 s. Die 21. Berechnung der Primzahlen mit 750 OpenMP-Thread(s) ist korrekt.
		22. Berechnung: 3.363351 s. Die 22. Berechnung der Primzahlen mit 750 OpenMP-Thread(s) ist korrekt.
		23. Berechnung: 3.443578 s. Die 23. Berechnung der Primzahlen mit 750 OpenMP-Thread(s) ist korrekt.
		24. Berechnung: 3.459131 s. Die 24. Berechnung der Primzahlen mit 750 OpenMP-Thread(s) ist korrekt.
		25. Berechnung: 3.346307 s. Die 25. Berechnung der Primzahlen mit 750 OpenMP-Thread(s) ist korrekt.
		26. Berechnung: 3.450172 s. Die 26. Berechnung der Primzahlen mit 750 OpenMP-Thread(s) ist korrekt.
		27. Berechnung: 3.350980 s. Die 27. Berechnung der Primzahlen mit 750 OpenMP-Thread(s) ist korrekt.
		28. Berechnung: 3.426441 s. Die 28. Berechnung der Primzahlen mit 750 OpenMP-Thread(s) ist korrekt.
		29. Berechnung: 3.428583 s. Die 29. Berechnung der Primzahlen mit 750 OpenMP-Thread(s) ist korrekt.
		30. Berechnung: 3.356555 s. Die 30. Berechnung der Primzahlen mit 750 OpenMP-Thread(s) ist korrekt.
		31. Berechnung: 3.445746 s. Die 31. Berechnung der Primzahlen mit 750 OpenMP-Thread(s) ist korrekt.
		32. Berechnung: 3.447709 s. Die 32. Berechnung der Primzahlen mit 750 OpenMP-Thread(s) ist korrekt.
		33. Berechnung: 3.349037 s. Die 33. Berechnung der Primzahlen mit 750 OpenMP-Thread(s) ist korrekt.
		34. Berechnung: 3.441352 s. Die 34. Berechnung der Primzahlen mit 750 OpenMP-Thread(s) ist korrekt.
		35. Berechnung: 3.449930 s. Die 35. Berechnung der Primzahlen mit 750 OpenMP-Thread(s) ist korrekt.
		36. Berechnung: 3.343619 s. Die 36. Berechnung der Primzahlen mit 750 OpenMP-Thread(s) ist korrekt.
		37. Berechnung: 3.417205 s. Die 37. Berechnung der Primzahlen mit 750 OpenMP-Thread(s) ist korrekt.
		38. Berechnung: 3.432936 s. Die 38. Berechnung der Primzahlen mit 750 OpenMP-Thread(s) ist korrekt.
		39. Berechnung: 3.348549 s. Die 39. Berechnung der Primzahlen mit 750 OpenMP-Thread(s) ist korrekt.
		40. Berechnung: 3.438554 s. Die 40. Berechnung der Primzahlen mit 750 OpenMP-Thread(s) ist korrekt.
		41. Berechnung: 3.447170 s. Die 41. Berechnung der Primzahlen mit 750 OpenMP-Thread(s) ist korrekt.
		42. Berechnung: 3.337568 s. Die 42. Berechnung der Primzahlen mit 750 OpenMP-Thread(s) ist korrekt.
		43. Berechnung: 3.440711 s. Die 43. Berechnung der Primzahlen mit 750 OpenMP-Thread(s) ist korrekt.
		44. Berechnung: 3.440153 s. Die 44. Berechnung der Primzahlen mit 750 OpenMP-Thread(s) ist korrekt.
		45. Berechnung: 3.333209 s. Die 45. Berechnung der Primzahlen mit 750 OpenMP-Thread(s) ist korrekt.
		46. Berechnung: 3.450911 s. Die 46. Berechnung der Primzahlen mit 750 OpenMP-Thread(s) ist korrekt.
		47. Berechnung: 3.350537 s. Die 47. Berechnung der Primzahlen mit 750 OpenMP-Thread(s) ist korrekt.
		48. Berechnung: 3.428543 s. Die 48. Berechnung der Primzahlen mit 750 OpenMP-Thread(s) ist korrekt.
		49. Berechnung: 3.425125 s. Die 49. Berechnung der Primzahlen mit 750 OpenMP-Thread(s) ist korrekt.
		50. Berechnung: 3.348526 s. Die 50. Berechnung der Primzahlen mit 750 OpenMP-Thread(s) ist korrekt.
		Durchschnittliche Ausfuehrungszeit des Programmes bei 50 Durchlaeufen mit 750 OpenMP-Thread(s): 3.405701 s. Alle berechneten Primzahlen mit 750 OpenMP-Thread(s) sind korrekt.
	Berechnung mittels 800 OpenMP-Thread(s):
		1. Berechnung: 3.449475 s. Die 1. Berechnung der Primzahlen mit 800 OpenMP-Thread(s) ist korrekt.
		2. Berechnung: 3.479838 s. Die 2. Berechnung der Primzahlen mit 800 OpenMP-Thread(s) ist korrekt.
		3. Berechnung: 3.337052 s. Die 3. Berechnung der Primzahlen mit 800 OpenMP-Thread(s) ist korrekt.
		4. Berechnung: 3.425405 s. Die 4. Berechnung der Primzahlen mit 800 OpenMP-Thread(s) ist korrekt.
		5. Berechnung: 3.429307 s. Die 5. Berechnung der Primzahlen mit 800 OpenMP-Thread(s) ist korrekt.
		6. Berechnung: 3.373486 s. Die 6. Berechnung der Primzahlen mit 800 OpenMP-Thread(s) ist korrekt.
		7. Berechnung: 3.431895 s. Die 7. Berechnung der Primzahlen mit 800 OpenMP-Thread(s) ist korrekt.
		8. Berechnung: 3.429724 s. Die 8. Berechnung der Primzahlen mit 800 OpenMP-Thread(s) ist korrekt.
		9. Berechnung: 3.352994 s. Die 9. Berechnung der Primzahlen mit 800 OpenMP-Thread(s) ist korrekt.
		10. Berechnung: 3.446523 s. Die 10. Berechnung der Primzahlen mit 800 OpenMP-Thread(s) ist korrekt.
		11. Berechnung: 3.449332 s. Die 11. Berechnung der Primzahlen mit 800 OpenMP-Thread(s) ist korrekt.
		12. Berechnung: 3.344046 s. Die 12. Berechnung der Primzahlen mit 800 OpenMP-Thread(s) ist korrekt.
		13. Berechnung: 3.432877 s. Die 13. Berechnung der Primzahlen mit 800 OpenMP-Thread(s) ist korrekt.
		14. Berechnung: 3.431501 s. Die 14. Berechnung der Primzahlen mit 800 OpenMP-Thread(s) ist korrekt.
		15. Berechnung: 3.330590 s. Die 15. Berechnung der Primzahlen mit 800 OpenMP-Thread(s) ist korrekt.
		16. Berechnung: 3.436785 s. Die 16. Berechnung der Primzahlen mit 800 OpenMP-Thread(s) ist korrekt.
		17. Berechnung: 3.422696 s. Die 17. Berechnung der Primzahlen mit 800 OpenMP-Thread(s) ist korrekt.
		18. Berechnung: 3.414767 s. Die 18. Berechnung der Primzahlen mit 800 OpenMP-Thread(s) ist korrekt.
		19. Berechnung: 3.429332 s. Die 19. Berechnung der Primzahlen mit 800 OpenMP-Thread(s) ist korrekt.
		20. Berechnung: 3.374373 s. Die 20. Berechnung der Primzahlen mit 800 OpenMP-Thread(s) ist korrekt.
		21. Berechnung: 3.461667 s. Die 21. Berechnung der Primzahlen mit 800 OpenMP-Thread(s) ist korrekt.
		22. Berechnung: 3.433407 s. Die 22. Berechnung der Primzahlen mit 800 OpenMP-Thread(s) ist korrekt.
		23. Berechnung: 3.349567 s. Die 23. Berechnung der Primzahlen mit 800 OpenMP-Thread(s) ist korrekt.
		24. Berechnung: 3.431611 s. Die 24. Berechnung der Primzahlen mit 800 OpenMP-Thread(s) ist korrekt.
		25. Berechnung: 3.428262 s. Die 25. Berechnung der Primzahlen mit 800 OpenMP-Thread(s) ist korrekt.
		26. Berechnung: 3.335656 s. Die 26. Berechnung der Primzahlen mit 800 OpenMP-Thread(s) ist korrekt.
		27. Berechnung: 3.437650 s. Die 27. Berechnung der Primzahlen mit 800 OpenMP-Thread(s) ist korrekt.
		28. Berechnung: 3.434214 s. Die 28. Berechnung der Primzahlen mit 800 OpenMP-Thread(s) ist korrekt.
		29. Berechnung: 3.349814 s. Die 29. Berechnung der Primzahlen mit 800 OpenMP-Thread(s) ist korrekt.
		30. Berechnung: 3.421953 s. Die 30. Berechnung der Primzahlen mit 800 OpenMP-Thread(s) ist korrekt.
		31. Berechnung: 3.423492 s. Die 31. Berechnung der Primzahlen mit 800 OpenMP-Thread(s) ist korrekt.
		32. Berechnung: 3.389749 s. Die 32. Berechnung der Primzahlen mit 800 OpenMP-Thread(s) ist korrekt.
		33. Berechnung: 3.442016 s. Die 33. Berechnung der Primzahlen mit 800 OpenMP-Thread(s) ist korrekt.
		34. Berechnung: 3.423008 s. Die 34. Berechnung der Primzahlen mit 800 OpenMP-Thread(s) ist korrekt.
		35. Berechnung: 3.331993 s. Die 35. Berechnung der Primzahlen mit 800 OpenMP-Thread(s) ist korrekt.
		36. Berechnung: 3.436701 s. Die 36. Berechnung der Primzahlen mit 800 OpenMP-Thread(s) ist korrekt.
		37. Berechnung: 3.436655 s. Die 37. Berechnung der Primzahlen mit 800 OpenMP-Thread(s) ist korrekt.
		38. Berechnung: 3.355267 s. Die 38. Berechnung der Primzahlen mit 800 OpenMP-Thread(s) ist korrekt.
		39. Berechnung: 3.422819 s. Die 39. Berechnung der Primzahlen mit 800 OpenMP-Thread(s) ist korrekt.
		40. Berechnung: 3.339686 s. Die 40. Berechnung der Primzahlen mit 800 OpenMP-Thread(s) ist korrekt.
		41. Berechnung: 3.444238 s. Die 41. Berechnung der Primzahlen mit 800 OpenMP-Thread(s) ist korrekt.
		42. Berechnung: 3.440866 s. Die 42. Berechnung der Primzahlen mit 800 OpenMP-Thread(s) ist korrekt.
		43. Berechnung: 3.341225 s. Die 43. Berechnung der Primzahlen mit 800 OpenMP-Thread(s) ist korrekt.
		44. Berechnung: 3.432887 s. Die 44. Berechnung der Primzahlen mit 800 OpenMP-Thread(s) ist korrekt.
		45. Berechnung: 3.468954 s. Die 45. Berechnung der Primzahlen mit 800 OpenMP-Thread(s) ist korrekt.
		46. Berechnung: 3.347344 s. Die 46. Berechnung der Primzahlen mit 800 OpenMP-Thread(s) ist korrekt.
		47. Berechnung: 3.450065 s. Die 47. Berechnung der Primzahlen mit 800 OpenMP-Thread(s) ist korrekt.
		48. Berechnung: 3.445872 s. Die 48. Berechnung der Primzahlen mit 800 OpenMP-Thread(s) ist korrekt.
		49. Berechnung: 3.346701 s. Die 49. Berechnung der Primzahlen mit 800 OpenMP-Thread(s) ist korrekt.
		50. Berechnung: 3.428204 s. Die 50. Berechnung der Primzahlen mit 800 OpenMP-Thread(s) ist korrekt.
		Durchschnittliche Ausfuehrungszeit des Programmes bei 50 Durchlaeufen mit 800 OpenMP-Thread(s): 3.409071 s. Alle berechneten Primzahlen mit 800 OpenMP-Thread(s) sind korrekt.
	Berechnung mittels 850 OpenMP-Thread(s):
		1. Berechnung: 3.423368 s. Die 1. Berechnung der Primzahlen mit 850 OpenMP-Thread(s) ist korrekt.
		2. Berechnung: 3.352382 s. Die 2. Berechnung der Primzahlen mit 850 OpenMP-Thread(s) ist korrekt.
		3. Berechnung: 3.428856 s. Die 3. Berechnung der Primzahlen mit 850 OpenMP-Thread(s) ist korrekt.
		4. Berechnung: 3.421599 s. Die 4. Berechnung der Primzahlen mit 850 OpenMP-Thread(s) ist korrekt.
		5. Berechnung: 3.352901 s. Die 5. Berechnung der Primzahlen mit 850 OpenMP-Thread(s) ist korrekt.
		6. Berechnung: 3.463199 s. Die 6. Berechnung der Primzahlen mit 850 OpenMP-Thread(s) ist korrekt.
		7. Berechnung: 3.428296 s. Die 7. Berechnung der Primzahlen mit 850 OpenMP-Thread(s) ist korrekt.
		8. Berechnung: 3.347327 s. Die 8. Berechnung der Primzahlen mit 850 OpenMP-Thread(s) ist korrekt.
		9. Berechnung: 3.424139 s. Die 9. Berechnung der Primzahlen mit 850 OpenMP-Thread(s) ist korrekt.
		10. Berechnung: 3.381042 s. Die 10. Berechnung der Primzahlen mit 850 OpenMP-Thread(s) ist korrekt.
		11. Berechnung: 3.405929 s. Die 11. Berechnung der Primzahlen mit 850 OpenMP-Thread(s) ist korrekt.
		12. Berechnung: 3.462636 s. Die 12. Berechnung der Primzahlen mit 850 OpenMP-Thread(s) ist korrekt.
		13. Berechnung: 3.331445 s. Die 13. Berechnung der Primzahlen mit 850 OpenMP-Thread(s) ist korrekt.
		14. Berechnung: 3.449127 s. Die 14. Berechnung der Primzahlen mit 850 OpenMP-Thread(s) ist korrekt.
		15. Berechnung: 3.431194 s. Die 15. Berechnung der Primzahlen mit 850 OpenMP-Thread(s) ist korrekt.
		16. Berechnung: 3.344933 s. Die 16. Berechnung der Primzahlen mit 850 OpenMP-Thread(s) ist korrekt.
		17. Berechnung: 3.438259 s. Die 17. Berechnung der Primzahlen mit 850 OpenMP-Thread(s) ist korrekt.
		18. Berechnung: 3.427534 s. Die 18. Berechnung der Primzahlen mit 850 OpenMP-Thread(s) ist korrekt.
		19. Berechnung: 3.354955 s. Die 19. Berechnung der Primzahlen mit 850 OpenMP-Thread(s) ist korrekt.
		20. Berechnung: 3.436455 s. Die 20. Berechnung der Primzahlen mit 850 OpenMP-Thread(s) ist korrekt.
		21. Berechnung: 3.426694 s. Die 21. Berechnung der Primzahlen mit 850 OpenMP-Thread(s) ist korrekt.
		22. Berechnung: 3.344363 s. Die 22. Berechnung der Primzahlen mit 850 OpenMP-Thread(s) ist korrekt.
		23. Berechnung: 3.460212 s. Die 23. Berechnung der Primzahlen mit 850 OpenMP-Thread(s) ist korrekt.
		24. Berechnung: 3.453806 s. Die 24. Berechnung der Primzahlen mit 850 OpenMP-Thread(s) ist korrekt.
		25. Berechnung: 3.334853 s. Die 25. Berechnung der Primzahlen mit 850 OpenMP-Thread(s) ist korrekt.
		26. Berechnung: 3.433076 s. Die 26. Berechnung der Primzahlen mit 850 OpenMP-Thread(s) ist korrekt.
		27. Berechnung: 3.431987 s. Die 27. Berechnung der Primzahlen mit 850 OpenMP-Thread(s) ist korrekt.
		28. Berechnung: 3.352363 s. Die 28. Berechnung der Primzahlen mit 850 OpenMP-Thread(s) ist korrekt.
		29. Berechnung: 3.423820 s. Die 29. Berechnung der Primzahlen mit 850 OpenMP-Thread(s) ist korrekt.
		30. Berechnung: 3.410790 s. Die 30. Berechnung der Primzahlen mit 850 OpenMP-Thread(s) ist korrekt.
		31. Berechnung: 3.354779 s. Die 31. Berechnung der Primzahlen mit 850 OpenMP-Thread(s) ist korrekt.
		32. Berechnung: 3.448897 s. Die 32. Berechnung der Primzahlen mit 850 OpenMP-Thread(s) ist korrekt.
		33. Berechnung: 3.332461 s. Die 33. Berechnung der Primzahlen mit 850 OpenMP-Thread(s) ist korrekt.
		34. Berechnung: 3.453949 s. Die 34. Berechnung der Primzahlen mit 850 OpenMP-Thread(s) ist korrekt.
		35. Berechnung: 3.432231 s. Die 35. Berechnung der Primzahlen mit 850 OpenMP-Thread(s) ist korrekt.
		36. Berechnung: 3.352478 s. Die 36. Berechnung der Primzahlen mit 850 OpenMP-Thread(s) ist korrekt.
		37. Berechnung: 3.423341 s. Die 37. Berechnung der Primzahlen mit 850 OpenMP-Thread(s) ist korrekt.
		38. Berechnung: 3.440770 s. Die 38. Berechnung der Primzahlen mit 850 OpenMP-Thread(s) ist korrekt.
		39. Berechnung: 3.344622 s. Die 39. Berechnung der Primzahlen mit 850 OpenMP-Thread(s) ist korrekt.
		40. Berechnung: 3.423072 s. Die 40. Berechnung der Primzahlen mit 850 OpenMP-Thread(s) ist korrekt.
		41. Berechnung: 3.434087 s. Die 41. Berechnung der Primzahlen mit 850 OpenMP-Thread(s) ist korrekt.
		42. Berechnung: 3.339825 s. Die 42. Berechnung der Primzahlen mit 850 OpenMP-Thread(s) ist korrekt.
		43. Berechnung: 3.441754 s. Die 43. Berechnung der Primzahlen mit 850 OpenMP-Thread(s) ist korrekt.
		44. Berechnung: 3.429522 s. Die 44. Berechnung der Primzahlen mit 850 OpenMP-Thread(s) ist korrekt.
		45. Berechnung: 3.335579 s. Die 45. Berechnung der Primzahlen mit 850 OpenMP-Thread(s) ist korrekt.
		46. Berechnung: 3.438978 s. Die 46. Berechnung der Primzahlen mit 850 OpenMP-Thread(s) ist korrekt.
		47. Berechnung: 3.447192 s. Die 47. Berechnung der Primzahlen mit 850 OpenMP-Thread(s) ist korrekt.
		48. Berechnung: 3.345073 s. Die 48. Berechnung der Primzahlen mit 850 OpenMP-Thread(s) ist korrekt.
		49. Berechnung: 3.428825 s. Die 49. Berechnung der Primzahlen mit 850 OpenMP-Thread(s) ist korrekt.
		50. Berechnung: 3.456192 s. Die 50. Berechnung der Primzahlen mit 850 OpenMP-Thread(s) ist korrekt.
		Durchschnittliche Ausfuehrungszeit des Programmes bei 50 Durchlaeufen mit 850 OpenMP-Thread(s): 3.405623 s. Alle berechneten Primzahlen mit 850 OpenMP-Thread(s) sind korrekt.
	Berechnung mittels 900 OpenMP-Thread(s):
		1. Berechnung: 3.359706 s. Die 1. Berechnung der Primzahlen mit 900 OpenMP-Thread(s) ist korrekt.
		2. Berechnung: 3.442686 s. Die 2. Berechnung der Primzahlen mit 900 OpenMP-Thread(s) ist korrekt.
		3. Berechnung: 3.331387 s. Die 3. Berechnung der Primzahlen mit 900 OpenMP-Thread(s) ist korrekt.
		4. Berechnung: 3.447636 s. Die 4. Berechnung der Primzahlen mit 900 OpenMP-Thread(s) ist korrekt.
		5. Berechnung: 4.001096 s. Die 5. Berechnung der Primzahlen mit 900 OpenMP-Thread(s) ist korrekt.
		6. Berechnung: 4.328062 s. Die 6. Berechnung der Primzahlen mit 900 OpenMP-Thread(s) ist korrekt.
		7. Berechnung: 4.078991 s. Die 7. Berechnung der Primzahlen mit 900 OpenMP-Thread(s) ist korrekt.
		8. Berechnung: 3.755157 s. Die 8. Berechnung der Primzahlen mit 900 OpenMP-Thread(s) ist korrekt.
		9. Berechnung: 3.442924 s. Die 9. Berechnung der Primzahlen mit 900 OpenMP-Thread(s) ist korrekt.
		10. Berechnung: 3.450327 s. Die 10. Berechnung der Primzahlen mit 900 OpenMP-Thread(s) ist korrekt.
		11. Berechnung: 3.359960 s. Die 11. Berechnung der Primzahlen mit 900 OpenMP-Thread(s) ist korrekt.
		12. Berechnung: 3.436547 s. Die 12. Berechnung der Primzahlen mit 900 OpenMP-Thread(s) ist korrekt.
		13. Berechnung: 3.350473 s. Die 13. Berechnung der Primzahlen mit 900 OpenMP-Thread(s) ist korrekt.
		14. Berechnung: 3.425755 s. Die 14. Berechnung der Primzahlen mit 900 OpenMP-Thread(s) ist korrekt.
		15. Berechnung: 3.444497 s. Die 15. Berechnung der Primzahlen mit 900 OpenMP-Thread(s) ist korrekt.
		16. Berechnung: 3.361543 s. Die 16. Berechnung der Primzahlen mit 900 OpenMP-Thread(s) ist korrekt.
		17. Berechnung: 3.445451 s. Die 17. Berechnung der Primzahlen mit 900 OpenMP-Thread(s) ist korrekt.
		18. Berechnung: 3.437592 s. Die 18. Berechnung der Primzahlen mit 900 OpenMP-Thread(s) ist korrekt.
		19. Berechnung: 3.344353 s. Die 19. Berechnung der Primzahlen mit 900 OpenMP-Thread(s) ist korrekt.
		20. Berechnung: 3.561965 s. Die 20. Berechnung der Primzahlen mit 900 OpenMP-Thread(s) ist korrekt.
		21. Berechnung: 3.424114 s. Die 21. Berechnung der Primzahlen mit 900 OpenMP-Thread(s) ist korrekt.
		22. Berechnung: 3.416332 s. Die 22. Berechnung der Primzahlen mit 900 OpenMP-Thread(s) ist korrekt.
		23. Berechnung: 3.430709 s. Die 23. Berechnung der Primzahlen mit 900 OpenMP-Thread(s) ist korrekt.
		24. Berechnung: 3.424341 s. Die 24. Berechnung der Primzahlen mit 900 OpenMP-Thread(s) ist korrekt.
		25. Berechnung: 3.345177 s. Die 25. Berechnung der Primzahlen mit 900 OpenMP-Thread(s) ist korrekt.
		26. Berechnung: 3.444926 s. Die 26. Berechnung der Primzahlen mit 900 OpenMP-Thread(s) ist korrekt.
		27. Berechnung: 3.427171 s. Die 27. Berechnung der Primzahlen mit 900 OpenMP-Thread(s) ist korrekt.
		28. Berechnung: 3.344861 s. Die 28. Berechnung der Primzahlen mit 900 OpenMP-Thread(s) ist korrekt.
		29. Berechnung: 3.414365 s. Die 29. Berechnung der Primzahlen mit 900 OpenMP-Thread(s) ist korrekt.
		30. Berechnung: 3.468775 s. Die 30. Berechnung der Primzahlen mit 900 OpenMP-Thread(s) ist korrekt.
		31. Berechnung: 3.356205 s. Die 31. Berechnung der Primzahlen mit 900 OpenMP-Thread(s) ist korrekt.
		32. Berechnung: 3.441481 s. Die 32. Berechnung der Primzahlen mit 900 OpenMP-Thread(s) ist korrekt.
		33. Berechnung: 3.419531 s. Die 33. Berechnung der Primzahlen mit 900 OpenMP-Thread(s) ist korrekt.
		34. Berechnung: 3.365731 s. Die 34. Berechnung der Primzahlen mit 900 OpenMP-Thread(s) ist korrekt.
		35. Berechnung: 3.430080 s. Die 35. Berechnung der Primzahlen mit 900 OpenMP-Thread(s) ist korrekt.
		36. Berechnung: 3.338734 s. Die 36. Berechnung der Primzahlen mit 900 OpenMP-Thread(s) ist korrekt.
		37. Berechnung: 3.428113 s. Die 37. Berechnung der Primzahlen mit 900 OpenMP-Thread(s) ist korrekt.
		38. Berechnung: 3.431476 s. Die 38. Berechnung der Primzahlen mit 900 OpenMP-Thread(s) ist korrekt.
		39. Berechnung: 3.353985 s. Die 39. Berechnung der Primzahlen mit 900 OpenMP-Thread(s) ist korrekt.
		40. Berechnung: 3.425097 s. Die 40. Berechnung der Primzahlen mit 900 OpenMP-Thread(s) ist korrekt.
		41. Berechnung: 3.418756 s. Die 41. Berechnung der Primzahlen mit 900 OpenMP-Thread(s) ist korrekt.
		42. Berechnung: 3.339907 s. Die 42. Berechnung der Primzahlen mit 900 OpenMP-Thread(s) ist korrekt.
		43. Berechnung: 3.565059 s. Die 43. Berechnung der Primzahlen mit 900 OpenMP-Thread(s) ist korrekt.
		44. Berechnung: 3.469952 s. Die 44. Berechnung der Primzahlen mit 900 OpenMP-Thread(s) ist korrekt.
		45. Berechnung: 3.345030 s. Die 45. Berechnung der Primzahlen mit 900 OpenMP-Thread(s) ist korrekt.
		46. Berechnung: 3.446521 s. Die 46. Berechnung der Primzahlen mit 900 OpenMP-Thread(s) ist korrekt.
		47. Berechnung: 3.441944 s. Die 47. Berechnung der Primzahlen mit 900 OpenMP-Thread(s) ist korrekt.
		48. Berechnung: 3.349154 s. Die 48. Berechnung der Primzahlen mit 900 OpenMP-Thread(s) ist korrekt.
		49. Berechnung: 3.452301 s. Die 49. Berechnung der Primzahlen mit 900 OpenMP-Thread(s) ist korrekt.
		50. Berechnung: 3.436823 s. Die 50. Berechnung der Primzahlen mit 900 OpenMP-Thread(s) ist korrekt.
		Durchschnittliche Ausfuehrungszeit des Programmes bei 50 Durchlaeufen mit 900 OpenMP-Thread(s): 3.464055 s. Alle berechneten Primzahlen mit 900 OpenMP-Thread(s) sind korrekt.
	Berechnung mittels 950 OpenMP-Thread(s):
		1. Berechnung: 3.342120 s. Die 1. Berechnung der Primzahlen mit 950 OpenMP-Thread(s) ist korrekt.
		2. Berechnung: 3.445783 s. Die 2. Berechnung der Primzahlen mit 950 OpenMP-Thread(s) ist korrekt.
		3. Berechnung: 3.444854 s. Die 3. Berechnung der Primzahlen mit 950 OpenMP-Thread(s) ist korrekt.
		4. Berechnung: 3.348710 s. Die 4. Berechnung der Primzahlen mit 950 OpenMP-Thread(s) ist korrekt.
		5. Berechnung: 3.431391 s. Die 5. Berechnung der Primzahlen mit 950 OpenMP-Thread(s) ist korrekt.
		6. Berechnung: 3.429747 s. Die 6. Berechnung der Primzahlen mit 950 OpenMP-Thread(s) ist korrekt.
		7. Berechnung: 3.340314 s. Die 7. Berechnung der Primzahlen mit 950 OpenMP-Thread(s) ist korrekt.
		8. Berechnung: 3.422816 s. Die 8. Berechnung der Primzahlen mit 950 OpenMP-Thread(s) ist korrekt.
		9. Berechnung: 3.343411 s. Die 9. Berechnung der Primzahlen mit 950 OpenMP-Thread(s) ist korrekt.
		10. Berechnung: 3.434289 s. Die 10. Berechnung der Primzahlen mit 950 OpenMP-Thread(s) ist korrekt.
		11. Berechnung: 3.447758 s. Die 11. Berechnung der Primzahlen mit 950 OpenMP-Thread(s) ist korrekt.
		12. Berechnung: 3.360330 s. Die 12. Berechnung der Primzahlen mit 950 OpenMP-Thread(s) ist korrekt.
		13. Berechnung: 3.433901 s. Die 13. Berechnung der Primzahlen mit 950 OpenMP-Thread(s) ist korrekt.
		14. Berechnung: 3.441979 s. Die 14. Berechnung der Primzahlen mit 950 OpenMP-Thread(s) ist korrekt.
		15. Berechnung: 3.346120 s. Die 15. Berechnung der Primzahlen mit 950 OpenMP-Thread(s) ist korrekt.
		16. Berechnung: 3.432749 s. Die 16. Berechnung der Primzahlen mit 950 OpenMP-Thread(s) ist korrekt.
		17. Berechnung: 3.429344 s. Die 17. Berechnung der Primzahlen mit 950 OpenMP-Thread(s) ist korrekt.
		18. Berechnung: 3.346781 s. Die 18. Berechnung der Primzahlen mit 950 OpenMP-Thread(s) ist korrekt.
		19. Berechnung: 3.434585 s. Die 19. Berechnung der Primzahlen mit 950 OpenMP-Thread(s) ist korrekt.
		20. Berechnung: 3.452179 s. Die 20. Berechnung der Primzahlen mit 950 OpenMP-Thread(s) ist korrekt.
		21. Berechnung: 3.356595 s. Die 21. Berechnung der Primzahlen mit 950 OpenMP-Thread(s) ist korrekt.
		22. Berechnung: 3.428844 s. Die 22. Berechnung der Primzahlen mit 950 OpenMP-Thread(s) ist korrekt.
		23. Berechnung: 3.439405 s. Die 23. Berechnung der Primzahlen mit 950 OpenMP-Thread(s) ist korrekt.
		24. Berechnung: 3.348452 s. Die 24. Berechnung der Primzahlen mit 950 OpenMP-Thread(s) ist korrekt.
		25. Berechnung: 3.432292 s. Die 25. Berechnung der Primzahlen mit 950 OpenMP-Thread(s) ist korrekt.
		26. Berechnung: 3.427867 s. Die 26. Berechnung der Primzahlen mit 950 OpenMP-Thread(s) ist korrekt.
		27. Berechnung: 3.325755 s. Die 27. Berechnung der Primzahlen mit 950 OpenMP-Thread(s) ist korrekt.
		28. Berechnung: 3.444603 s. Die 28. Berechnung der Primzahlen mit 950 OpenMP-Thread(s) ist korrekt.
		29. Berechnung: 3.368845 s. Die 29. Berechnung der Primzahlen mit 950 OpenMP-Thread(s) ist korrekt.
		30. Berechnung: 3.417913 s. Die 30. Berechnung der Primzahlen mit 950 OpenMP-Thread(s) ist korrekt.
		31. Berechnung: 3.427236 s. Die 31. Berechnung der Primzahlen mit 950 OpenMP-Thread(s) ist korrekt.
		32. Berechnung: 3.339838 s. Die 32. Berechnung der Primzahlen mit 950 OpenMP-Thread(s) ist korrekt.
		33. Berechnung: 3.448069 s. Die 33. Berechnung der Primzahlen mit 950 OpenMP-Thread(s) ist korrekt.
		34. Berechnung: 3.435235 s. Die 34. Berechnung der Primzahlen mit 950 OpenMP-Thread(s) ist korrekt.
		35. Berechnung: 3.344633 s. Die 35. Berechnung der Primzahlen mit 950 OpenMP-Thread(s) ist korrekt.
		36. Berechnung: 3.432314 s. Die 36. Berechnung der Primzahlen mit 950 OpenMP-Thread(s) ist korrekt.
		37. Berechnung: 3.458704 s. Die 37. Berechnung der Primzahlen mit 950 OpenMP-Thread(s) ist korrekt.
		38. Berechnung: 3.340969 s. Die 38. Berechnung der Primzahlen mit 950 OpenMP-Thread(s) ist korrekt.
		39. Berechnung: 3.415375 s. Die 39. Berechnung der Primzahlen mit 950 OpenMP-Thread(s) ist korrekt.
		40. Berechnung: 3.675928 s. Die 40. Berechnung der Primzahlen mit 950 OpenMP-Thread(s) ist korrekt.
		41. Berechnung: 3.415622 s. Die 41. Berechnung der Primzahlen mit 950 OpenMP-Thread(s) ist korrekt.
		42. Berechnung: 3.454152 s. Die 42. Berechnung der Primzahlen mit 950 OpenMP-Thread(s) ist korrekt.
		43. Berechnung: 3.470295 s. Die 43. Berechnung der Primzahlen mit 950 OpenMP-Thread(s) ist korrekt.
		44. Berechnung: 3.344648 s. Die 44. Berechnung der Primzahlen mit 950 OpenMP-Thread(s) ist korrekt.
		45. Berechnung: 3.461998 s. Die 45. Berechnung der Primzahlen mit 950 OpenMP-Thread(s) ist korrekt.
		46. Berechnung: 3.448135 s. Die 46. Berechnung der Primzahlen mit 950 OpenMP-Thread(s) ist korrekt.
		47. Berechnung: 3.351306 s. Die 47. Berechnung der Primzahlen mit 950 OpenMP-Thread(s) ist korrekt.
		48. Berechnung: 3.443805 s. Die 48. Berechnung der Primzahlen mit 950 OpenMP-Thread(s) ist korrekt.
		49. Berechnung: 3.443284 s. Die 49. Berechnung der Primzahlen mit 950 OpenMP-Thread(s) ist korrekt.
		50. Berechnung: 3.342074 s. Die 50. Berechnung der Primzahlen mit 950 OpenMP-Thread(s) ist korrekt.
		Durchschnittliche Ausfuehrungszeit des Programmes bei 50 Durchlaeufen mit 950 OpenMP-Thread(s): 3.411867 s. Alle berechneten Primzahlen mit 950 OpenMP-Thread(s) sind korrekt.
	Berechnung mittels 1000 OpenMP-Thread(s):
		1. Berechnung: 3.422827 s. Die 1. Berechnung der Primzahlen mit 1000 OpenMP-Thread(s) ist korrekt.
		2. Berechnung: 3.446047 s. Die 2. Berechnung der Primzahlen mit 1000 OpenMP-Thread(s) ist korrekt.
		3. Berechnung: 3.344698 s. Die 3. Berechnung der Primzahlen mit 1000 OpenMP-Thread(s) ist korrekt.
		4. Berechnung: 3.424949 s. Die 4. Berechnung der Primzahlen mit 1000 OpenMP-Thread(s) ist korrekt.
		5. Berechnung: 3.352944 s. Die 5. Berechnung der Primzahlen mit 1000 OpenMP-Thread(s) ist korrekt.
		6. Berechnung: 3.483349 s. Die 6. Berechnung der Primzahlen mit 1000 OpenMP-Thread(s) ist korrekt.
		7. Berechnung: 3.473297 s. Die 7. Berechnung der Primzahlen mit 1000 OpenMP-Thread(s) ist korrekt.
		8. Berechnung: 3.352693 s. Die 8. Berechnung der Primzahlen mit 1000 OpenMP-Thread(s) ist korrekt.
		9. Berechnung: 3.442057 s. Die 9. Berechnung der Primzahlen mit 1000 OpenMP-Thread(s) ist korrekt.
		10. Berechnung: 3.428608 s. Die 10. Berechnung der Primzahlen mit 1000 OpenMP-Thread(s) ist korrekt.
		11. Berechnung: 3.343998 s. Die 11. Berechnung der Primzahlen mit 1000 OpenMP-Thread(s) ist korrekt.
		12. Berechnung: 3.429203 s. Die 12. Berechnung der Primzahlen mit 1000 OpenMP-Thread(s) ist korrekt.
		13. Berechnung: 3.430062 s. Die 13. Berechnung der Primzahlen mit 1000 OpenMP-Thread(s) ist korrekt.
		14. Berechnung: 3.358002 s. Die 14. Berechnung der Primzahlen mit 1000 OpenMP-Thread(s) ist korrekt.
		15. Berechnung: 3.431543 s. Die 15. Berechnung der Primzahlen mit 1000 OpenMP-Thread(s) ist korrekt.
		16. Berechnung: 3.436445 s. Die 16. Berechnung der Primzahlen mit 1000 OpenMP-Thread(s) ist korrekt.
		17. Berechnung: 3.341504 s. Die 17. Berechnung der Primzahlen mit 1000 OpenMP-Thread(s) ist korrekt.
		18. Berechnung: 3.437278 s. Die 18. Berechnung der Primzahlen mit 1000 OpenMP-Thread(s) ist korrekt.
		19. Berechnung: 3.430823 s. Die 19. Berechnung der Primzahlen mit 1000 OpenMP-Thread(s) ist korrekt.
		20. Berechnung: 3.342716 s. Die 20. Berechnung der Primzahlen mit 1000 OpenMP-Thread(s) ist korrekt.
		21. Berechnung: 3.438970 s. Die 21. Berechnung der Primzahlen mit 1000 OpenMP-Thread(s) ist korrekt.
		22. Berechnung: 3.457961 s. Die 22. Berechnung der Primzahlen mit 1000 OpenMP-Thread(s) ist korrekt.
		23. Berechnung: 3.354107 s. Die 23. Berechnung der Primzahlen mit 1000 OpenMP-Thread(s) ist korrekt.
		24. Berechnung: 3.447411 s. Die 24. Berechnung der Primzahlen mit 1000 OpenMP-Thread(s) ist korrekt.
		25. Berechnung: 3.423436 s. Die 25. Berechnung der Primzahlen mit 1000 OpenMP-Thread(s) ist korrekt.
		26. Berechnung: 3.354576 s. Die 26. Berechnung der Primzahlen mit 1000 OpenMP-Thread(s) ist korrekt.
		27. Berechnung: 3.444743 s. Die 27. Berechnung der Primzahlen mit 1000 OpenMP-Thread(s) ist korrekt.
		28. Berechnung: 3.372882 s. Die 28. Berechnung der Primzahlen mit 1000 OpenMP-Thread(s) ist korrekt.
		29. Berechnung: 3.427562 s. Die 29. Berechnung der Primzahlen mit 1000 OpenMP-Thread(s) ist korrekt.
		30. Berechnung: 3.428030 s. Die 30. Berechnung der Primzahlen mit 1000 OpenMP-Thread(s) ist korrekt.
		31. Berechnung: 3.385452 s. Die 31. Berechnung der Primzahlen mit 1000 OpenMP-Thread(s) ist korrekt.
		32. Berechnung: 3.448008 s. Die 32. Berechnung der Primzahlen mit 1000 OpenMP-Thread(s) ist korrekt.
		33. Berechnung: 3.434345 s. Die 33. Berechnung der Primzahlen mit 1000 OpenMP-Thread(s) ist korrekt.
		34. Berechnung: 3.336960 s. Die 34. Berechnung der Primzahlen mit 1000 OpenMP-Thread(s) ist korrekt.
		35. Berechnung: 3.442721 s. Die 35. Berechnung der Primzahlen mit 1000 OpenMP-Thread(s) ist korrekt.
		36. Berechnung: 3.433267 s. Die 36. Berechnung der Primzahlen mit 1000 OpenMP-Thread(s) ist korrekt.
		37. Berechnung: 3.377745 s. Die 37. Berechnung der Primzahlen mit 1000 OpenMP-Thread(s) ist korrekt.
		38. Berechnung: 3.422693 s. Die 38. Berechnung der Primzahlen mit 1000 OpenMP-Thread(s) ist korrekt.
		39. Berechnung: 3.437702 s. Die 39. Berechnung der Primzahlen mit 1000 OpenMP-Thread(s) ist korrekt.
		40. Berechnung: 3.367128 s. Die 40. Berechnung der Primzahlen mit 1000 OpenMP-Thread(s) ist korrekt.
		41. Berechnung: 3.421987 s. Die 41. Berechnung der Primzahlen mit 1000 OpenMP-Thread(s) ist korrekt.
		42. Berechnung: 3.445053 s. Die 42. Berechnung der Primzahlen mit 1000 OpenMP-Thread(s) ist korrekt.
		43. Berechnung: 3.344720 s. Die 43. Berechnung der Primzahlen mit 1000 OpenMP-Thread(s) ist korrekt.
		44. Berechnung: 3.431130 s. Die 44. Berechnung der Primzahlen mit 1000 OpenMP-Thread(s) ist korrekt.
		45. Berechnung: 3.435416 s. Die 45. Berechnung der Primzahlen mit 1000 OpenMP-Thread(s) ist korrekt.
		46. Berechnung: 3.341988 s. Die 46. Berechnung der Primzahlen mit 1000 OpenMP-Thread(s) ist korrekt.
		47. Berechnung: 3.446137 s. Die 47. Berechnung der Primzahlen mit 1000 OpenMP-Thread(s) ist korrekt.
		48. Berechnung: 3.426665 s. Die 48. Berechnung der Primzahlen mit 1000 OpenMP-Thread(s) ist korrekt.
		49. Berechnung: 3.364264 s. Die 49. Berechnung der Primzahlen mit 1000 OpenMP-Thread(s) ist korrekt.
		50. Berechnung: 3.439599 s. Die 50. Berechnung der Primzahlen mit 1000 OpenMP-Thread(s) ist korrekt.
		Durchschnittliche Ausfuehrungszeit des Programmes bei 50 Durchlaeufen mit 1000 OpenMP-Thread(s): 3.409714 s. Alle berechneten Primzahlen mit 1000 OpenMP-Thread(s) sind korrekt.
	Berechnung mittels 2000 OpenMP-Thread(s):
		1. Berechnung: 3.400765 s. Die 1. Berechnung der Primzahlen mit 2000 OpenMP-Thread(s) ist korrekt.
		2. Berechnung: 3.472609 s. Die 2. Berechnung der Primzahlen mit 2000 OpenMP-Thread(s) ist korrekt.
		3. Berechnung: 3.438593 s. Die 3. Berechnung der Primzahlen mit 2000 OpenMP-Thread(s) ist korrekt.
		4. Berechnung: 3.370534 s. Die 4. Berechnung der Primzahlen mit 2000 OpenMP-Thread(s) ist korrekt.
		5. Berechnung: 3.447392 s. Die 5. Berechnung der Primzahlen mit 2000 OpenMP-Thread(s) ist korrekt.
		6. Berechnung: 3.447145 s. Die 6. Berechnung der Primzahlen mit 2000 OpenMP-Thread(s) ist korrekt.
		7. Berechnung: 3.362344 s. Die 7. Berechnung der Primzahlen mit 2000 OpenMP-Thread(s) ist korrekt.
		8. Berechnung: 3.474018 s. Die 8. Berechnung der Primzahlen mit 2000 OpenMP-Thread(s) ist korrekt.
		9. Berechnung: 3.449234 s. Die 9. Berechnung der Primzahlen mit 2000 OpenMP-Thread(s) ist korrekt.
		10. Berechnung: 3.354269 s. Die 10. Berechnung der Primzahlen mit 2000 OpenMP-Thread(s) ist korrekt.
		11. Berechnung: 3.426434 s. Die 11. Berechnung der Primzahlen mit 2000 OpenMP-Thread(s) ist korrekt.
		12. Berechnung: 3.445124 s. Die 12. Berechnung der Primzahlen mit 2000 OpenMP-Thread(s) ist korrekt.
		13. Berechnung: 3.353510 s. Die 13. Berechnung der Primzahlen mit 2000 OpenMP-Thread(s) ist korrekt.
		14. Berechnung: 3.445761 s. Die 14. Berechnung der Primzahlen mit 2000 OpenMP-Thread(s) ist korrekt.
		15. Berechnung: 3.434959 s. Die 15. Berechnung der Primzahlen mit 2000 OpenMP-Thread(s) ist korrekt.
		16. Berechnung: 3.354730 s. Die 16. Berechnung der Primzahlen mit 2000 OpenMP-Thread(s) ist korrekt.
		17. Berechnung: 3.435295 s. Die 17. Berechnung der Primzahlen mit 2000 OpenMP-Thread(s) ist korrekt.
		18. Berechnung: 3.449168 s. Die 18. Berechnung der Primzahlen mit 2000 OpenMP-Thread(s) ist korrekt.
		19. Berechnung: 3.340226 s. Die 19. Berechnung der Primzahlen mit 2000 OpenMP-Thread(s) ist korrekt.
		20. Berechnung: 3.442995 s. Die 20. Berechnung der Primzahlen mit 2000 OpenMP-Thread(s) ist korrekt.
		21. Berechnung: 3.429311 s. Die 21. Berechnung der Primzahlen mit 2000 OpenMP-Thread(s) ist korrekt.
		22. Berechnung: 3.363205 s. Die 22. Berechnung der Primzahlen mit 2000 OpenMP-Thread(s) ist korrekt.
		23. Berechnung: 3.451556 s. Die 23. Berechnung der Primzahlen mit 2000 OpenMP-Thread(s) ist korrekt.
		24. Berechnung: 3.364867 s. Die 24. Berechnung der Primzahlen mit 2000 OpenMP-Thread(s) ist korrekt.
		25. Berechnung: 3.434348 s. Die 25. Berechnung der Primzahlen mit 2000 OpenMP-Thread(s) ist korrekt.
		26. Berechnung: 3.442919 s. Die 26. Berechnung der Primzahlen mit 2000 OpenMP-Thread(s) ist korrekt.
		27. Berechnung: 3.337152 s. Die 27. Berechnung der Primzahlen mit 2000 OpenMP-Thread(s) ist korrekt.
		28. Berechnung: 3.472862 s. Die 28. Berechnung der Primzahlen mit 2000 OpenMP-Thread(s) ist korrekt.
		29. Berechnung: 3.453609 s. Die 29. Berechnung der Primzahlen mit 2000 OpenMP-Thread(s) ist korrekt.
		30. Berechnung: 3.387974 s. Die 30. Berechnung der Primzahlen mit 2000 OpenMP-Thread(s) ist korrekt.
		31. Berechnung: 3.442793 s. Die 31. Berechnung der Primzahlen mit 2000 OpenMP-Thread(s) ist korrekt.
		32. Berechnung: 3.446342 s. Die 32. Berechnung der Primzahlen mit 2000 OpenMP-Thread(s) ist korrekt.
		33. Berechnung: 3.375545 s. Die 33. Berechnung der Primzahlen mit 2000 OpenMP-Thread(s) ist korrekt.
		34. Berechnung: 3.455720 s. Die 34. Berechnung der Primzahlen mit 2000 OpenMP-Thread(s) ist korrekt.
		35. Berechnung: 3.427248 s. Die 35. Berechnung der Primzahlen mit 2000 OpenMP-Thread(s) ist korrekt.
		36. Berechnung: 3.354320 s. Die 36. Berechnung der Primzahlen mit 2000 OpenMP-Thread(s) ist korrekt.
		37. Berechnung: 3.448649 s. Die 37. Berechnung der Primzahlen mit 2000 OpenMP-Thread(s) ist korrekt.
		38. Berechnung: 3.436941 s. Die 38. Berechnung der Primzahlen mit 2000 OpenMP-Thread(s) ist korrekt.
		39. Berechnung: 3.361652 s. Die 39. Berechnung der Primzahlen mit 2000 OpenMP-Thread(s) ist korrekt.
		40. Berechnung: 3.432041 s. Die 40. Berechnung der Primzahlen mit 2000 OpenMP-Thread(s) ist korrekt.
		41. Berechnung: 3.443831 s. Die 41. Berechnung der Primzahlen mit 2000 OpenMP-Thread(s) ist korrekt.
		42. Berechnung: 3.349629 s. Die 42. Berechnung der Primzahlen mit 2000 OpenMP-Thread(s) ist korrekt.
		43. Berechnung: 3.460286 s. Die 43. Berechnung der Primzahlen mit 2000 OpenMP-Thread(s) ist korrekt.
		44. Berechnung: 3.445666 s. Die 44. Berechnung der Primzahlen mit 2000 OpenMP-Thread(s) ist korrekt.
		45. Berechnung: 3.461696 s. Die 45. Berechnung der Primzahlen mit 2000 OpenMP-Thread(s) ist korrekt.
		46. Berechnung: 3.452261 s. Die 46. Berechnung der Primzahlen mit 2000 OpenMP-Thread(s) ist korrekt.
		47. Berechnung: 3.427501 s. Die 47. Berechnung der Primzahlen mit 2000 OpenMP-Thread(s) ist korrekt.
		48. Berechnung: 3.353849 s. Die 48. Berechnung der Primzahlen mit 2000 OpenMP-Thread(s) ist korrekt.
		49. Berechnung: 3.440391 s. Die 49. Berechnung der Primzahlen mit 2000 OpenMP-Thread(s) ist korrekt.
		50. Berechnung: 3.351238 s. Die 50. Berechnung der Primzahlen mit 2000 OpenMP-Thread(s) ist korrekt.
		Durchschnittliche Ausfuehrungszeit des Programmes bei 50 Durchlaeufen mit 2000 OpenMP-Thread(s): 3.417010 s. Alle berechneten Primzahlen mit 2000 OpenMP-Thread(s) sind korrekt.
	Berechnung mittels 3000 OpenMP-Thread(s):
		1. Berechnung: 3.487657 s. Die 1. Berechnung der Primzahlen mit 3000 OpenMP-Thread(s) ist korrekt.
		2. Berechnung: 3.488303 s. Die 2. Berechnung der Primzahlen mit 3000 OpenMP-Thread(s) ist korrekt.
		3. Berechnung: 3.358095 s. Die 3. Berechnung der Primzahlen mit 3000 OpenMP-Thread(s) ist korrekt.
		4. Berechnung: 3.436639 s. Die 4. Berechnung der Primzahlen mit 3000 OpenMP-Thread(s) ist korrekt.
		5. Berechnung: 3.436430 s. Die 5. Berechnung der Primzahlen mit 3000 OpenMP-Thread(s) ist korrekt.
		6. Berechnung: 3.362622 s. Die 6. Berechnung der Primzahlen mit 3000 OpenMP-Thread(s) ist korrekt.
		7. Berechnung: 3.435789 s. Die 7. Berechnung der Primzahlen mit 3000 OpenMP-Thread(s) ist korrekt.
		8. Berechnung: 3.452559 s. Die 8. Berechnung der Primzahlen mit 3000 OpenMP-Thread(s) ist korrekt.
		9. Berechnung: 3.361852 s. Die 9. Berechnung der Primzahlen mit 3000 OpenMP-Thread(s) ist korrekt.
		10. Berechnung: 3.455739 s. Die 10. Berechnung der Primzahlen mit 3000 OpenMP-Thread(s) ist korrekt.
		11. Berechnung: 3.456277 s. Die 11. Berechnung der Primzahlen mit 3000 OpenMP-Thread(s) ist korrekt.
		12. Berechnung: 3.360321 s. Die 12. Berechnung der Primzahlen mit 3000 OpenMP-Thread(s) ist korrekt.
		13. Berechnung: 3.447107 s. Die 13. Berechnung der Primzahlen mit 3000 OpenMP-Thread(s) ist korrekt.
		14. Berechnung: 3.441425 s. Die 14. Berechnung der Primzahlen mit 3000 OpenMP-Thread(s) ist korrekt.
		15. Berechnung: 3.382058 s. Die 15. Berechnung der Primzahlen mit 3000 OpenMP-Thread(s) ist korrekt.
		16. Berechnung: 3.435979 s. Die 16. Berechnung der Primzahlen mit 3000 OpenMP-Thread(s) ist korrekt.
		17. Berechnung: 3.429062 s. Die 17. Berechnung der Primzahlen mit 3000 OpenMP-Thread(s) ist korrekt.
		18. Berechnung: 3.369557 s. Die 18. Berechnung der Primzahlen mit 3000 OpenMP-Thread(s) ist korrekt.
		19. Berechnung: 3.479549 s. Die 19. Berechnung der Primzahlen mit 3000 OpenMP-Thread(s) ist korrekt.
		20. Berechnung: 3.457087 s. Die 20. Berechnung der Primzahlen mit 3000 OpenMP-Thread(s) ist korrekt.
		21. Berechnung: 3.359074 s. Die 21. Berechnung der Primzahlen mit 3000 OpenMP-Thread(s) ist korrekt.
		22. Berechnung: 3.461928 s. Die 22. Berechnung der Primzahlen mit 3000 OpenMP-Thread(s) ist korrekt.
		23. Berechnung: 3.497913 s. Die 23. Berechnung der Primzahlen mit 3000 OpenMP-Thread(s) ist korrekt.
		24. Berechnung: 3.403879 s. Die 24. Berechnung der Primzahlen mit 3000 OpenMP-Thread(s) ist korrekt.
		25. Berechnung: 3.443759 s. Die 25. Berechnung der Primzahlen mit 3000 OpenMP-Thread(s) ist korrekt.
		26. Berechnung: 3.406506 s. Die 26. Berechnung der Primzahlen mit 3000 OpenMP-Thread(s) ist korrekt.
		27. Berechnung: 3.385089 s. Die 27. Berechnung der Primzahlen mit 3000 OpenMP-Thread(s) ist korrekt.
		28. Berechnung: 3.465173 s. Die 28. Berechnung der Primzahlen mit 3000 OpenMP-Thread(s) ist korrekt.
		29. Berechnung: 3.386176 s. Die 29. Berechnung der Primzahlen mit 3000 OpenMP-Thread(s) ist korrekt.
		30. Berechnung: 3.454535 s. Die 30. Berechnung der Primzahlen mit 3000 OpenMP-Thread(s) ist korrekt.
		31. Berechnung: 3.442993 s. Die 31. Berechnung der Primzahlen mit 3000 OpenMP-Thread(s) ist korrekt.
		32. Berechnung: 3.378067 s. Die 32. Berechnung der Primzahlen mit 3000 OpenMP-Thread(s) ist korrekt.
		33. Berechnung: 3.446980 s. Die 33. Berechnung der Primzahlen mit 3000 OpenMP-Thread(s) ist korrekt.
		34. Berechnung: 3.450957 s. Die 34. Berechnung der Primzahlen mit 3000 OpenMP-Thread(s) ist korrekt.
		35. Berechnung: 3.368334 s. Die 35. Berechnung der Primzahlen mit 3000 OpenMP-Thread(s) ist korrekt.
		36. Berechnung: 3.463534 s. Die 36. Berechnung der Primzahlen mit 3000 OpenMP-Thread(s) ist korrekt.
		37. Berechnung: 3.456554 s. Die 37. Berechnung der Primzahlen mit 3000 OpenMP-Thread(s) ist korrekt.
		38. Berechnung: 3.368336 s. Die 38. Berechnung der Primzahlen mit 3000 OpenMP-Thread(s) ist korrekt.
		39. Berechnung: 3.460450 s. Die 39. Berechnung der Primzahlen mit 3000 OpenMP-Thread(s) ist korrekt.
		40. Berechnung: 3.444360 s. Die 40. Berechnung der Primzahlen mit 3000 OpenMP-Thread(s) ist korrekt.
		41. Berechnung: 3.359766 s. Die 41. Berechnung der Primzahlen mit 3000 OpenMP-Thread(s) ist korrekt.
		42. Berechnung: 3.445188 s. Die 42. Berechnung der Primzahlen mit 3000 OpenMP-Thread(s) ist korrekt.
		43. Berechnung: 3.458709 s. Die 43. Berechnung der Primzahlen mit 3000 OpenMP-Thread(s) ist korrekt.
		44. Berechnung: 3.368568 s. Die 44. Berechnung der Primzahlen mit 3000 OpenMP-Thread(s) ist korrekt.
		45. Berechnung: 3.432702 s. Die 45. Berechnung der Primzahlen mit 3000 OpenMP-Thread(s) ist korrekt.
		46. Berechnung: 3.813955 s. Die 46. Berechnung der Primzahlen mit 3000 OpenMP-Thread(s) ist korrekt.
		47. Berechnung: 3.387658 s. Die 47. Berechnung der Primzahlen mit 3000 OpenMP-Thread(s) ist korrekt.
		48. Berechnung: 3.474919 s. Die 48. Berechnung der Primzahlen mit 3000 OpenMP-Thread(s) ist korrekt.
		49. Berechnung: 3.452723 s. Die 49. Berechnung der Primzahlen mit 3000 OpenMP-Thread(s) ist korrekt.
		50. Berechnung: 3.414880 s. Die 50. Berechnung der Primzahlen mit 3000 OpenMP-Thread(s) ist korrekt.
		Durchschnittliche Ausfuehrungszeit des Programmes bei 50 Durchlaeufen mit 3000 OpenMP-Thread(s): 3.433755 s. Alle berechneten Primzahlen mit 3000 OpenMP-Thread(s) sind korrekt.
	Berechnung mittels 4000 OpenMP-Thread(s):
		1. Berechnung: 3.539843 s. Die 1. Berechnung der Primzahlen mit 4000 OpenMP-Thread(s) ist korrekt.
		2. Berechnung: 3.477877 s. Die 2. Berechnung der Primzahlen mit 4000 OpenMP-Thread(s) ist korrekt.
		3. Berechnung: 3.348272 s. Die 3. Berechnung der Primzahlen mit 4000 OpenMP-Thread(s) ist korrekt.
		4. Berechnung: 3.493832 s. Die 4. Berechnung der Primzahlen mit 4000 OpenMP-Thread(s) ist korrekt.
		5. Berechnung: 3.467661 s. Die 5. Berechnung der Primzahlen mit 4000 OpenMP-Thread(s) ist korrekt.
		6. Berechnung: 3.411803 s. Die 6. Berechnung der Primzahlen mit 4000 OpenMP-Thread(s) ist korrekt.
		7. Berechnung: 3.462580 s. Die 7. Berechnung der Primzahlen mit 4000 OpenMP-Thread(s) ist korrekt.
		8. Berechnung: 3.474245 s. Die 8. Berechnung der Primzahlen mit 4000 OpenMP-Thread(s) ist korrekt.
		9. Berechnung: 3.381078 s. Die 9. Berechnung der Primzahlen mit 4000 OpenMP-Thread(s) ist korrekt.
		10. Berechnung: 3.473117 s. Die 10. Berechnung der Primzahlen mit 4000 OpenMP-Thread(s) ist korrekt.
		11. Berechnung: 3.444504 s. Die 11. Berechnung der Primzahlen mit 4000 OpenMP-Thread(s) ist korrekt.
		12. Berechnung: 3.368005 s. Die 12. Berechnung der Primzahlen mit 4000 OpenMP-Thread(s) ist korrekt.
		13. Berechnung: 3.484184 s. Die 13. Berechnung der Primzahlen mit 4000 OpenMP-Thread(s) ist korrekt.
		14. Berechnung: 3.421603 s. Die 14. Berechnung der Primzahlen mit 4000 OpenMP-Thread(s) ist korrekt.
		15. Berechnung: 3.398228 s. Die 15. Berechnung der Primzahlen mit 4000 OpenMP-Thread(s) ist korrekt.
		16. Berechnung: 3.463643 s. Die 16. Berechnung der Primzahlen mit 4000 OpenMP-Thread(s) ist korrekt.
		17. Berechnung: 3.374183 s. Die 17. Berechnung der Primzahlen mit 4000 OpenMP-Thread(s) ist korrekt.
		18. Berechnung: 3.479819 s. Die 18. Berechnung der Primzahlen mit 4000 OpenMP-Thread(s) ist korrekt.
		19. Berechnung: 3.445873 s. Die 19. Berechnung der Primzahlen mit 4000 OpenMP-Thread(s) ist korrekt.
		20. Berechnung: 3.367630 s. Die 20. Berechnung der Primzahlen mit 4000 OpenMP-Thread(s) ist korrekt.
		21. Berechnung: 3.459943 s. Die 21. Berechnung der Primzahlen mit 4000 OpenMP-Thread(s) ist korrekt.
		22. Berechnung: 3.475198 s. Die 22. Berechnung der Primzahlen mit 4000 OpenMP-Thread(s) ist korrekt.
		23. Berechnung: 3.366221 s. Die 23. Berechnung der Primzahlen mit 4000 OpenMP-Thread(s) ist korrekt.
		24. Berechnung: 3.470816 s. Die 24. Berechnung der Primzahlen mit 4000 OpenMP-Thread(s) ist korrekt.
		25. Berechnung: 3.461769 s. Die 25. Berechnung der Primzahlen mit 4000 OpenMP-Thread(s) ist korrekt.
		26. Berechnung: 3.365022 s. Die 26. Berechnung der Primzahlen mit 4000 OpenMP-Thread(s) ist korrekt.
		27. Berechnung: 3.458024 s. Die 27. Berechnung der Primzahlen mit 4000 OpenMP-Thread(s) ist korrekt.
		28. Berechnung: 3.447343 s. Die 28. Berechnung der Primzahlen mit 4000 OpenMP-Thread(s) ist korrekt.
		29. Berechnung: 3.387241 s. Die 29. Berechnung der Primzahlen mit 4000 OpenMP-Thread(s) ist korrekt.
		30. Berechnung: 3.456747 s. Die 30. Berechnung der Primzahlen mit 4000 OpenMP-Thread(s) ist korrekt.
		31. Berechnung: 3.499215 s. Die 31. Berechnung der Primzahlen mit 4000 OpenMP-Thread(s) ist korrekt.
		32. Berechnung: 3.381915 s. Die 32. Berechnung der Primzahlen mit 4000 OpenMP-Thread(s) ist korrekt.
		33. Berechnung: 3.458143 s. Die 33. Berechnung der Primzahlen mit 4000 OpenMP-Thread(s) ist korrekt.
		34. Berechnung: 3.464152 s. Die 34. Berechnung der Primzahlen mit 4000 OpenMP-Thread(s) ist korrekt.
		35. Berechnung: 3.355626 s. Die 35. Berechnung der Primzahlen mit 4000 OpenMP-Thread(s) ist korrekt.
		36. Berechnung: 3.459406 s. Die 36. Berechnung der Primzahlen mit 4000 OpenMP-Thread(s) ist korrekt.
		37. Berechnung: 3.468259 s. Die 37. Berechnung der Primzahlen mit 4000 OpenMP-Thread(s) ist korrekt.
		38. Berechnung: 3.378055 s. Die 38. Berechnung der Primzahlen mit 4000 OpenMP-Thread(s) ist korrekt.
		39. Berechnung: 3.464521 s. Die 39. Berechnung der Primzahlen mit 4000 OpenMP-Thread(s) ist korrekt.
		40. Berechnung: 3.496686 s. Die 40. Berechnung der Primzahlen mit 4000 OpenMP-Thread(s) ist korrekt.
		41. Berechnung: 3.372044 s. Die 41. Berechnung der Primzahlen mit 4000 OpenMP-Thread(s) ist korrekt.
		42. Berechnung: 3.472747 s. Die 42. Berechnung der Primzahlen mit 4000 OpenMP-Thread(s) ist korrekt.
		43. Berechnung: 3.451649 s. Die 43. Berechnung der Primzahlen mit 4000 OpenMP-Thread(s) ist korrekt.
		44. Berechnung: 3.390324 s. Die 44. Berechnung der Primzahlen mit 4000 OpenMP-Thread(s) ist korrekt.
		45. Berechnung: 3.468185 s. Die 45. Berechnung der Primzahlen mit 4000 OpenMP-Thread(s) ist korrekt.
		46. Berechnung: 3.398047 s. Die 46. Berechnung der Primzahlen mit 4000 OpenMP-Thread(s) ist korrekt.
		47. Berechnung: 3.446975 s. Die 47. Berechnung der Primzahlen mit 4000 OpenMP-Thread(s) ist korrekt.
		48. Berechnung: 3.482706 s. Die 48. Berechnung der Primzahlen mit 4000 OpenMP-Thread(s) ist korrekt.
		49. Berechnung: 3.373384 s. Die 49. Berechnung der Primzahlen mit 4000 OpenMP-Thread(s) ist korrekt.
		50. Berechnung: 3.460170 s. Die 50. Berechnung der Primzahlen mit 4000 OpenMP-Thread(s) ist korrekt.
		Durchschnittliche Ausfuehrungszeit des Programmes bei 50 Durchlaeufen mit 4000 OpenMP-Thread(s): 3.437370 s. Alle berechneten Primzahlen mit 4000 OpenMP-Thread(s) sind korrekt.
	Berechnung mittels 5000 OpenMP-Thread(s):
		1. Berechnung: 3.506791 s. Die 1. Berechnung der Primzahlen mit 5000 OpenMP-Thread(s) ist korrekt.
		2. Berechnung: 3.379795 s. Die 2. Berechnung der Primzahlen mit 5000 OpenMP-Thread(s) ist korrekt.
		3. Berechnung: 3.467618 s. Die 3. Berechnung der Primzahlen mit 5000 OpenMP-Thread(s) ist korrekt.
		4. Berechnung: 3.483873 s. Die 4. Berechnung der Primzahlen mit 5000 OpenMP-Thread(s) ist korrekt.
		5. Berechnung: 3.377080 s. Die 5. Berechnung der Primzahlen mit 5000 OpenMP-Thread(s) ist korrekt.
		6. Berechnung: 3.494873 s. Die 6. Berechnung der Primzahlen mit 5000 OpenMP-Thread(s) ist korrekt.
		7. Berechnung: 3.501029 s. Die 7. Berechnung der Primzahlen mit 5000 OpenMP-Thread(s) ist korrekt.
		8. Berechnung: 3.396560 s. Die 8. Berechnung der Primzahlen mit 5000 OpenMP-Thread(s) ist korrekt.
		9. Berechnung: 3.465855 s. Die 9. Berechnung der Primzahlen mit 5000 OpenMP-Thread(s) ist korrekt.
		10. Berechnung: 3.469401 s. Die 10. Berechnung der Primzahlen mit 5000 OpenMP-Thread(s) ist korrekt.
		11. Berechnung: 3.423579 s. Die 11. Berechnung der Primzahlen mit 5000 OpenMP-Thread(s) ist korrekt.
		12. Berechnung: 3.466727 s. Die 12. Berechnung der Primzahlen mit 5000 OpenMP-Thread(s) ist korrekt.
		13. Berechnung: 3.469599 s. Die 13. Berechnung der Primzahlen mit 5000 OpenMP-Thread(s) ist korrekt.
		14. Berechnung: 3.403278 s. Die 14. Berechnung der Primzahlen mit 5000 OpenMP-Thread(s) ist korrekt.
		15. Berechnung: 3.481714 s. Die 15. Berechnung der Primzahlen mit 5000 OpenMP-Thread(s) ist korrekt.
		16. Berechnung: 3.463989 s. Die 16. Berechnung der Primzahlen mit 5000 OpenMP-Thread(s) ist korrekt.
		17. Berechnung: 3.371545 s. Die 17. Berechnung der Primzahlen mit 5000 OpenMP-Thread(s) ist korrekt.
		18. Berechnung: 3.474422 s. Die 18. Berechnung der Primzahlen mit 5000 OpenMP-Thread(s) ist korrekt.
		19. Berechnung: 3.478471 s. Die 19. Berechnung der Primzahlen mit 5000 OpenMP-Thread(s) ist korrekt.
		20. Berechnung: 3.390870 s. Die 20. Berechnung der Primzahlen mit 5000 OpenMP-Thread(s) ist korrekt.
		21. Berechnung: 3.453065 s. Die 21. Berechnung der Primzahlen mit 5000 OpenMP-Thread(s) ist korrekt.
		22. Berechnung: 3.472319 s. Die 22. Berechnung der Primzahlen mit 5000 OpenMP-Thread(s) ist korrekt.
		23. Berechnung: 3.375492 s. Die 23. Berechnung der Primzahlen mit 5000 OpenMP-Thread(s) ist korrekt.
		24. Berechnung: 3.490384 s. Die 24. Berechnung der Primzahlen mit 5000 OpenMP-Thread(s) ist korrekt.
		25. Berechnung: 3.461337 s. Die 25. Berechnung der Primzahlen mit 5000 OpenMP-Thread(s) ist korrekt.
		26. Berechnung: 3.390201 s. Die 26. Berechnung der Primzahlen mit 5000 OpenMP-Thread(s) ist korrekt.
		27. Berechnung: 3.474377 s. Die 27. Berechnung der Primzahlen mit 5000 OpenMP-Thread(s) ist korrekt.
		28. Berechnung: 3.466020 s. Die 28. Berechnung der Primzahlen mit 5000 OpenMP-Thread(s) ist korrekt.
		29. Berechnung: 3.362265 s. Die 29. Berechnung der Primzahlen mit 5000 OpenMP-Thread(s) ist korrekt.
		30. Berechnung: 3.492407 s. Die 30. Berechnung der Primzahlen mit 5000 OpenMP-Thread(s) ist korrekt.
		31. Berechnung: 3.476449 s. Die 31. Berechnung der Primzahlen mit 5000 OpenMP-Thread(s) ist korrekt.
		32. Berechnung: 3.384215 s. Die 32. Berechnung der Primzahlen mit 5000 OpenMP-Thread(s) ist korrekt.
		33. Berechnung: 3.473242 s. Die 33. Berechnung der Primzahlen mit 5000 OpenMP-Thread(s) ist korrekt.
		34. Berechnung: 3.463074 s. Die 34. Berechnung der Primzahlen mit 5000 OpenMP-Thread(s) ist korrekt.
		35. Berechnung: 3.395599 s. Die 35. Berechnung der Primzahlen mit 5000 OpenMP-Thread(s) ist korrekt.
		36. Berechnung: 3.477433 s. Die 36. Berechnung der Primzahlen mit 5000 OpenMP-Thread(s) ist korrekt.
		37. Berechnung: 3.393507 s. Die 37. Berechnung der Primzahlen mit 5000 OpenMP-Thread(s) ist korrekt.
		38. Berechnung: 3.427035 s. Die 38. Berechnung der Primzahlen mit 5000 OpenMP-Thread(s) ist korrekt.
		39. Berechnung: 3.474302 s. Die 39. Berechnung der Primzahlen mit 5000 OpenMP-Thread(s) ist korrekt.
		40. Berechnung: 3.394719 s. Die 40. Berechnung der Primzahlen mit 5000 OpenMP-Thread(s) ist korrekt.
		41. Berechnung: 3.455868 s. Die 41. Berechnung der Primzahlen mit 5000 OpenMP-Thread(s) ist korrekt.
		42. Berechnung: 3.491081 s. Die 42. Berechnung der Primzahlen mit 5000 OpenMP-Thread(s) ist korrekt.
		43. Berechnung: 3.373353 s. Die 43. Berechnung der Primzahlen mit 5000 OpenMP-Thread(s) ist korrekt.
		44. Berechnung: 3.496038 s. Die 44. Berechnung der Primzahlen mit 5000 OpenMP-Thread(s) ist korrekt.
		45. Berechnung: 3.464526 s. Die 45. Berechnung der Primzahlen mit 5000 OpenMP-Thread(s) ist korrekt.
		46. Berechnung: 3.381991 s. Die 46. Berechnung der Primzahlen mit 5000 OpenMP-Thread(s) ist korrekt.
		47. Berechnung: 3.467519 s. Die 47. Berechnung der Primzahlen mit 5000 OpenMP-Thread(s) ist korrekt.
		48. Berechnung: 3.469777 s. Die 48. Berechnung der Primzahlen mit 5000 OpenMP-Thread(s) ist korrekt.
		49. Berechnung: 3.381409 s. Die 49. Berechnung der Primzahlen mit 5000 OpenMP-Thread(s) ist korrekt.
		50. Berechnung: 3.487240 s. Die 50. Berechnung der Primzahlen mit 5000 OpenMP-Thread(s) ist korrekt.
		Durchschnittliche Ausfuehrungszeit des Programmes bei 50 Durchlaeufen mit 5000 OpenMP-Thread(s): 3.444666 s. Alle berechneten Primzahlen mit 5000 OpenMP-Thread(s) sind korrekt.
	Berechnung mittels 6000 OpenMP-Thread(s):
		1. Berechnung: 3.800816 s. Die 1. Berechnung der Primzahlen mit 6000 OpenMP-Thread(s) ist korrekt.
		2. Berechnung: 3.618289 s. Die 2. Berechnung der Primzahlen mit 6000 OpenMP-Thread(s) ist korrekt.
		3. Berechnung: 4.073814 s. Die 3. Berechnung der Primzahlen mit 6000 OpenMP-Thread(s) ist korrekt.
		4. Berechnung: 4.306127 s. Die 4. Berechnung der Primzahlen mit 6000 OpenMP-Thread(s) ist korrekt.
		5. Berechnung: 4.233181 s. Die 5. Berechnung der Primzahlen mit 6000 OpenMP-Thread(s) ist korrekt.
		6. Berechnung: 3.867410 s. Die 6. Berechnung der Primzahlen mit 6000 OpenMP-Thread(s) ist korrekt.
		7. Berechnung: 3.432931 s. Die 7. Berechnung der Primzahlen mit 6000 OpenMP-Thread(s) ist korrekt.
		8. Berechnung: 3.526432 s. Die 8. Berechnung der Primzahlen mit 6000 OpenMP-Thread(s) ist korrekt.
		9. Berechnung: 3.496455 s. Die 9. Berechnung der Primzahlen mit 6000 OpenMP-Thread(s) ist korrekt.
		10. Berechnung: 3.395575 s. Die 10. Berechnung der Primzahlen mit 6000 OpenMP-Thread(s) ist korrekt.
		11. Berechnung: 3.479034 s. Die 11. Berechnung der Primzahlen mit 6000 OpenMP-Thread(s) ist korrekt.
		12. Berechnung: 3.489980 s. Die 12. Berechnung der Primzahlen mit 6000 OpenMP-Thread(s) ist korrekt.
		13. Berechnung: 3.393446 s. Die 13. Berechnung der Primzahlen mit 6000 OpenMP-Thread(s) ist korrekt.
		14. Berechnung: 3.484810 s. Die 14. Berechnung der Primzahlen mit 6000 OpenMP-Thread(s) ist korrekt.
		15. Berechnung: 3.491318 s. Die 15. Berechnung der Primzahlen mit 6000 OpenMP-Thread(s) ist korrekt.
		16. Berechnung: 3.379497 s. Die 16. Berechnung der Primzahlen mit 6000 OpenMP-Thread(s) ist korrekt.
		17. Berechnung: 3.517112 s. Die 17. Berechnung der Primzahlen mit 6000 OpenMP-Thread(s) ist korrekt.
		18. Berechnung: 3.605356 s. Die 18. Berechnung der Primzahlen mit 6000 OpenMP-Thread(s) ist korrekt.
		19. Berechnung: 3.399425 s. Die 19. Berechnung der Primzahlen mit 6000 OpenMP-Thread(s) ist korrekt.
		20. Berechnung: 3.527792 s. Die 20. Berechnung der Primzahlen mit 6000 OpenMP-Thread(s) ist korrekt.
		21. Berechnung: 3.473318 s. Die 21. Berechnung der Primzahlen mit 6000 OpenMP-Thread(s) ist korrekt.
		22. Berechnung: 3.395568 s. Die 22. Berechnung der Primzahlen mit 6000 OpenMP-Thread(s) ist korrekt.
		23. Berechnung: 3.498463 s. Die 23. Berechnung der Primzahlen mit 6000 OpenMP-Thread(s) ist korrekt.
		24. Berechnung: 3.466991 s. Die 24. Berechnung der Primzahlen mit 6000 OpenMP-Thread(s) ist korrekt.
		25. Berechnung: 3.386313 s. Die 25. Berechnung der Primzahlen mit 6000 OpenMP-Thread(s) ist korrekt.
		26. Berechnung: 3.488871 s. Die 26. Berechnung der Primzahlen mit 6000 OpenMP-Thread(s) ist korrekt.
		27. Berechnung: 3.451321 s. Die 27. Berechnung der Primzahlen mit 6000 OpenMP-Thread(s) ist korrekt.
		28. Berechnung: 3.405601 s. Die 28. Berechnung der Primzahlen mit 6000 OpenMP-Thread(s) ist korrekt.
		29. Berechnung: 3.482286 s. Die 29. Berechnung der Primzahlen mit 6000 OpenMP-Thread(s) ist korrekt.
		30. Berechnung: 3.398524 s. Die 30. Berechnung der Primzahlen mit 6000 OpenMP-Thread(s) ist korrekt.
		31. Berechnung: 3.489508 s. Die 31. Berechnung der Primzahlen mit 6000 OpenMP-Thread(s) ist korrekt.
		32. Berechnung: 3.485277 s. Die 32. Berechnung der Primzahlen mit 6000 OpenMP-Thread(s) ist korrekt.
		33. Berechnung: 3.381472 s. Die 33. Berechnung der Primzahlen mit 6000 OpenMP-Thread(s) ist korrekt.
		34. Berechnung: 3.488958 s. Die 34. Berechnung der Primzahlen mit 6000 OpenMP-Thread(s) ist korrekt.
		35. Berechnung: 3.484153 s. Die 35. Berechnung der Primzahlen mit 6000 OpenMP-Thread(s) ist korrekt.
		36. Berechnung: 3.410897 s. Die 36. Berechnung der Primzahlen mit 6000 OpenMP-Thread(s) ist korrekt.
		37. Berechnung: 3.481289 s. Die 37. Berechnung der Primzahlen mit 6000 OpenMP-Thread(s) ist korrekt.
		38. Berechnung: 3.479185 s. Die 38. Berechnung der Primzahlen mit 6000 OpenMP-Thread(s) ist korrekt.
		39. Berechnung: 3.406093 s. Die 39. Berechnung der Primzahlen mit 6000 OpenMP-Thread(s) ist korrekt.
		40. Berechnung: 3.569408 s. Die 40. Berechnung der Primzahlen mit 6000 OpenMP-Thread(s) ist korrekt.
		41. Berechnung: 3.470269 s. Die 41. Berechnung der Primzahlen mit 6000 OpenMP-Thread(s) ist korrekt.
		42. Berechnung: 3.408090 s. Die 42. Berechnung der Primzahlen mit 6000 OpenMP-Thread(s) ist korrekt.
		43. Berechnung: 3.504178 s. Die 43. Berechnung der Primzahlen mit 6000 OpenMP-Thread(s) ist korrekt.
		44. Berechnung: 3.481094 s. Die 44. Berechnung der Primzahlen mit 6000 OpenMP-Thread(s) ist korrekt.
		45. Berechnung: 3.393529 s. Die 45. Berechnung der Primzahlen mit 6000 OpenMP-Thread(s) ist korrekt.
		46. Berechnung: 3.478107 s. Die 46. Berechnung der Primzahlen mit 6000 OpenMP-Thread(s) ist korrekt.
		47. Berechnung: 3.513740 s. Die 47. Berechnung der Primzahlen mit 6000 OpenMP-Thread(s) ist korrekt.
		48. Berechnung: 3.366200 s. Die 48. Berechnung der Primzahlen mit 6000 OpenMP-Thread(s) ist korrekt.
		49. Berechnung: 3.474093 s. Die 49. Berechnung der Primzahlen mit 6000 OpenMP-Thread(s) ist korrekt.
		50. Berechnung: 3.503040 s. Die 50. Berechnung der Primzahlen mit 6000 OpenMP-Thread(s) ist korrekt.
		Durchschnittliche Ausfuehrungszeit des Programmes bei 50 Durchlaeufen mit 6000 OpenMP-Thread(s): 3.524693 s. Alle berechneten Primzahlen mit 6000 OpenMP-Thread(s) sind korrekt.
	Berechnung mittels 7000 OpenMP-Thread(s):
		1. Berechnung: 3.801458 s. Die 1. Berechnung der Primzahlen mit 7000 OpenMP-Thread(s) ist korrekt.
		2. Berechnung: 3.509031 s. Die 2. Berechnung der Primzahlen mit 7000 OpenMP-Thread(s) ist korrekt.
		3. Berechnung: 3.494307 s. Die 3. Berechnung der Primzahlen mit 7000 OpenMP-Thread(s) ist korrekt.
		4. Berechnung: 3.399345 s. Die 4. Berechnung der Primzahlen mit 7000 OpenMP-Thread(s) ist korrekt.
		5. Berechnung: 3.515830 s. Die 5. Berechnung der Primzahlen mit 7000 OpenMP-Thread(s) ist korrekt.
		6. Berechnung: 3.468849 s. Die 6. Berechnung der Primzahlen mit 7000 OpenMP-Thread(s) ist korrekt.
		7. Berechnung: 3.415158 s. Die 7. Berechnung der Primzahlen mit 7000 OpenMP-Thread(s) ist korrekt.
		8. Berechnung: 3.478994 s. Die 8. Berechnung der Primzahlen mit 7000 OpenMP-Thread(s) ist korrekt.
		9. Berechnung: 3.494322 s. Die 9. Berechnung der Primzahlen mit 7000 OpenMP-Thread(s) ist korrekt.
		10. Berechnung: 3.434429 s. Die 10. Berechnung der Primzahlen mit 7000 OpenMP-Thread(s) ist korrekt.
		11. Berechnung: 3.502432 s. Die 11. Berechnung der Primzahlen mit 7000 OpenMP-Thread(s) ist korrekt.
		12. Berechnung: 3.515538 s. Die 12. Berechnung der Primzahlen mit 7000 OpenMP-Thread(s) ist korrekt.
		13. Berechnung: 3.401996 s. Die 13. Berechnung der Primzahlen mit 7000 OpenMP-Thread(s) ist korrekt.
		14. Berechnung: 3.474462 s. Die 14. Berechnung der Primzahlen mit 7000 OpenMP-Thread(s) ist korrekt.
		15. Berechnung: 3.478196 s. Die 15. Berechnung der Primzahlen mit 7000 OpenMP-Thread(s) ist korrekt.
		16. Berechnung: 3.409299 s. Die 16. Berechnung der Primzahlen mit 7000 OpenMP-Thread(s) ist korrekt.
		17. Berechnung: 3.486009 s. Die 17. Berechnung der Primzahlen mit 7000 OpenMP-Thread(s) ist korrekt.
		18. Berechnung: 3.483507 s. Die 18. Berechnung der Primzahlen mit 7000 OpenMP-Thread(s) ist korrekt.
		19. Berechnung: 3.423515 s. Die 19. Berechnung der Primzahlen mit 7000 OpenMP-Thread(s) ist korrekt.
		20. Berechnung: 3.494158 s. Die 20. Berechnung der Primzahlen mit 7000 OpenMP-Thread(s) ist korrekt.
		21. Berechnung: 3.478563 s. Die 21. Berechnung der Primzahlen mit 7000 OpenMP-Thread(s) ist korrekt.
		22. Berechnung: 3.402619 s. Die 22. Berechnung der Primzahlen mit 7000 OpenMP-Thread(s) ist korrekt.
		23. Berechnung: 3.479329 s. Die 23. Berechnung der Primzahlen mit 7000 OpenMP-Thread(s) ist korrekt.
		24. Berechnung: 3.503553 s. Die 24. Berechnung der Primzahlen mit 7000 OpenMP-Thread(s) ist korrekt.
		25. Berechnung: 3.397772 s. Die 25. Berechnung der Primzahlen mit 7000 OpenMP-Thread(s) ist korrekt.
		26. Berechnung: 3.489184 s. Die 26. Berechnung der Primzahlen mit 7000 OpenMP-Thread(s) ist korrekt.
		27. Berechnung: 3.487506 s. Die 27. Berechnung der Primzahlen mit 7000 OpenMP-Thread(s) ist korrekt.
		28. Berechnung: 3.439942 s. Die 28. Berechnung der Primzahlen mit 7000 OpenMP-Thread(s) ist korrekt.
		29. Berechnung: 3.486416 s. Die 29. Berechnung der Primzahlen mit 7000 OpenMP-Thread(s) ist korrekt.
		30. Berechnung: 3.494661 s. Die 30. Berechnung der Primzahlen mit 7000 OpenMP-Thread(s) ist korrekt.
		31. Berechnung: 3.401572 s. Die 31. Berechnung der Primzahlen mit 7000 OpenMP-Thread(s) ist korrekt.
		32. Berechnung: 3.490082 s. Die 32. Berechnung der Primzahlen mit 7000 OpenMP-Thread(s) ist korrekt.
		33. Berechnung: 3.478700 s. Die 33. Berechnung der Primzahlen mit 7000 OpenMP-Thread(s) ist korrekt.
		34. Berechnung: 3.396041 s. Die 34. Berechnung der Primzahlen mit 7000 OpenMP-Thread(s) ist korrekt.
		35. Berechnung: 3.503631 s. Die 35. Berechnung der Primzahlen mit 7000 OpenMP-Thread(s) ist korrekt.
		36. Berechnung: 3.487971 s. Die 36. Berechnung der Primzahlen mit 7000 OpenMP-Thread(s) ist korrekt.
		37. Berechnung: 3.408763 s. Die 37. Berechnung der Primzahlen mit 7000 OpenMP-Thread(s) ist korrekt.
		38. Berechnung: 3.476146 s. Die 38. Berechnung der Primzahlen mit 7000 OpenMP-Thread(s) ist korrekt.
		39. Berechnung: 3.494164 s. Die 39. Berechnung der Primzahlen mit 7000 OpenMP-Thread(s) ist korrekt.
		40. Berechnung: 3.439880 s. Die 40. Berechnung der Primzahlen mit 7000 OpenMP-Thread(s) ist korrekt.
		41. Berechnung: 3.490036 s. Die 41. Berechnung der Primzahlen mit 7000 OpenMP-Thread(s) ist korrekt.
		42. Berechnung: 3.458961 s. Die 42. Berechnung der Primzahlen mit 7000 OpenMP-Thread(s) ist korrekt.
		43. Berechnung: 3.430792 s. Die 43. Berechnung der Primzahlen mit 7000 OpenMP-Thread(s) ist korrekt.
		44. Berechnung: 3.485631 s. Die 44. Berechnung der Primzahlen mit 7000 OpenMP-Thread(s) ist korrekt.
		45. Berechnung: 3.495021 s. Die 45. Berechnung der Primzahlen mit 7000 OpenMP-Thread(s) ist korrekt.
		46. Berechnung: 3.405698 s. Die 46. Berechnung der Primzahlen mit 7000 OpenMP-Thread(s) ist korrekt.
		47. Berechnung: 3.481518 s. Die 47. Berechnung der Primzahlen mit 7000 OpenMP-Thread(s) ist korrekt.
		48. Berechnung: 3.495620 s. Die 48. Berechnung der Primzahlen mit 7000 OpenMP-Thread(s) ist korrekt.
		49. Berechnung: 3.399987 s. Die 49. Berechnung der Primzahlen mit 7000 OpenMP-Thread(s) ist korrekt.
		50. Berechnung: 3.466940 s. Die 50. Berechnung der Primzahlen mit 7000 OpenMP-Thread(s) ist korrekt.
		Durchschnittliche Ausfuehrungszeit des Programmes bei 50 Durchlaeufen mit 7000 OpenMP-Thread(s): 3.470551 s. Alle berechneten Primzahlen mit 7000 OpenMP-Thread(s) sind korrekt.
	Berechnung mittels 8000 OpenMP-Thread(s):
		1. Berechnung: 3.876975 s. Die 1. Berechnung der Primzahlen mit 8000 OpenMP-Thread(s) ist korrekt.
		2. Berechnung: 3.421873 s. Die 2. Berechnung der Primzahlen mit 8000 OpenMP-Thread(s) ist korrekt.
		3. Berechnung: 3.507163 s. Die 3. Berechnung der Primzahlen mit 8000 OpenMP-Thread(s) ist korrekt.
		4. Berechnung: 3.509617 s. Die 4. Berechnung der Primzahlen mit 8000 OpenMP-Thread(s) ist korrekt.
		5. Berechnung: 3.419316 s. Die 5. Berechnung der Primzahlen mit 8000 OpenMP-Thread(s) ist korrekt.
		6. Berechnung: 3.508390 s. Die 6. Berechnung der Primzahlen mit 8000 OpenMP-Thread(s) ist korrekt.
		7. Berechnung: 3.503623 s. Die 7. Berechnung der Primzahlen mit 8000 OpenMP-Thread(s) ist korrekt.
		8. Berechnung: 3.407184 s. Die 8. Berechnung der Primzahlen mit 8000 OpenMP-Thread(s) ist korrekt.
		9. Berechnung: 3.527056 s. Die 9. Berechnung der Primzahlen mit 8000 OpenMP-Thread(s) ist korrekt.
		10. Berechnung: 3.503389 s. Die 10. Berechnung der Primzahlen mit 8000 OpenMP-Thread(s) ist korrekt.
		11. Berechnung: 3.407170 s. Die 11. Berechnung der Primzahlen mit 8000 OpenMP-Thread(s) ist korrekt.
		12. Berechnung: 3.537687 s. Die 12. Berechnung der Primzahlen mit 8000 OpenMP-Thread(s) ist korrekt.
		13. Berechnung: 3.530335 s. Die 13. Berechnung der Primzahlen mit 8000 OpenMP-Thread(s) ist korrekt.
		14. Berechnung: 3.412101 s. Die 14. Berechnung der Primzahlen mit 8000 OpenMP-Thread(s) ist korrekt.
		15. Berechnung: 3.484161 s. Die 15. Berechnung der Primzahlen mit 8000 OpenMP-Thread(s) ist korrekt.
		16. Berechnung: 3.490827 s. Die 16. Berechnung der Primzahlen mit 8000 OpenMP-Thread(s) ist korrekt.
		17. Berechnung: 3.406186 s. Die 17. Berechnung der Primzahlen mit 8000 OpenMP-Thread(s) ist korrekt.
		18. Berechnung: 3.502013 s. Die 18. Berechnung der Primzahlen mit 8000 OpenMP-Thread(s) ist korrekt.
		19. Berechnung: 3.496652 s. Die 19. Berechnung der Primzahlen mit 8000 OpenMP-Thread(s) ist korrekt.
		20. Berechnung: 3.407715 s. Die 20. Berechnung der Primzahlen mit 8000 OpenMP-Thread(s) ist korrekt.
		21. Berechnung: 3.512771 s. Die 21. Berechnung der Primzahlen mit 8000 OpenMP-Thread(s) ist korrekt.
		22. Berechnung: 3.491242 s. Die 22. Berechnung der Primzahlen mit 8000 OpenMP-Thread(s) ist korrekt.
		23. Berechnung: 3.409802 s. Die 23. Berechnung der Primzahlen mit 8000 OpenMP-Thread(s) ist korrekt.
		24. Berechnung: 3.498970 s. Die 24. Berechnung der Primzahlen mit 8000 OpenMP-Thread(s) ist korrekt.
		25. Berechnung: 3.506842 s. Die 25. Berechnung der Primzahlen mit 8000 OpenMP-Thread(s) ist korrekt.
		26. Berechnung: 3.409980 s. Die 26. Berechnung der Primzahlen mit 8000 OpenMP-Thread(s) ist korrekt.
		27. Berechnung: 3.500187 s. Die 27. Berechnung der Primzahlen mit 8000 OpenMP-Thread(s) ist korrekt.
		28. Berechnung: 3.495457 s. Die 28. Berechnung der Primzahlen mit 8000 OpenMP-Thread(s) ist korrekt.
		29. Berechnung: 3.444631 s. Die 29. Berechnung der Primzahlen mit 8000 OpenMP-Thread(s) ist korrekt.
		30. Berechnung: 3.519276 s. Die 30. Berechnung der Primzahlen mit 8000 OpenMP-Thread(s) ist korrekt.
		31. Berechnung: 3.520583 s. Die 31. Berechnung der Primzahlen mit 8000 OpenMP-Thread(s) ist korrekt.
		32. Berechnung: 3.395973 s. Die 32. Berechnung der Primzahlen mit 8000 OpenMP-Thread(s) ist korrekt.
		33. Berechnung: 3.526651 s. Die 33. Berechnung der Primzahlen mit 8000 OpenMP-Thread(s) ist korrekt.
		34. Berechnung: 3.491457 s. Die 34. Berechnung der Primzahlen mit 8000 OpenMP-Thread(s) ist korrekt.
		35. Berechnung: 3.434823 s. Die 35. Berechnung der Primzahlen mit 8000 OpenMP-Thread(s) ist korrekt.
		36. Berechnung: 3.497266 s. Die 36. Berechnung der Primzahlen mit 8000 OpenMP-Thread(s) ist korrekt.
		37. Berechnung: 3.478243 s. Die 37. Berechnung der Primzahlen mit 8000 OpenMP-Thread(s) ist korrekt.
		38. Berechnung: 3.448077 s. Die 38. Berechnung der Primzahlen mit 8000 OpenMP-Thread(s) ist korrekt.
		39. Berechnung: 3.472557 s. Die 39. Berechnung der Primzahlen mit 8000 OpenMP-Thread(s) ist korrekt.
		40. Berechnung: 3.524409 s. Die 40. Berechnung der Primzahlen mit 8000 OpenMP-Thread(s) ist korrekt.
		41. Berechnung: 3.422399 s. Die 41. Berechnung der Primzahlen mit 8000 OpenMP-Thread(s) ist korrekt.
		42. Berechnung: 3.494633 s. Die 42. Berechnung der Primzahlen mit 8000 OpenMP-Thread(s) ist korrekt.
		43. Berechnung: 3.475458 s. Die 43. Berechnung der Primzahlen mit 8000 OpenMP-Thread(s) ist korrekt.
		44. Berechnung: 3.408180 s. Die 44. Berechnung der Primzahlen mit 8000 OpenMP-Thread(s) ist korrekt.
		45. Berechnung: 3.495259 s. Die 45. Berechnung der Primzahlen mit 8000 OpenMP-Thread(s) ist korrekt.
		46. Berechnung: 3.429468 s. Die 46. Berechnung der Primzahlen mit 8000 OpenMP-Thread(s) ist korrekt.
		47. Berechnung: 3.478449 s. Die 47. Berechnung der Primzahlen mit 8000 OpenMP-Thread(s) ist korrekt.
		48. Berechnung: 3.490180 s. Die 48. Berechnung der Primzahlen mit 8000 OpenMP-Thread(s) ist korrekt.
		49. Berechnung: 3.411516 s. Die 49. Berechnung der Primzahlen mit 8000 OpenMP-Thread(s) ist korrekt.
		50. Berechnung: 3.491466 s. Die 50. Berechnung der Primzahlen mit 8000 OpenMP-Thread(s) ist korrekt.
		Durchschnittliche Ausfuehrungszeit des Programmes bei 50 Durchlaeufen mit 8000 OpenMP-Thread(s): 3.480713 s. Alle berechneten Primzahlen mit 8000 OpenMP-Thread(s) sind korrekt.
	Berechnung mittels 9000 OpenMP-Thread(s):
		1. Berechnung: 3.849582 s. Die 1. Berechnung der Primzahlen mit 9000 OpenMP-Thread(s) ist korrekt.
		2. Berechnung: 3.490677 s. Die 2. Berechnung der Primzahlen mit 9000 OpenMP-Thread(s) ist korrekt.
		3. Berechnung: 3.439557 s. Die 3. Berechnung der Primzahlen mit 9000 OpenMP-Thread(s) ist korrekt.
		4. Berechnung: 3.493620 s. Die 4. Berechnung der Primzahlen mit 9000 OpenMP-Thread(s) ist korrekt.
		5. Berechnung: 3.534154 s. Die 5. Berechnung der Primzahlen mit 9000 OpenMP-Thread(s) ist korrekt.
		6. Berechnung: 3.396670 s. Die 6. Berechnung der Primzahlen mit 9000 OpenMP-Thread(s) ist korrekt.
		7. Berechnung: 3.529358 s. Die 7. Berechnung der Primzahlen mit 9000 OpenMP-Thread(s) ist korrekt.
		8. Berechnung: 3.508892 s. Die 8. Berechnung der Primzahlen mit 9000 OpenMP-Thread(s) ist korrekt.
		9. Berechnung: 3.425490 s. Die 9. Berechnung der Primzahlen mit 9000 OpenMP-Thread(s) ist korrekt.
		10. Berechnung: 3.493298 s. Die 10. Berechnung der Primzahlen mit 9000 OpenMP-Thread(s) ist korrekt.
		11. Berechnung: 3.517425 s. Die 11. Berechnung der Primzahlen mit 9000 OpenMP-Thread(s) ist korrekt.
		12. Berechnung: 3.426667 s. Die 12. Berechnung der Primzahlen mit 9000 OpenMP-Thread(s) ist korrekt.
		13. Berechnung: 3.510439 s. Die 13. Berechnung der Primzahlen mit 9000 OpenMP-Thread(s) ist korrekt.
		14. Berechnung: 3.517770 s. Die 14. Berechnung der Primzahlen mit 9000 OpenMP-Thread(s) ist korrekt.
		15. Berechnung: 3.414174 s. Die 15. Berechnung der Primzahlen mit 9000 OpenMP-Thread(s) ist korrekt.
		16. Berechnung: 3.499712 s. Die 16. Berechnung der Primzahlen mit 9000 OpenMP-Thread(s) ist korrekt.
		17. Berechnung: 3.491548 s. Die 17. Berechnung der Primzahlen mit 9000 OpenMP-Thread(s) ist korrekt.
		18. Berechnung: 3.414638 s. Die 18. Berechnung der Primzahlen mit 9000 OpenMP-Thread(s) ist korrekt.
		19. Berechnung: 3.514600 s. Die 19. Berechnung der Primzahlen mit 9000 OpenMP-Thread(s) ist korrekt.
		20. Berechnung: 3.439641 s. Die 20. Berechnung der Primzahlen mit 9000 OpenMP-Thread(s) ist korrekt.
		21. Berechnung: 3.453958 s. Die 21. Berechnung der Primzahlen mit 9000 OpenMP-Thread(s) ist korrekt.
		22. Berechnung: 3.487923 s. Die 22. Berechnung der Primzahlen mit 9000 OpenMP-Thread(s) ist korrekt.
		23. Berechnung: 3.439376 s. Die 23. Berechnung der Primzahlen mit 9000 OpenMP-Thread(s) ist korrekt.
		24. Berechnung: 3.497769 s. Die 24. Berechnung der Primzahlen mit 9000 OpenMP-Thread(s) ist korrekt.
		25. Berechnung: 3.523942 s. Die 25. Berechnung der Primzahlen mit 9000 OpenMP-Thread(s) ist korrekt.
		26. Berechnung: 3.449546 s. Die 26. Berechnung der Primzahlen mit 9000 OpenMP-Thread(s) ist korrekt.
		27. Berechnung: 3.499011 s. Die 27. Berechnung der Primzahlen mit 9000 OpenMP-Thread(s) ist korrekt.
		28. Berechnung: 3.509156 s. Die 28. Berechnung der Primzahlen mit 9000 OpenMP-Thread(s) ist korrekt.
		29. Berechnung: 3.408491 s. Die 29. Berechnung der Primzahlen mit 9000 OpenMP-Thread(s) ist korrekt.
		30. Berechnung: 3.494926 s. Die 30. Berechnung der Primzahlen mit 9000 OpenMP-Thread(s) ist korrekt.
		31. Berechnung: 3.517971 s. Die 31. Berechnung der Primzahlen mit 9000 OpenMP-Thread(s) ist korrekt.
		32. Berechnung: 3.426848 s. Die 32. Berechnung der Primzahlen mit 9000 OpenMP-Thread(s) ist korrekt.
		33. Berechnung: 3.513510 s. Die 33. Berechnung der Primzahlen mit 9000 OpenMP-Thread(s) ist korrekt.
		34. Berechnung: 3.501048 s. Die 34. Berechnung der Primzahlen mit 9000 OpenMP-Thread(s) ist korrekt.
		35. Berechnung: 3.432445 s. Die 35. Berechnung der Primzahlen mit 9000 OpenMP-Thread(s) ist korrekt.
		36. Berechnung: 3.507183 s. Die 36. Berechnung der Primzahlen mit 9000 OpenMP-Thread(s) ist korrekt.
		37. Berechnung: 3.511670 s. Die 37. Berechnung der Primzahlen mit 9000 OpenMP-Thread(s) ist korrekt.
		38. Berechnung: 3.399829 s. Die 38. Berechnung der Primzahlen mit 9000 OpenMP-Thread(s) ist korrekt.
		39. Berechnung: 3.505962 s. Die 39. Berechnung der Primzahlen mit 9000 OpenMP-Thread(s) ist korrekt.
		40. Berechnung: 3.613001 s. Die 40. Berechnung der Primzahlen mit 9000 OpenMP-Thread(s) ist korrekt.
		41. Berechnung: 3.417705 s. Die 41. Berechnung der Primzahlen mit 9000 OpenMP-Thread(s) ist korrekt.
		42. Berechnung: 3.495291 s. Die 42. Berechnung der Primzahlen mit 9000 OpenMP-Thread(s) ist korrekt.
		43. Berechnung: 3.520392 s. Die 43. Berechnung der Primzahlen mit 9000 OpenMP-Thread(s) ist korrekt.
		44. Berechnung: 3.422201 s. Die 44. Berechnung der Primzahlen mit 9000 OpenMP-Thread(s) ist korrekt.
		45. Berechnung: 3.507582 s. Die 45. Berechnung der Primzahlen mit 9000 OpenMP-Thread(s) ist korrekt.
		46. Berechnung: 3.496450 s. Die 46. Berechnung der Primzahlen mit 9000 OpenMP-Thread(s) ist korrekt.
		47. Berechnung: 3.418487 s. Die 47. Berechnung der Primzahlen mit 9000 OpenMP-Thread(s) ist korrekt.
		48. Berechnung: 3.509210 s. Die 48. Berechnung der Primzahlen mit 9000 OpenMP-Thread(s) ist korrekt.
		49. Berechnung: 3.536695 s. Die 49. Berechnung der Primzahlen mit 9000 OpenMP-Thread(s) ist korrekt.
		50. Berechnung: 3.404169 s. Die 50. Berechnung der Primzahlen mit 9000 OpenMP-Thread(s) ist korrekt.
		Durchschnittliche Ausfuehrungszeit des Programmes bei 50 Durchlaeufen mit 9000 OpenMP-Thread(s): 3.486593 s. Alle berechneten Primzahlen mit 9000 OpenMP-Thread(s) sind korrekt.
	Berechnung mittels 10000 OpenMP-Thread(s):
		1. Berechnung: 3.830466 s. Die 1. Berechnung der Primzahlen mit 10000 OpenMP-Thread(s) ist korrekt.
		2. Berechnung: 3.498652 s. Die 2. Berechnung der Primzahlen mit 10000 OpenMP-Thread(s) ist korrekt.
		3. Berechnung: 3.475107 s. Die 3. Berechnung der Primzahlen mit 10000 OpenMP-Thread(s) ist korrekt.
		4. Berechnung: 3.446744 s. Die 4. Berechnung der Primzahlen mit 10000 OpenMP-Thread(s) ist korrekt.
		5. Berechnung: 3.526526 s. Die 5. Berechnung der Primzahlen mit 10000 OpenMP-Thread(s) ist korrekt.
		6. Berechnung: 3.427933 s. Die 6. Berechnung der Primzahlen mit 10000 OpenMP-Thread(s) ist korrekt.
		7. Berechnung: 3.520892 s. Die 7. Berechnung der Primzahlen mit 10000 OpenMP-Thread(s) ist korrekt.
		8. Berechnung: 3.503319 s. Die 8. Berechnung der Primzahlen mit 10000 OpenMP-Thread(s) ist korrekt.
		9. Berechnung: 3.432965 s. Die 9. Berechnung der Primzahlen mit 10000 OpenMP-Thread(s) ist korrekt.
		10. Berechnung: 3.535308 s. Die 10. Berechnung der Primzahlen mit 10000 OpenMP-Thread(s) ist korrekt.
		11. Berechnung: 3.512596 s. Die 11. Berechnung der Primzahlen mit 10000 OpenMP-Thread(s) ist korrekt.
		12. Berechnung: 3.409408 s. Die 12. Berechnung der Primzahlen mit 10000 OpenMP-Thread(s) ist korrekt.
		13. Berechnung: 3.516752 s. Die 13. Berechnung der Primzahlen mit 10000 OpenMP-Thread(s) ist korrekt.
		14. Berechnung: 3.529131 s. Die 14. Berechnung der Primzahlen mit 10000 OpenMP-Thread(s) ist korrekt.
		15. Berechnung: 3.440780 s. Die 15. Berechnung der Primzahlen mit 10000 OpenMP-Thread(s) ist korrekt.
		16. Berechnung: 3.503627 s. Die 16. Berechnung der Primzahlen mit 10000 OpenMP-Thread(s) ist korrekt.
		17. Berechnung: 3.517109 s. Die 17. Berechnung der Primzahlen mit 10000 OpenMP-Thread(s) ist korrekt.
		18. Berechnung: 3.460578 s. Die 18. Berechnung der Primzahlen mit 10000 OpenMP-Thread(s) ist korrekt.
		19. Berechnung: 3.515662 s. Die 19. Berechnung der Primzahlen mit 10000 OpenMP-Thread(s) ist korrekt.
		20. Berechnung: 3.473427 s. Die 20. Berechnung der Primzahlen mit 10000 OpenMP-Thread(s) ist korrekt.
		21. Berechnung: 3.436924 s. Die 21. Berechnung der Primzahlen mit 10000 OpenMP-Thread(s) ist korrekt.
		22. Berechnung: 3.525665 s. Die 22. Berechnung der Primzahlen mit 10000 OpenMP-Thread(s) ist korrekt.
		23. Berechnung: 3.509798 s. Die 23. Berechnung der Primzahlen mit 10000 OpenMP-Thread(s) ist korrekt.
		24. Berechnung: 3.420696 s. Die 24. Berechnung der Primzahlen mit 10000 OpenMP-Thread(s) ist korrekt.
		25. Berechnung: 3.529248 s. Die 25. Berechnung der Primzahlen mit 10000 OpenMP-Thread(s) ist korrekt.
		26. Berechnung: 3.524037 s. Die 26. Berechnung der Primzahlen mit 10000 OpenMP-Thread(s) ist korrekt.
		27. Berechnung: 3.434174 s. Die 27. Berechnung der Primzahlen mit 10000 OpenMP-Thread(s) ist korrekt.
		28. Berechnung: 3.497406 s. Die 28. Berechnung der Primzahlen mit 10000 OpenMP-Thread(s) ist korrekt.
		29. Berechnung: 3.518570 s. Die 29. Berechnung der Primzahlen mit 10000 OpenMP-Thread(s) ist korrekt.
		30. Berechnung: 3.424722 s. Die 30. Berechnung der Primzahlen mit 10000 OpenMP-Thread(s) ist korrekt.
		31. Berechnung: 3.513386 s. Die 31. Berechnung der Primzahlen mit 10000 OpenMP-Thread(s) ist korrekt.
		32. Berechnung: 3.500678 s. Die 32. Berechnung der Primzahlen mit 10000 OpenMP-Thread(s) ist korrekt.
		33. Berechnung: 3.433745 s. Die 33. Berechnung der Primzahlen mit 10000 OpenMP-Thread(s) ist korrekt.
		34. Berechnung: 3.529379 s. Die 34. Berechnung der Primzahlen mit 10000 OpenMP-Thread(s) ist korrekt.
		35. Berechnung: 3.518268 s. Die 35. Berechnung der Primzahlen mit 10000 OpenMP-Thread(s) ist korrekt.
		36. Berechnung: 3.421869 s. Die 36. Berechnung der Primzahlen mit 10000 OpenMP-Thread(s) ist korrekt.
		37. Berechnung: 3.524841 s. Die 37. Berechnung der Primzahlen mit 10000 OpenMP-Thread(s) ist korrekt.
		38. Berechnung: 3.535050 s. Die 38. Berechnung der Primzahlen mit 10000 OpenMP-Thread(s) ist korrekt.
		39. Berechnung: 3.428603 s. Die 39. Berechnung der Primzahlen mit 10000 OpenMP-Thread(s) ist korrekt.
		40. Berechnung: 3.510477 s. Die 40. Berechnung der Primzahlen mit 10000 OpenMP-Thread(s) ist korrekt.
		41. Berechnung: 3.517769 s. Die 41. Berechnung der Primzahlen mit 10000 OpenMP-Thread(s) ist korrekt.
		42. Berechnung: 3.447305 s. Die 42. Berechnung der Primzahlen mit 10000 OpenMP-Thread(s) ist korrekt.
		43. Berechnung: 3.518279 s. Die 43. Berechnung der Primzahlen mit 10000 OpenMP-Thread(s) ist korrekt.
		44. Berechnung: 3.499466 s. Die 44. Berechnung der Primzahlen mit 10000 OpenMP-Thread(s) ist korrekt.
		45. Berechnung: 3.431785 s. Die 45. Berechnung der Primzahlen mit 10000 OpenMP-Thread(s) ist korrekt.
		46. Berechnung: 3.526382 s. Die 46. Berechnung der Primzahlen mit 10000 OpenMP-Thread(s) ist korrekt.
		47. Berechnung: 3.563715 s. Die 47. Berechnung der Primzahlen mit 10000 OpenMP-Thread(s) ist korrekt.
		48. Berechnung: 3.373541 s. Die 48. Berechnung der Primzahlen mit 10000 OpenMP-Thread(s) ist korrekt.
		49. Berechnung: 3.558280 s. Die 49. Berechnung der Primzahlen mit 10000 OpenMP-Thread(s) ist korrekt.
		50. Berechnung: 3.538704 s. Die 50. Berechnung der Primzahlen mit 10000 OpenMP-Thread(s) ist korrekt.
		Durchschnittliche Ausfuehrungszeit des Programmes bei 50 Durchlaeufen mit 10000 OpenMP-Thread(s): 3.495795 s. Alle berechneten Primzahlen mit 10000 OpenMP-Thread(s) sind korrekt.
	Berechnung mittels 11000 OpenMP-Thread(s):
		1. Berechnung: 3.891796 s. Die 1. Berechnung der Primzahlen mit 11000 OpenMP-Thread(s) ist korrekt.
		2. Berechnung: 3.430087 s. Die 2. Berechnung der Primzahlen mit 11000 OpenMP-Thread(s) ist korrekt.
		3. Berechnung: 3.532092 s. Die 3. Berechnung der Primzahlen mit 11000 OpenMP-Thread(s) ist korrekt.
		4. Berechnung: 3.524361 s. Die 4. Berechnung der Primzahlen mit 11000 OpenMP-Thread(s) ist korrekt.
		5. Berechnung: 3.442195 s. Die 5. Berechnung der Primzahlen mit 11000 OpenMP-Thread(s) ist korrekt.
		6. Berechnung: 3.529380 s. Die 6. Berechnung der Primzahlen mit 11000 OpenMP-Thread(s) ist korrekt.
		7. Berechnung: 3.512552 s. Die 7. Berechnung der Primzahlen mit 11000 OpenMP-Thread(s) ist korrekt.
		8. Berechnung: 3.985334 s. Die 8. Berechnung der Primzahlen mit 11000 OpenMP-Thread(s) ist korrekt.
		9. Berechnung: 3.574477 s. Die 9. Berechnung der Primzahlen mit 11000 OpenMP-Thread(s) ist korrekt.
		10. Berechnung: 3.534054 s. Die 10. Berechnung der Primzahlen mit 11000 OpenMP-Thread(s) ist korrekt.
		11. Berechnung: 3.466053 s. Die 11. Berechnung der Primzahlen mit 11000 OpenMP-Thread(s) ist korrekt.
		12. Berechnung: 3.527362 s. Die 12. Berechnung der Primzahlen mit 11000 OpenMP-Thread(s) ist korrekt.
		13. Berechnung: 3.563739 s. Die 13. Berechnung der Primzahlen mit 11000 OpenMP-Thread(s) ist korrekt.
		14. Berechnung: 3.458383 s. Die 14. Berechnung der Primzahlen mit 11000 OpenMP-Thread(s) ist korrekt.
		15. Berechnung: 3.513293 s. Die 15. Berechnung der Primzahlen mit 11000 OpenMP-Thread(s) ist korrekt.
		16. Berechnung: 3.519575 s. Die 16. Berechnung der Primzahlen mit 11000 OpenMP-Thread(s) ist korrekt.
		17. Berechnung: 3.459715 s. Die 17. Berechnung der Primzahlen mit 11000 OpenMP-Thread(s) ist korrekt.
		18. Berechnung: 3.517623 s. Die 18. Berechnung der Primzahlen mit 11000 OpenMP-Thread(s) ist korrekt.
		19. Berechnung: 3.488437 s. Die 19. Berechnung der Primzahlen mit 11000 OpenMP-Thread(s) ist korrekt.
		20. Berechnung: 3.463081 s. Die 20. Berechnung der Primzahlen mit 11000 OpenMP-Thread(s) ist korrekt.
		21. Berechnung: 3.516251 s. Die 21. Berechnung der Primzahlen mit 11000 OpenMP-Thread(s) ist korrekt.
		22. Berechnung: 3.545558 s. Die 22. Berechnung der Primzahlen mit 11000 OpenMP-Thread(s) ist korrekt.
		23. Berechnung: 3.434120 s. Die 23. Berechnung der Primzahlen mit 11000 OpenMP-Thread(s) ist korrekt.
		24. Berechnung: 3.499083 s. Die 24. Berechnung der Primzahlen mit 11000 OpenMP-Thread(s) ist korrekt.
		25. Berechnung: 3.530803 s. Die 25. Berechnung der Primzahlen mit 11000 OpenMP-Thread(s) ist korrekt.
		26. Berechnung: 3.457152 s. Die 26. Berechnung der Primzahlen mit 11000 OpenMP-Thread(s) ist korrekt.
		27. Berechnung: 3.520108 s. Die 27. Berechnung der Primzahlen mit 11000 OpenMP-Thread(s) ist korrekt.
		28. Berechnung: 3.505975 s. Die 28. Berechnung der Primzahlen mit 11000 OpenMP-Thread(s) ist korrekt.
		29. Berechnung: 3.437240 s. Die 29. Berechnung der Primzahlen mit 11000 OpenMP-Thread(s) ist korrekt.
		30. Berechnung: 3.538684 s. Die 30. Berechnung der Primzahlen mit 11000 OpenMP-Thread(s) ist korrekt.
		31. Berechnung: 3.514541 s. Die 31. Berechnung der Primzahlen mit 11000 OpenMP-Thread(s) ist korrekt.
		32. Berechnung: 3.419959 s. Die 32. Berechnung der Primzahlen mit 11000 OpenMP-Thread(s) ist korrekt.
		33. Berechnung: 3.537654 s. Die 33. Berechnung der Primzahlen mit 11000 OpenMP-Thread(s) ist korrekt.
		34. Berechnung: 3.518000 s. Die 34. Berechnung der Primzahlen mit 11000 OpenMP-Thread(s) ist korrekt.
		35. Berechnung: 3.468976 s. Die 35. Berechnung der Primzahlen mit 11000 OpenMP-Thread(s) ist korrekt.
		36. Berechnung: 3.521277 s. Die 36. Berechnung der Primzahlen mit 11000 OpenMP-Thread(s) ist korrekt.
		37. Berechnung: 3.529733 s. Die 37. Berechnung der Primzahlen mit 11000 OpenMP-Thread(s) ist korrekt.
		38. Berechnung: 3.444096 s. Die 38. Berechnung der Primzahlen mit 11000 OpenMP-Thread(s) ist korrekt.
		39. Berechnung: 3.526587 s. Die 39. Berechnung der Primzahlen mit 11000 OpenMP-Thread(s) ist korrekt.
		40. Berechnung: 3.529607 s. Die 40. Berechnung der Primzahlen mit 11000 OpenMP-Thread(s) ist korrekt.
		41. Berechnung: 3.437986 s. Die 41. Berechnung der Primzahlen mit 11000 OpenMP-Thread(s) ist korrekt.
		42. Berechnung: 3.536172 s. Die 42. Berechnung der Primzahlen mit 11000 OpenMP-Thread(s) ist korrekt.
		43. Berechnung: 3.498316 s. Die 43. Berechnung der Primzahlen mit 11000 OpenMP-Thread(s) ist korrekt.
		44. Berechnung: 3.468091 s. Die 44. Berechnung der Primzahlen mit 11000 OpenMP-Thread(s) ist korrekt.
		45. Berechnung: 3.526990 s. Die 45. Berechnung der Primzahlen mit 11000 OpenMP-Thread(s) ist korrekt.
		46. Berechnung: 3.541476 s. Die 46. Berechnung der Primzahlen mit 11000 OpenMP-Thread(s) ist korrekt.
		47. Berechnung: 3.440922 s. Die 47. Berechnung der Primzahlen mit 11000 OpenMP-Thread(s) ist korrekt.
		48. Berechnung: 3.529810 s. Die 48. Berechnung der Primzahlen mit 11000 OpenMP-Thread(s) ist korrekt.
		49. Berechnung: 3.525700 s. Die 49. Berechnung der Primzahlen mit 11000 OpenMP-Thread(s) ist korrekt.
		50. Berechnung: 3.460294 s. Die 50. Berechnung der Primzahlen mit 11000 OpenMP-Thread(s) ist korrekt.
		Durchschnittliche Ausfuehrungszeit des Programmes bei 50 Durchlaeufen mit 11000 OpenMP-Thread(s): 3.517895 s. Alle berechneten Primzahlen mit 11000 OpenMP-Thread(s) sind korrekt.
Alle berechneten Primzahlen sind korrekt.
thomas@thomas-ubuntu:~/Schreibtisch/Forschung zum parallelen Programmierparadigma/05 - Parallele Berechnung mit OpenMP$ 

